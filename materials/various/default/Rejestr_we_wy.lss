
Rejestr_we_wy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000020e  00800060  00002d5c  00002df0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000295  0080026e  0080026e  00002ffe  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00002ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000008ea  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002c6b  00000000  00000000  00003968  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a5  00000000  00000000  000065d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002935  00000000  00000000  00006c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000470  00000000  00000000  000095b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b7d  00000000  00000000  00009a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002044  00000000  00000000  0000a59d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000270  00000000  00000000  0000c5e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 30       	cpi	r26, 0x03	; 3
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ab 09 	call	0x1356	; 0x1356 <main>
      8a:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_LCD_OutNibble>:
// Funkcja wystawiaj¹ca pó³bajt na magistralê danych
//
//-----------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
  if(nibbleToWrite & 0x01)
      92:	80 ff       	sbrs	r24, 0
      94:	02 c0       	rjmp	.+4      	; 0x9a <_LCD_OutNibble+0x8>
    LCD_DB4_PORT |= LCD_DB4;
      96:	c3 9a       	sbi	0x18, 3	; 24
      98:	01 c0       	rjmp	.+2      	; 0x9c <_LCD_OutNibble+0xa>
   else
    LCD_DB4_PORT  &= ~LCD_DB4;
      9a:	c3 98       	cbi	0x18, 3	; 24

  if(nibbleToWrite & 0x02)
      9c:	81 ff       	sbrs	r24, 1
      9e:	02 c0       	rjmp	.+4      	; 0xa4 <_LCD_OutNibble+0x12>
    LCD_DB5_PORT |= LCD_DB5;
      a0:	c2 9a       	sbi	0x18, 2	; 24
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <_LCD_OutNibble+0x14>
   else
    LCD_DB5_PORT  &= ~LCD_DB5;
      a4:	c2 98       	cbi	0x18, 2	; 24

  if(nibbleToWrite & 0x04)
      a6:	82 ff       	sbrs	r24, 2
      a8:	02 c0       	rjmp	.+4      	; 0xae <_LCD_OutNibble+0x1c>
    LCD_DB6_PORT |= LCD_DB6;
      aa:	af 9a       	sbi	0x15, 7	; 21
      ac:	01 c0       	rjmp	.+2      	; 0xb0 <_LCD_OutNibble+0x1e>
   else
    LCD_DB6_PORT  &= ~LCD_DB6;
      ae:	af 98       	cbi	0x15, 7	; 21

  if(nibbleToWrite & 0x08)
      b0:	83 ff       	sbrs	r24, 3
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <_LCD_OutNibble+0x26>
    LCD_DB7_PORT |= LCD_DB7;
      b4:	c0 9a       	sbi	0x18, 0	; 24
      b6:	08 95       	ret
   else
    LCD_DB7_PORT  &= ~LCD_DB7;
      b8:	c0 98       	cbi	0x18, 0	; 24
      ba:	08 95       	ret

000000bc <_LCD_Write>:
//
// Funkcja zapisu bajtu do wyœwietacza (bez rozró¿nienia instrukcja/dane).
//
//------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
      bc:	1f 93       	push	r17
      be:	18 2f       	mov	r17, r24
  LCD_E_PORT |= LCD_E;
      c0:	ac 9a       	sbi	0x15, 4	; 21
  _LCD_OutNibble(dataToWrite >> 4);
      c2:	82 95       	swap	r24
      c4:	8f 70       	andi	r24, 0x0F	; 15
      c6:	0e 94 49 00 	call	0x92	; 0x92 <_LCD_OutNibble>
  LCD_E_PORT &= ~LCD_E;
      ca:	ac 98       	cbi	0x15, 4	; 21
  LCD_E_PORT |= LCD_E;
      cc:	ac 9a       	sbi	0x15, 4	; 21
  _LCD_OutNibble(dataToWrite);
      ce:	81 2f       	mov	r24, r17
      d0:	0e 94 49 00 	call	0x92	; 0x92 <_LCD_OutNibble>
  LCD_E_PORT &= ~LCD_E;
      d4:	ac 98       	cbi	0x15, 4	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
      d6:	85 e8       	ldi	r24, 0x85	; 133
      d8:	8a 95       	dec	r24
      da:	f1 f7       	brne	.-4      	; 0xd8 <_LCD_Write+0x1c>
  _delay_us(50);
}
      dc:	1f 91       	pop	r17
      de:	08 95       	ret

000000e0 <LCD_WriteCommand>:
// Funkcja zapisu rozkazu do wyœwietlacza
//
//------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
  LCD_RS_PORT &= ~LCD_RS;
      e0:	ab 98       	cbi	0x15, 3	; 21
  _LCD_Write(commandToWrite);
      e2:	0e 94 5e 00 	call	0xbc	; 0xbc <_LCD_Write>
}
      e6:	08 95       	ret

000000e8 <LCD_WriteData>:
// Funkcja zapisu danych do pamiêci wyœwietlacza
//
//------------------------------------------------------------------------
void LCD_WriteData(unsigned char dataToWrite)
{
  LCD_RS_PORT |= LCD_RS;
      e8:	ab 9a       	sbi	0x15, 3	; 21
  _LCD_Write(dataToWrite);
      ea:	0e 94 5e 00 	call	0xbc	; 0xbc <_LCD_Write>
}
      ee:	08 95       	ret

000000f0 <LCD_WriteText>:
//
// Funkcja wyœwietlenia napisu na wyswietlaczu.
//
//------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
      f4:	ec 01       	movw	r28, r24
      f6:	03 c0       	rjmp	.+6      	; 0xfe <LCD_WriteText+0xe>
  while(*text)
    LCD_WriteData(*text++);
      f8:	21 96       	adiw	r28, 0x01	; 1
      fa:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_WriteData>
// Funkcja wyœwietlenia napisu na wyswietlaczu.
//
//------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
  while(*text)
      fe:	88 81       	ld	r24, Y
     100:	88 23       	and	r24, r24
     102:	d1 f7       	brne	.-12     	; 0xf8 <LCD_WriteText+0x8>
    LCD_WriteData(*text++);
}
     104:	df 91       	pop	r29
     106:	cf 91       	pop	r28
     108:	08 95       	ret

0000010a <LCD_GoTo>:
// Funkcja ustawienia wspó³rzêdnych ekranowych
//
//------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
  LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
     10a:	62 95       	swap	r22
     10c:	66 0f       	add	r22, r22
     10e:	66 0f       	add	r22, r22
     110:	60 7c       	andi	r22, 0xC0	; 192
     112:	68 0f       	add	r22, r24
     114:	86 2f       	mov	r24, r22
     116:	80 68       	ori	r24, 0x80	; 128
     118:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_WriteCommand>
}
     11c:	08 95       	ret

0000011e <LCD_Clear>:
// Funkcja czyszczenia ekranu wyœwietlacza.
//
//------------------------------------------------------------------------
void LCD_Clear(void)
{
  LCD_WriteCommand(HD44780_CLEAR);
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_WriteCommand>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     124:	80 ea       	ldi	r24, 0xA0	; 160
     126:	9f e0       	ldi	r25, 0x0F	; 15
     128:	01 97       	sbiw	r24, 0x01	; 1
     12a:	f1 f7       	brne	.-4      	; 0x128 <LCD_Clear+0xa>
  _delay_ms(2);
}
     12c:	08 95       	ret

0000012e <LCD_Home>:
// Funkcja przywrócenia pocz¹tkowych wspó³rzêdnych wyœwietlacza.
//
//------------------------------------------------------------------------
void LCD_Home(void)
{
  LCD_WriteCommand(HD44780_HOME);
     12e:	82 e0       	ldi	r24, 0x02	; 2
     130:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_WriteCommand>
     134:	80 ea       	ldi	r24, 0xA0	; 160
     136:	9f e0       	ldi	r25, 0x0F	; 15
     138:	01 97       	sbiw	r24, 0x01	; 1
     13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_Home+0xa>
  _delay_ms(2);
}
     13c:	08 95       	ret

0000013e <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//------------------------------------------------------------------------
void LCD_Initalize(void)
{
     13e:	1f 93       	push	r17
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
  unsigned char i;
  LCD_DB4_DIR |= LCD_DB4;  // Konfiguracja kierunku pracy wyprowadzeñ
     144:	bb 9a       	sbi	0x17, 3	; 23
  LCD_DB5_DIR |= LCD_DB5;  //
     146:	ba 9a       	sbi	0x17, 2	; 23
  LCD_DB6_DIR |= LCD_DB6;  //
     148:	a7 9a       	sbi	0x14, 7	; 20
  LCD_DB7_DIR |= LCD_DB7;  //
     14a:	b8 9a       	sbi	0x17, 0	; 23
  LCD_E_DIR 	|= LCD_E;  //
     14c:	a4 9a       	sbi	0x14, 4	; 20
  LCD_RS_DIR 	|= LCD_RS; //
     14e:	a3 9a       	sbi	0x14, 3	; 20
     150:	80 e3       	ldi	r24, 0x30	; 48
     152:	95 e7       	ldi	r25, 0x75	; 117
     154:	01 97       	sbiw	r24, 0x01	; 1
     156:	f1 f7       	brne	.-4      	; 0x154 <LCD_Initalize+0x16>
  _delay_ms(15);           // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
  LCD_RS_PORT &= ~LCD_RS;  // wyzerowanie linii RS
     158:	ab 98       	cbi	0x15, 3	; 21
  LCD_E_PORT &= ~LCD_E;    // wyzerowanie linii E
     15a:	ac 98       	cbi	0x15, 4	; 21
     15c:	10 e0       	ldi	r17, 0x00	; 0
     15e:	c0 e1       	ldi	r28, 0x10	; 16
     160:	d7 e2       	ldi	r29, 0x27	; 39

  for(i = 0; i < 3; i++)   // trzykrotne powtórzenie bloku instrukcji
  {
    LCD_E_PORT |= LCD_E;   //  E = 1
     162:	ac 9a       	sbi	0x15, 4	; 21
    _LCD_OutNibble(0x03);  // tryb 8-bitowy
     164:	83 e0       	ldi	r24, 0x03	; 3
     166:	0e 94 49 00 	call	0x92	; 0x92 <_LCD_OutNibble>
    LCD_E_PORT &= ~LCD_E;  // E = 0
     16a:	ac 98       	cbi	0x15, 4	; 21
     16c:	ce 01       	movw	r24, r28
     16e:	01 97       	sbiw	r24, 0x01	; 1
     170:	f1 f7       	brne	.-4      	; 0x16e <LCD_Initalize+0x30>
  LCD_RS_DIR 	|= LCD_RS; //
  _delay_ms(15);           // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
  LCD_RS_PORT &= ~LCD_RS;  // wyzerowanie linii RS
  LCD_E_PORT &= ~LCD_E;    // wyzerowanie linii E

  for(i = 0; i < 3; i++)   // trzykrotne powtórzenie bloku instrukcji
     172:	1f 5f       	subi	r17, 0xFF	; 255
     174:	13 30       	cpi	r17, 0x03	; 3
     176:	a9 f7       	brne	.-22     	; 0x162 <LCD_Initalize+0x24>
    _LCD_OutNibble(0x03);  // tryb 8-bitowy
    LCD_E_PORT &= ~LCD_E;  // E = 0
    _delay_ms(5);          // czekaj 5ms
  }

  LCD_E_PORT |= LCD_E;     // E = 1
     178:	ac 9a       	sbi	0x15, 4	; 21
  _LCD_OutNibble(0x02);    // tryb 4-bitowy
     17a:	82 e0       	ldi	r24, 0x02	; 2
     17c:	0e 94 49 00 	call	0x92	; 0x92 <_LCD_OutNibble>
  LCD_E_PORT &= ~LCD_E;    // E = 0
     180:	ac 98       	cbi	0x15, 4	; 21
     182:	80 ed       	ldi	r24, 0xD0	; 208
     184:	97 e0       	ldi	r25, 0x07	; 7
     186:	01 97       	sbiw	r24, 0x01	; 1
     188:	f1 f7       	brne	.-4      	; 0x186 <LCD_Initalize+0x48>

  _delay_ms(1);            // czekaj 1ms 
  LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); //interfejs 4-bity, 2-linie, znak 5x7
     18a:	88 e2       	ldi	r24, 0x28	; 40
     18c:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_WriteCommand>
  LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
     190:	88 e0       	ldi	r24, 0x08	; 8
     192:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_WriteCommand>
  LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_WriteCommand>
     19c:	80 ea       	ldi	r24, 0xA0	; 160
     19e:	9f e0       	ldi	r25, 0x0F	; 15
     1a0:	01 97       	sbiw	r24, 0x01	; 1
     1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LCD_Initalize+0x62>
  _delay_ms(2);
  LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
     1a4:	86 e0       	ldi	r24, 0x06	; 6
     1a6:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_WriteCommand>
  LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
     1aa:	8c e0       	ldi	r24, 0x0C	; 12
     1ac:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_WriteCommand>
}
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	1f 91       	pop	r17
     1b6:	08 95       	ret

000001b8 <I2C_start>:
//*********************************************
//*  Podprogram inicjowania magistrali I2C    *
//*********************************************
void I2C_start(void)
{
  I2C_SCL_H();
     1b8:	a8 9a       	sbi	0x15, 0	; 21
  I2C_SDA_H();
     1ba:	a9 9a       	sbi	0x15, 1	; 21
  I2C_SDA_WR();
     1bc:	a1 9a       	sbi	0x14, 1	; 20
  I2C_SCL_WR();	 //inicjalizacja kierunków portów
     1be:	a0 9a       	sbi	0x14, 0	; 20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     1c0:	8a e1       	ldi	r24, 0x1A	; 26
     1c2:	98 2f       	mov	r25, r24
     1c4:	9a 95       	dec	r25
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <I2C_start+0xc>
  _delay_us(10);
  I2C_SDA_L();
     1c8:	a9 98       	cbi	0x15, 1	; 21
     1ca:	98 2f       	mov	r25, r24
     1cc:	9a 95       	dec	r25
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <I2C_start+0x14>
  _delay_us(10);
  I2C_SCL_L();
     1d0:	a8 98       	cbi	0x15, 0	; 21
     1d2:	8a 95       	dec	r24
     1d4:	f1 f7       	brne	.-4      	; 0x1d2 <I2C_start+0x1a>
  _delay_us(10);
}
     1d6:	08 95       	ret

000001d8 <I2C_stop>:
//*********************************************
//*  Podprogram zatrzymania magistrali I2C    *
//*********************************************
void I2C_stop(void)
{
  I2C_SDA_WR();		// SDA na zapis
     1d8:	a1 9a       	sbi	0x14, 1	; 20
  I2C_SCL_H();
     1da:	a8 9a       	sbi	0x15, 0	; 21
     1dc:	8a e1       	ldi	r24, 0x1A	; 26
     1de:	98 2f       	mov	r25, r24
     1e0:	9a 95       	dec	r25
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <I2C_stop+0x8>
  _delay_us(10);
  I2C_SDA_H();
     1e4:	a9 9a       	sbi	0x15, 1	; 21
     1e6:	8a 95       	dec	r24
     1e8:	f1 f7       	brne	.-4      	; 0x1e6 <I2C_stop+0xe>
  _delay_us(10);
}
     1ea:	08 95       	ret

000001ec <I2C_read>:
//*********************************************
u08 I2C_read(u08 ack)
{
  u08 i;
  u08 b = 0;
  I2C_SDA_RD();		// SDA na odczyt
     1ec:	a1 98       	cbi	0x14, 1	; 20
  I2C_SDA_H();		// podci¹ganie SDA
     1ee:	a9 9a       	sbi	0x15, 1	; 21
     1f0:	9a e1       	ldi	r25, 0x1A	; 26
     1f2:	9a 95       	dec	r25
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <I2C_read+0x6>
     1f6:	20 e0       	ldi	r18, 0x00	; 0
     1f8:	30 e0       	ldi	r19, 0x00	; 0
  _delay_us(10);
  for (i=0; i<8; i++)	// czytanie 8 bitów
  {
    I2C_SCL_H();	// SCL w stan wysoki
     1fa:	4a e1       	ldi	r20, 0x1A	; 26
     1fc:	a8 9a       	sbi	0x15, 0	; 21
     1fe:	94 2f       	mov	r25, r20
     200:	9a 95       	dec	r25
     202:	f1 f7       	brne	.-4      	; 0x200 <I2C_read+0x14>
    _delay_us(10);
    b <<= 1;		// przesuñ o 1 bit
     204:	33 0f       	add	r19, r19
    if (bit_is_set(I2C_PORT_I,I2C_SDA)) // jeœli SDA=1 
     206:	99 99       	sbic	0x13, 1	; 19
      b |= 1;		// dodaj odczytany bit z magistrali
     208:	31 60       	ori	r19, 0x01	; 1
    I2C_SCL_L();	// SCL w stan niski
     20a:	a8 98       	cbi	0x15, 0	; 21
     20c:	94 2f       	mov	r25, r20
     20e:	9a 95       	dec	r25
     210:	f1 f7       	brne	.-4      	; 0x20e <I2C_read+0x22>
  u08 i;
  u08 b = 0;
  I2C_SDA_RD();		// SDA na odczyt
  I2C_SDA_H();		// podci¹ganie SDA
  _delay_us(10);
  for (i=0; i<8; i++)	// czytanie 8 bitów
     212:	2f 5f       	subi	r18, 0xFF	; 255
     214:	28 30       	cpi	r18, 0x08	; 8
     216:	91 f7       	brne	.-28     	; 0x1fc <I2C_read+0x10>
    if (bit_is_set(I2C_PORT_I,I2C_SDA)) // jeœli SDA=1 
      b |= 1;		// dodaj odczytany bit z magistrali
    I2C_SCL_L();	// SCL w stan niski
    _delay_us(10);
  }
  I2C_SDA_WR();		// SDA na zapis
     218:	a1 9a       	sbi	0x14, 1	; 20
  if (ack == 0)	    // ustaw bit ACK na okreœlon¹ wartoœæ
     21a:	88 23       	and	r24, r24
     21c:	11 f4       	brne	.+4      	; 0x222 <I2C_read+0x36>
    I2C_SDA_L();
     21e:	a9 98       	cbi	0x15, 1	; 21
     220:	01 c0       	rjmp	.+2      	; 0x224 <I2C_read+0x38>
  else
    I2C_SDA_H();
     222:	a9 9a       	sbi	0x15, 1	; 21
     224:	8a e1       	ldi	r24, 0x1A	; 26
     226:	98 2f       	mov	r25, r24
     228:	9a 95       	dec	r25
     22a:	f1 f7       	brne	.-4      	; 0x228 <I2C_read+0x3c>
  _delay_us(10);
  I2C_SCL_H();
     22c:	a8 9a       	sbi	0x15, 0	; 21
     22e:	98 2f       	mov	r25, r24
     230:	9a 95       	dec	r25
     232:	f1 f7       	brne	.-4      	; 0x230 <I2C_read+0x44>
  _delay_us(10);
  I2C_SCL_L();
     234:	a8 98       	cbi	0x15, 0	; 21
     236:	98 2f       	mov	r25, r24
     238:	9a 95       	dec	r25
     23a:	f1 f7       	brne	.-4      	; 0x238 <I2C_read+0x4c>
  _delay_us(10);
  I2C_SDA_L();
     23c:	a9 98       	cbi	0x15, 1	; 21
     23e:	8a 95       	dec	r24
     240:	f1 f7       	brne	.-4      	; 0x23e <I2C_read+0x52>
  _delay_us(10);
  return(b);
}
     242:	83 2f       	mov	r24, r19
     244:	08 95       	ret

00000246 <I2C_write>:
//*    Podprogram zapisu na magistralê I2C    *
//*********************************************
u08 I2C_write(u08 b)
{
  u08 i;
  I2C_SDA_WR();		  // SDA na zapis
     246:	a1 9a       	sbi	0x14, 1	; 20
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	4a e1       	ldi	r20, 0x1A	; 26
  for (i=0; i<8; i++) // zapis 8 bitów
  {
    if (b & 0x80)
     24c:	87 ff       	sbrs	r24, 7
     24e:	02 c0       	rjmp	.+4      	; 0x254 <I2C_write+0xe>
      I2C_SDA_H();
     250:	a9 9a       	sbi	0x15, 1	; 21
     252:	01 c0       	rjmp	.+2      	; 0x256 <I2C_write+0x10>
    else
      I2C_SDA_L();
     254:	a9 98       	cbi	0x15, 1	; 21
     256:	3a e1       	ldi	r19, 0x1A	; 26
     258:	94 2f       	mov	r25, r20
     25a:	9a 95       	dec	r25
     25c:	f1 f7       	brne	.-4      	; 0x25a <I2C_write+0x14>
    _delay_us(10);
    I2C_SCL_H();
     25e:	a8 9a       	sbi	0x15, 0	; 21
     260:	94 2f       	mov	r25, r20
     262:	9a 95       	dec	r25
     264:	f1 f7       	brne	.-4      	; 0x262 <I2C_write+0x1c>
    _delay_us(10);
    I2C_SCL_L();
     266:	a8 98       	cbi	0x15, 0	; 21
//*********************************************
u08 I2C_write(u08 b)
{
  u08 i;
  I2C_SDA_WR();		  // SDA na zapis
  for (i=0; i<8; i++) // zapis 8 bitów
     268:	2f 5f       	subi	r18, 0xFF	; 255
     26a:	28 30       	cpi	r18, 0x08	; 8
     26c:	11 f0       	breq	.+4      	; 0x272 <I2C_write+0x2c>
      I2C_SDA_L();
    _delay_us(10);
    I2C_SCL_H();
    _delay_us(10);
    I2C_SCL_L();
    b <<= 1;		  // przesuñ o 1 bit
     26e:	88 0f       	add	r24, r24
     270:	ed cf       	rjmp	.-38     	; 0x24c <I2C_write+0x6>
  }
  I2C_SDA_RD();		  // w³¹cz czytanie SDA
     272:	a1 98       	cbi	0x14, 1	; 20
  I2C_SDA_H();		  // podci¹gnij SDA
     274:	a9 9a       	sbi	0x15, 1	; 21
     276:	83 2f       	mov	r24, r19
     278:	8a 95       	dec	r24
     27a:	f1 f7       	brne	.-4      	; 0x278 <I2C_write+0x32>
  _delay_us(10);
  I2C_SCL_H();		  // SCL=1
     27c:	a8 9a       	sbi	0x15, 0	; 21
     27e:	83 2f       	mov	r24, r19
     280:	8a 95       	dec	r24
     282:	f1 f7       	brne	.-4      	; 0x280 <I2C_write+0x3a>
     284:	8f ef       	ldi	r24, 0xFF	; 255
  _delay_us(10);
  i=0xFF;
  do
  {
    if (bit_is_clear(I2C_PORT_I,I2C_SDA)) break; // je¿eli jest potwierdzenie
     286:	2a e1       	ldi	r18, 0x1A	; 26
     288:	99 9b       	sbis	0x13, 1	; 19
     28a:	05 c0       	rjmp	.+10     	; 0x296 <I2C_write+0x50>
     28c:	92 2f       	mov	r25, r18
     28e:	9a 95       	dec	r25
     290:	f1 f7       	brne	.-4      	; 0x28e <I2C_write+0x48>
    _delay_us(10);
  }
  while(--i>0);
     292:	81 50       	subi	r24, 0x01	; 1
     294:	c9 f7       	brne	.-14     	; 0x288 <I2C_write+0x42>
  I2C_SCL_L();		  // SCL=0
     296:	a8 98       	cbi	0x15, 0	; 21
     298:	9a e1       	ldi	r25, 0x1A	; 26
     29a:	9a 95       	dec	r25
     29c:	f1 f7       	brne	.-4      	; 0x29a <I2C_write+0x54>
  _delay_us(10);
  return(i);
}
     29e:	08 95       	ret

000002a0 <bcd2bin>:

//*********************************************
//*    Podprogram konwersji BCD na liczbê     *
//*********************************************
u08 bcd2bin(u08 bcd)                    
{
     2a0:	98 2f       	mov	r25, r24
#ifdef OPTIMIZE_SPEED
  return (10*(bcd>>4)|(bcd&0x0f));
#else
  u08 Temp = bcd & 0x0F; 
     2a2:	82 95       	swap	r24
     2a4:	8f 70       	andi	r24, 0x0F	; 15
     2a6:	88 0f       	add	r24, r24
     2a8:	28 2f       	mov	r18, r24
     2aa:	22 0f       	add	r18, r18
     2ac:	22 0f       	add	r18, r18
     2ae:	82 0f       	add	r24, r18
     2b0:	9f 70       	andi	r25, 0x0F	; 15
    Temp += 10; 
    bcd -= 0x10; 
  } 
  return Temp; 
#endif
}
     2b2:	89 0f       	add	r24, r25
     2b4:	08 95       	ret

000002b6 <bin2bcd>:

//*********************************************
//*    Podprogram konwersji liczby na BCD     *
//*********************************************
u08 bin2bcd(u08 bin)                    
{
     2b6:	28 2f       	mov	r18, r24
     2b8:	6a e0       	ldi	r22, 0x0A	; 10
     2ba:	0e 94 39 16 	call	0x2c72	; 0x2c72 <__udivmodqi4>
     2be:	38 2f       	mov	r19, r24
     2c0:	32 95       	swap	r19
     2c2:	30 7f       	andi	r19, 0xF0	; 240
     2c4:	82 2f       	mov	r24, r18
     2c6:	0e 94 39 16 	call	0x2c72	; 0x2c72 <__udivmodqi4>
    Temp += 0x10; 
    bin-=10; 
  } 
  return Temp+bin; 
#endif
}
     2ca:	83 2f       	mov	r24, r19
     2cc:	89 0f       	add	r24, r25
     2ce:	08 95       	ret

000002d0 <PCF8563_read>:

//*********************************************
//*    Podprogram odczytu bajtu z PCF8563     *
//*********************************************
u08 PCF8563_read(u08 address)
{
     2d0:	1f 93       	push	r17
     2d2:	18 2f       	mov	r17, r24
  u08 a;
  I2C_start();
     2d4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_start>
  I2C_write(SLAVE_ADDR_WR); //slave adres zapisu równy A2
     2d8:	82 ea       	ldi	r24, 0xA2	; 162
     2da:	0e 94 23 01 	call	0x246	; 0x246 <I2C_write>
  I2C_write(address);
     2de:	81 2f       	mov	r24, r17
     2e0:	0e 94 23 01 	call	0x246	; 0x246 <I2C_write>
  I2C_start();
     2e4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_start>
  I2C_write(SLAVE_ADDR_RD); //slave adres odczytu równy A3
     2e8:	83 ea       	ldi	r24, 0xA3	; 163
     2ea:	0e 94 23 01 	call	0x246	; 0x246 <I2C_write>
  a=I2C_read(1);
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_read>
     2f4:	18 2f       	mov	r17, r24
  I2C_stop();
     2f6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <I2C_stop>
  return a;
}
     2fa:	81 2f       	mov	r24, r17
     2fc:	1f 91       	pop	r17
     2fe:	08 95       	ret

00000300 <PCF8563_get_status_CS1>:
//*********************************************
//*  Podprogram odczytu statusu CS1 z PCF8563 *
//*********************************************
u08 PCF8563_get_status_CS1(void)
{
  PCF8563_status_CS1=PCF8563_read(CONTROL_STATUS_1);
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	0e 94 68 01 	call	0x2d0	; 0x2d0 <PCF8563_read>
     306:	80 93 b3 02 	sts	0x02B3, r24
  return PCF8563_status_CS1;
}
     30a:	08 95       	ret

0000030c <PCF8563_write>:

//*********************************************
//*    Podprogram zapisu bajtu do PCF8563     *
//*********************************************
void PCF8563_write(u08 address,u08 data)
{
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	18 2f       	mov	r17, r24
     312:	06 2f       	mov	r16, r22
  I2C_start();
     314:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_start>
  I2C_write(SLAVE_ADDR_WR);  //slave adres zapisu równy A2
     318:	82 ea       	ldi	r24, 0xA2	; 162
     31a:	0e 94 23 01 	call	0x246	; 0x246 <I2C_write>
  I2C_write(address);
     31e:	81 2f       	mov	r24, r17
     320:	0e 94 23 01 	call	0x246	; 0x246 <I2C_write>
  I2C_write(data);
     324:	80 2f       	mov	r24, r16
     326:	0e 94 23 01 	call	0x246	; 0x246 <I2C_write>
  I2C_stop();
     32a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <I2C_stop>
}
     32e:	1f 91       	pop	r17
     330:	0f 91       	pop	r16
     332:	08 95       	ret

00000334 <PCF8563_stop>:
//*********************************************
//*   Podprogram zatrzymania uk³adu PCF8563   *
//*********************************************
void PCF8563_stop(void)
{
  PCF8563_get_status_CS1();
     334:	0e 94 80 01 	call	0x300	; 0x300 <PCF8563_get_status_CS1>
  PCF8563_status_CS1|=0x20;  //b5=1
     338:	60 91 b3 02 	lds	r22, 0x02B3
     33c:	60 62       	ori	r22, 0x20	; 32
     33e:	60 93 b3 02 	sts	0x02B3, r22
  PCF8563_write(CONTROL_STATUS_1,PCF8563_status_CS1);
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	0e 94 86 01 	call	0x30c	; 0x30c <PCF8563_write>
}
     348:	08 95       	ret

0000034a <PCF8563_start>:
//*********************************************
//*     Podprogram startu uk³adu PCF8563      *
//*********************************************
void PCF8563_start(void)
{
  PCF8563_get_status_CS1();  //odczyt CS1
     34a:	0e 94 80 01 	call	0x300	; 0x300 <PCF8563_get_status_CS1>
  PCF8563_status_CS1&=0xdf;  //b5=0
     34e:	60 91 b3 02 	lds	r22, 0x02B3
     352:	6f 7d       	andi	r22, 0xDF	; 223
     354:	60 93 b3 02 	sts	0x02B3, r22
  PCF8563_write(CONTROL_STATUS_1,PCF8563_status_CS1);
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	0e 94 86 01 	call	0x30c	; 0x30c <PCF8563_write>
}
     35e:	08 95       	ret

00000360 <PCF8563_write_bcd>:

//*********************************************
//*     Podprogram zapisu BCD na PCF8563      *
//*********************************************
void PCF8563_write_bcd(u08 address,u08 data)
{
     360:	48 2f       	mov	r20, r24
     362:	36 2f       	mov	r19, r22
  PCF8563_write(address,bin2bcd(data));
     364:	86 2f       	mov	r24, r22
     366:	6a e0       	ldi	r22, 0x0A	; 10
     368:	0e 94 39 16 	call	0x2c72	; 0x2c72 <__udivmodqi4>
     36c:	28 2f       	mov	r18, r24
     36e:	22 95       	swap	r18
     370:	20 7f       	andi	r18, 0xF0	; 240
     372:	83 2f       	mov	r24, r19
     374:	0e 94 39 16 	call	0x2c72	; 0x2c72 <__udivmodqi4>
     378:	29 0f       	add	r18, r25
     37a:	84 2f       	mov	r24, r20
     37c:	62 2f       	mov	r22, r18
     37e:	0e 94 86 01 	call	0x30c	; 0x30c <PCF8563_write>
}
     382:	08 95       	ret

00000384 <PCF8563_init>:
//*********************************************
//*    Podprogram inicjacji uk³adu PCF8563    *
//*********************************************
void PCF8563_init(void)
{
  PCF8563_status_CS1=PCF8563_CS1;
     384:	10 92 b3 02 	sts	0x02B3, r1
  PCF8563_write(CONTROL_STATUS_1,PCF8563_CS1);
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	0e 94 86 01 	call	0x30c	; 0x30c <PCF8563_write>
  PCF8563_write(CONTROL_STATUS_2,PCF8563_CS2);
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	0e 94 86 01 	call	0x30c	; 0x30c <PCF8563_write>
  PCF8563_write(CLKOUT_CONTROL,PCF8563_CLKOUT);
     398:	8d e0       	ldi	r24, 0x0D	; 13
     39a:	60 e0       	ldi	r22, 0x00	; 0
     39c:	0e 94 86 01 	call	0x30c	; 0x30c <PCF8563_write>
  PCF8563_write(TIMER_CONTROL,PCF8563_TIMER);
     3a0:	8e e0       	ldi	r24, 0x0E	; 14
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	0e 94 86 01 	call	0x30c	; 0x30c <PCF8563_write>
}
     3a8:	08 95       	ret

000003aa <PCF8563_get_time>:

//*********************************************
//* Podprogram odczytu czasu z uk³adu PCF8563 *
//*********************************************
void PCF8563_get_time(u08 *hour,u08 *min,u08 *sec)
{
     3aa:	cf 92       	push	r12
     3ac:	df 92       	push	r13
     3ae:	ef 92       	push	r14
     3b0:	ff 92       	push	r15
     3b2:	0f 93       	push	r16
     3b4:	1f 93       	push	r17
     3b6:	6c 01       	movw	r12, r24
     3b8:	7b 01       	movw	r14, r22
     3ba:	8a 01       	movw	r16, r20
  u08 hour1, min1, sec1;

  sec1=PCF8563_read(VL_SECONDS); //rej.2 bity b0-b6
     3bc:	82 e0       	ldi	r24, 0x02	; 2
     3be:	0e 94 68 01 	call	0x2d0	; 0x2d0 <PCF8563_read>
  *sec=bcd2bin(sec1&0x7f);
     3c2:	98 2f       	mov	r25, r24
     3c4:	96 95       	lsr	r25
     3c6:	96 95       	lsr	r25
     3c8:	96 95       	lsr	r25
     3ca:	9e 70       	andi	r25, 0x0E	; 14
     3cc:	29 2f       	mov	r18, r25
     3ce:	22 0f       	add	r18, r18
     3d0:	22 0f       	add	r18, r18
     3d2:	92 0f       	add	r25, r18
u08 bcd2bin(u08 bcd)                    
{
#ifdef OPTIMIZE_SPEED
  return (10*(bcd>>4)|(bcd&0x0f));
#else
  u08 Temp = bcd & 0x0F; 
     3d4:	8f 70       	andi	r24, 0x0F	; 15
void PCF8563_get_time(u08 *hour,u08 *min,u08 *sec)
{
  u08 hour1, min1, sec1;

  sec1=PCF8563_read(VL_SECONDS); //rej.2 bity b0-b6
  *sec=bcd2bin(sec1&0x7f);
     3d6:	98 0f       	add	r25, r24
     3d8:	f8 01       	movw	r30, r16
     3da:	90 83       	st	Z, r25

  min1=PCF8563_read(MINUTES);    //rej.3 bity b0-b6
     3dc:	83 e0       	ldi	r24, 0x03	; 3
     3de:	0e 94 68 01 	call	0x2d0	; 0x2d0 <PCF8563_read>
  *min=bcd2bin(min1&0x7f);
     3e2:	98 2f       	mov	r25, r24
     3e4:	96 95       	lsr	r25
     3e6:	96 95       	lsr	r25
     3e8:	96 95       	lsr	r25
     3ea:	9e 70       	andi	r25, 0x0E	; 14
     3ec:	29 2f       	mov	r18, r25
     3ee:	22 0f       	add	r18, r18
     3f0:	22 0f       	add	r18, r18
     3f2:	92 0f       	add	r25, r18
u08 bcd2bin(u08 bcd)                    
{
#ifdef OPTIMIZE_SPEED
  return (10*(bcd>>4)|(bcd&0x0f));
#else
  u08 Temp = bcd & 0x0F; 
     3f4:	8f 70       	andi	r24, 0x0F	; 15

  sec1=PCF8563_read(VL_SECONDS); //rej.2 bity b0-b6
  *sec=bcd2bin(sec1&0x7f);

  min1=PCF8563_read(MINUTES);    //rej.3 bity b0-b6
  *min=bcd2bin(min1&0x7f);
     3f6:	98 0f       	add	r25, r24
     3f8:	f7 01       	movw	r30, r14
     3fa:	90 83       	st	Z, r25

  hour1=PCF8563_read(HOURS);      //rej.4 bity b0-b5
     3fc:	84 e0       	ldi	r24, 0x04	; 4
     3fe:	0e 94 68 01 	call	0x2d0	; 0x2d0 <PCF8563_read>
  *hour=bcd2bin(hour1&0x3f);
     402:	98 2f       	mov	r25, r24
     404:	96 95       	lsr	r25
     406:	96 95       	lsr	r25
     408:	96 95       	lsr	r25
     40a:	96 70       	andi	r25, 0x06	; 6
     40c:	29 2f       	mov	r18, r25
     40e:	22 0f       	add	r18, r18
     410:	22 0f       	add	r18, r18
     412:	92 0f       	add	r25, r18
u08 bcd2bin(u08 bcd)                    
{
#ifdef OPTIMIZE_SPEED
  return (10*(bcd>>4)|(bcd&0x0f));
#else
  u08 Temp = bcd & 0x0F; 
     414:	8f 70       	andi	r24, 0x0F	; 15

  min1=PCF8563_read(MINUTES);    //rej.3 bity b0-b6
  *min=bcd2bin(min1&0x7f);

  hour1=PCF8563_read(HOURS);      //rej.4 bity b0-b5
  *hour=bcd2bin(hour1&0x3f);
     416:	98 0f       	add	r25, r24
     418:	f6 01       	movw	r30, r12
     41a:	90 83       	st	Z, r25
}
     41c:	1f 91       	pop	r17
     41e:	0f 91       	pop	r16
     420:	ff 90       	pop	r15
     422:	ef 90       	pop	r14
     424:	df 90       	pop	r13
     426:	cf 90       	pop	r12
     428:	08 95       	ret

0000042a <PCF8563_set_time>:

//*********************************************
//* Podprogram zapisu czasu do uk³adu PCF8563 *
//*********************************************
void PCF8563_set_time(u08 godz,u08 min,u08 sec)
{
     42a:	ff 92       	push	r15
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	f8 2e       	mov	r15, r24
     432:	06 2f       	mov	r16, r22
     434:	14 2f       	mov	r17, r20
  PCF8563_stop();
     436:	0e 94 9a 01 	call	0x334	; 0x334 <PCF8563_stop>
  PCF8563_write_bcd(VL_SECONDS,sec); //rej.2
     43a:	82 e0       	ldi	r24, 0x02	; 2
     43c:	61 2f       	mov	r22, r17
     43e:	0e 94 b0 01 	call	0x360	; 0x360 <PCF8563_write_bcd>
  PCF8563_write_bcd(MINUTES,min);    //rej.3
     442:	83 e0       	ldi	r24, 0x03	; 3
     444:	60 2f       	mov	r22, r16
     446:	0e 94 b0 01 	call	0x360	; 0x360 <PCF8563_write_bcd>
  PCF8563_write_bcd(HOURS,godz);     //rej.4
     44a:	84 e0       	ldi	r24, 0x04	; 4
     44c:	6f 2d       	mov	r22, r15
     44e:	0e 94 b0 01 	call	0x360	; 0x360 <PCF8563_write_bcd>
  PCF8563_start();
     452:	0e 94 a5 01 	call	0x34a	; 0x34a <PCF8563_start>
}
     456:	1f 91       	pop	r17
     458:	0f 91       	pop	r16
     45a:	ff 90       	pop	r15
     45c:	08 95       	ret

0000045e <PCF8563_get_date>:

//*********************************************
//* Podprogram odczytu daty z uk³adu PCF8563  *
//*********************************************
void PCF8563_get_date(u08 *dzien,u08 *mc, u08 *rok)
{
     45e:	cf 92       	push	r12
     460:	df 92       	push	r13
     462:	ef 92       	push	r14
     464:	ff 92       	push	r15
     466:	0f 93       	push	r16
     468:	1f 93       	push	r17
     46a:	8c 01       	movw	r16, r24
     46c:	7b 01       	movw	r14, r22
     46e:	6a 01       	movw	r12, r20
  u08 dzien1, mc1;

  dzien1=PCF8563_read(DAYS);    //rej.5
     470:	85 e0       	ldi	r24, 0x05	; 5
     472:	0e 94 68 01 	call	0x2d0	; 0x2d0 <PCF8563_read>
  *dzien=bcd2bin(dzien1&0x3f);  //dzieñ na bitach b0-b5 jako BCD
     476:	98 2f       	mov	r25, r24
     478:	96 95       	lsr	r25
     47a:	96 95       	lsr	r25
     47c:	96 95       	lsr	r25
     47e:	96 70       	andi	r25, 0x06	; 6
     480:	29 2f       	mov	r18, r25
     482:	22 0f       	add	r18, r18
     484:	22 0f       	add	r18, r18
     486:	92 0f       	add	r25, r18
u08 bcd2bin(u08 bcd)                    
{
#ifdef OPTIMIZE_SPEED
  return (10*(bcd>>4)|(bcd&0x0f));
#else
  u08 Temp = bcd & 0x0F; 
     488:	8f 70       	andi	r24, 0x0F	; 15
void PCF8563_get_date(u08 *dzien,u08 *mc, u08 *rok)
{
  u08 dzien1, mc1;

  dzien1=PCF8563_read(DAYS);    //rej.5
  *dzien=bcd2bin(dzien1&0x3f);  //dzieñ na bitach b0-b5 jako BCD
     48a:	98 0f       	add	r25, r24
     48c:	f8 01       	movw	r30, r16
     48e:	90 83       	st	Z, r25

  mc1=PCF8563_read(C_MONTHS);   //rej.7
     490:	87 e0       	ldi	r24, 0x07	; 7
     492:	0e 94 68 01 	call	0x2d0	; 0x2d0 <PCF8563_read>
  *mc=bcd2bin(mc1&0x1f);        //miesiac na bitach b0-b4 jako BCD
     496:	98 2f       	mov	r25, r24
     498:	96 95       	lsr	r25
     49a:	96 95       	lsr	r25
     49c:	96 95       	lsr	r25
     49e:	92 70       	andi	r25, 0x02	; 2
     4a0:	29 2f       	mov	r18, r25
     4a2:	22 0f       	add	r18, r18
     4a4:	22 0f       	add	r18, r18
     4a6:	92 0f       	add	r25, r18
u08 bcd2bin(u08 bcd)                    
{
#ifdef OPTIMIZE_SPEED
  return (10*(bcd>>4)|(bcd&0x0f));
#else
  u08 Temp = bcd & 0x0F; 
     4a8:	8f 70       	andi	r24, 0x0F	; 15

  dzien1=PCF8563_read(DAYS);    //rej.5
  *dzien=bcd2bin(dzien1&0x3f);  //dzieñ na bitach b0-b5 jako BCD

  mc1=PCF8563_read(C_MONTHS);   //rej.7
  *mc=bcd2bin(mc1&0x1f);        //miesiac na bitach b0-b4 jako BCD
     4aa:	98 0f       	add	r25, r24
     4ac:	f7 01       	movw	r30, r14
     4ae:	90 83       	st	Z, r25

  *rok=PCF8563_read(YEARS);     //rej.8 jako liczba od 00 do 99
     4b0:	88 e0       	ldi	r24, 0x08	; 8
     4b2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <PCF8563_read>
     4b6:	f6 01       	movw	r30, r12
     4b8:	80 83       	st	Z, r24
}
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	ff 90       	pop	r15
     4c0:	ef 90       	pop	r14
     4c2:	df 90       	pop	r13
     4c4:	cf 90       	pop	r12
     4c6:	08 95       	ret

000004c8 <PCF8563_set_date>:

//*********************************************
//* Podprogram zapisu daty do uk³adu PCF8563 *
//*********************************************
void PCF8563_set_date(u08 dzien, u08 mc, u08 rok)
{
     4c8:	ff 92       	push	r15
     4ca:	0f 93       	push	r16
     4cc:	1f 93       	push	r17
     4ce:	18 2f       	mov	r17, r24
     4d0:	f6 2e       	mov	r15, r22
     4d2:	04 2f       	mov	r16, r20
  PCF8563_stop();
     4d4:	0e 94 9a 01 	call	0x334	; 0x334 <PCF8563_stop>
  PCF8563_write(YEARS,rok);
     4d8:	88 e0       	ldi	r24, 0x08	; 8
     4da:	60 2f       	mov	r22, r16
     4dc:	0e 94 86 01 	call	0x30c	; 0x30c <PCF8563_write>
  PCF8563_write_bcd(DAYS,dzien);
     4e0:	85 e0       	ldi	r24, 0x05	; 5
     4e2:	61 2f       	mov	r22, r17
     4e4:	0e 94 b0 01 	call	0x360	; 0x360 <PCF8563_write_bcd>
  PCF8563_write_bcd(C_MONTHS,mc);
     4e8:	87 e0       	ldi	r24, 0x07	; 7
     4ea:	6f 2d       	mov	r22, r15
     4ec:	0e 94 b0 01 	call	0x360	; 0x360 <PCF8563_write_bcd>
  PCF8563_start();
     4f0:	0e 94 a5 01 	call	0x34a	; 0x34a <PCF8563_start>
}
     4f4:	1f 91       	pop	r17
     4f6:	0f 91       	pop	r16
     4f8:	ff 90       	pop	r15
     4fa:	08 95       	ret

000004fc <port_init>:
//*            Podprogram inicjowania portów                *
//* ustawienie buzzera, wskaŸników LED, klawiszy, czujników *
//***********************************************************
void port_init(void)
{
  PORTA = 0x00;
     4fc:	1b ba       	out	0x1b, r1	; 27
  DDRA=0x07;  	  // PA0 - buzzer, PA1 i PA2 - wyjœcia LED
     4fe:	87 e0       	ldi	r24, 0x07	; 7
     500:	8a bb       	out	0x1a, r24	; 26
	 			  // PA3 - kl. S3, PA4 - kl. S2, PA5 - kl. S1
  PORTB = 0xEF;
     502:	8f ee       	ldi	r24, 0xEF	; 239
     504:	88 bb       	out	0x18, r24	; 24
  DDRB  = 0xBF;   //MISO line i/p, rest o/p
     506:	8f eb       	ldi	r24, 0xBF	; 191
     508:	87 bb       	out	0x17, r24	; 23

  PORTC = 0x00;
     50a:	15 ba       	out	0x15, r1	; 21
  DDRC  = 0x00;
     50c:	14 ba       	out	0x14, r1	; 20

  PORTD = 0x00;
     50e:	12 ba       	out	0x12, r1	; 18
  DDRD  = 0x06;   //PD1 - cz.d.zewn.  PD2 - cz.d.wewn.
     510:	86 e0       	ldi	r24, 0x06	; 6
     512:	81 bb       	out	0x11, r24	; 17
}
     514:	08 95       	ret

00000516 <beep>:

//********************************************************
//*            Podprogram pojedyñczego dŸwiêku           *
//********************************************************
void beep() 
{
     516:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     518:	4c e2       	ldi	r20, 0x2C	; 44
     51a:	51 e0       	ldi	r21, 0x01	; 1
  const int TBEEP = 150;
  u08 i;
  for(i=0; i<100; i++)
  {
    PORTA |= (1<<buzzer);  //ustaw 1 na buzzer
     51c:	d8 9a       	sbi	0x1b, 0	; 27
     51e:	ca 01       	movw	r24, r20
     520:	01 97       	sbiw	r24, 0x01	; 1
     522:	f1 f7       	brne	.-4      	; 0x520 <beep+0xa>
    _delay_us(TBEEP);
    PORTA  &= ~(1<<buzzer);	//wyzeruj buzzer 
     524:	d8 98       	cbi	0x1b, 0	; 27
     526:	ca 01       	movw	r24, r20
     528:	01 97       	sbiw	r24, 0x01	; 1
     52a:	f1 f7       	brne	.-4      	; 0x528 <beep+0x12>
//********************************************************
void beep() 
{
  const int TBEEP = 150;
  u08 i;
  for(i=0; i<100; i++)
     52c:	2f 5f       	subi	r18, 0xFF	; 255
     52e:	24 36       	cpi	r18, 0x64	; 100
     530:	a9 f7       	brne	.-22     	; 0x51c <beep+0x6>
    PORTA |= (1<<buzzer);  //ustaw 1 na buzzer
    _delay_us(TBEEP);
    PORTA  &= ~(1<<buzzer);	//wyzeruj buzzer 
    _delay_us(TBEEP);
  }
}
     532:	08 95       	ret

00000534 <beep_3>:
//********************************************************
//*             Podprogram Trzykrotny dŸwiêk             *
//********************************************************
void beep_3()
{
  beep();
     534:	0e 94 8b 02 	call	0x516	; 0x516 <beep>
     538:	88 ee       	ldi	r24, 0xE8	; 232
     53a:	93 e0       	ldi	r25, 0x03	; 3
     53c:	28 ec       	ldi	r18, 0xC8	; 200
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	f9 01       	movw	r30, r18
     542:	31 97       	sbiw	r30, 0x01	; 1
     544:	f1 f7       	brne	.-4      	; 0x542 <beep_3+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     546:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     548:	d9 f7       	brne	.-10     	; 0x540 <beep_3+0xc>
  _delay_ms(100);
  beep();
     54a:	0e 94 8b 02 	call	0x516	; 0x516 <beep>
     54e:	88 ee       	ldi	r24, 0xE8	; 232
     550:	93 e0       	ldi	r25, 0x03	; 3
     552:	28 ec       	ldi	r18, 0xC8	; 200
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	f9 01       	movw	r30, r18
     558:	31 97       	sbiw	r30, 0x01	; 1
     55a:	f1 f7       	brne	.-4      	; 0x558 <beep_3+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     55c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     55e:	d9 f7       	brne	.-10     	; 0x556 <beep_3+0x22>
  _delay_ms(100);
  beep();
     560:	0e 94 8b 02 	call	0x516	; 0x516 <beep>
}
     564:	08 95       	ret

00000566 <sprawdzenie_drzwi>:
//*     Podprogram sprawdzania czujników drzwi           *
//********************************************************
void sprawdzenie_drzwi()
{
  //sprawdzenie, czy drzwi wewnêtrzne s¹ otwarte
  if (!(PIND & 0x02))  //drzwi wew. s¹ zamkniête
     566:	81 99       	sbic	0x10, 1	; 16
     568:	1a c0       	rjmp	.+52     	; 0x59e <sprawdzenie_drzwi+0x38>
   {
     CLR_LED_G;  //zgaœ zielony LED
     56a:	d9 98       	cbi	0x1b, 1	; 27
     if (dr_w==1)
     56c:	80 91 c5 02 	lds	r24, 0x02C5
     570:	90 91 c6 02 	lds	r25, 0x02C6
     574:	01 97       	sbiw	r24, 0x01	; 1
     576:	31 f5       	brne	.+76     	; 0x5c4 <sprawdzenie_drzwi+0x5e>
	 {           //drzwi wewn. poprzednio by³y otwarte
       if (kolejnosc_zam==0)
     578:	80 91 c3 02 	lds	r24, 0x02C3
     57c:	90 91 c4 02 	lds	r25, 0x02C4
     580:	89 2b       	or	r24, r25
     582:	31 f4       	brne	.+12     	; 0x590 <sprawdzenie_drzwi+0x2a>
	   {                    //gdy pierwsze zamkniêcie drzwi
          kolejnosc_zam=2; //ustaw wsk. kolejnoœci zamykania
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	90 93 c4 02 	sts	0x02C4, r25
     58c:	80 93 c3 02 	sts	0x02C3, r24
       };
     dr_w=2;  //ustaw wsk. zamkniêcia wczeœniej otwartych drzwi wewn.
     590:	82 e0       	ldi	r24, 0x02	; 2
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	90 93 c6 02 	sts	0x02C6, r25
     598:	80 93 c5 02 	sts	0x02C5, r24
     59c:	13 c0       	rjmp	.+38     	; 0x5c4 <sprawdzenie_drzwi+0x5e>
     };
   }
   else                            //drzwi wewn. s¹ otwarte
   {
     SET_LED_G;               //zapal zielony LED
     59e:	d9 9a       	sbi	0x1b, 1	; 27
     dr_w=1;                  //ustaw wsk. otwartych drzwi wewnêtrznych
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	90 93 c6 02 	sts	0x02C6, r25
     5a8:	80 93 c5 02 	sts	0x02C5, r24
     if (kolejnosc_otw==0) 
     5ac:	80 91 bc 02 	lds	r24, 0x02BC
     5b0:	90 91 bd 02 	lds	r25, 0x02BD
     5b4:	89 2b       	or	r24, r25
     5b6:	31 f4       	brne	.+12     	; 0x5c4 <sprawdzenie_drzwi+0x5e>
	 {                        //gdy pierwsze otwarcie drzwi
       kolejnosc_otw=2;    //ustaw wsk. kolejnoœci otwierania
     5b8:	82 e0       	ldi	r24, 0x02	; 2
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	90 93 bd 02 	sts	0x02BD, r25
     5c0:	80 93 bc 02 	sts	0x02BC, r24
     };
   };

  //sprawdzenie, czy drzwi zewnêtrzne s¹ otwarte
  if (!(PIND & 0x04))   //drzwi zewn. s¹ zamkniête
     5c4:	82 99       	sbic	0x10, 2	; 16
     5c6:	19 c0       	rjmp	.+50     	; 0x5fa <sprawdzenie_drzwi+0x94>
   {
     CLR_LED_R; //zgaœ czerwony LED
     5c8:	da 98       	cbi	0x1b, 2	; 27
     if (dr_z==1)
     5ca:	20 91 c9 04 	lds	r18, 0x04C9
     5ce:	30 91 ca 04 	lds	r19, 0x04CA
     5d2:	21 30       	cpi	r18, 0x01	; 1
     5d4:	31 05       	cpc	r19, r1
     5d6:	11 f5       	brne	.+68     	; 0x61c <sprawdzenie_drzwi+0xb6>
	 {               //drzwi zewn. poprzednio by³y otwarte
       if (kolejnosc_zam==0)
     5d8:	80 91 c3 02 	lds	r24, 0x02C3
     5dc:	90 91 c4 02 	lds	r25, 0x02C4
     5e0:	89 2b       	or	r24, r25
     5e2:	21 f4       	brne	.+8      	; 0x5ec <sprawdzenie_drzwi+0x86>
	   {   //gdy pierwsze zamkniêcie drzwi
          kolejnosc_zam=1;      //ustaw wsk. kolejnoœci zamykania
     5e4:	30 93 c4 02 	sts	0x02C4, r19
     5e8:	20 93 c3 02 	sts	0x02C3, r18
       }
     dr_z=2;  //ustaw wsk. zamkniêcia wczeœniej otwartych drzwi zewn.
     5ec:	82 e0       	ldi	r24, 0x02	; 2
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	90 93 ca 04 	sts	0x04CA, r25
     5f4:	80 93 c9 04 	sts	0x04C9, r24
     5f8:	11 c0       	rjmp	.+34     	; 0x61c <sprawdzenie_drzwi+0xb6>
     };
   }
   else   //drzwi zewn. otwarte
   {
     SET_LED_R;   //zapal czerwony LED
     5fa:	da 9a       	sbi	0x1b, 2	; 27
     dr_z=1;     //ustaw wsk. otwartych drzwi zewnêtrznych
     5fc:	21 e0       	ldi	r18, 0x01	; 1
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	30 93 ca 04 	sts	0x04CA, r19
     604:	20 93 c9 04 	sts	0x04C9, r18
     if (kolejnosc_otw==0)
     608:	80 91 bc 02 	lds	r24, 0x02BC
     60c:	90 91 bd 02 	lds	r25, 0x02BD
     610:	89 2b       	or	r24, r25
     612:	21 f4       	brne	.+8      	; 0x61c <sprawdzenie_drzwi+0xb6>
	 {     //gdy pierwsze otwarcie drzwi
        kolejnosc_otw=1;       //ustaw wsk. kolejnoœci otwierania
     614:	30 93 bd 02 	sts	0x02BD, r19
     618:	20 93 bc 02 	sts	0x02BC, r18
     };
    };

   //sprawdzenie, czy s¹ zamkniête drzwi a poprzednio by³y otwarte
   if (!(kolejnosc_zam==0))
     61c:	40 91 c3 02 	lds	r20, 0x02C3
     620:	50 91 c4 02 	lds	r21, 0x02C4
     624:	41 15       	cp	r20, r1
     626:	51 05       	cpc	r21, r1
     628:	09 f4       	brne	.+2      	; 0x62c <sprawdzenie_drzwi+0xc6>
     62a:	49 c0       	rjmp	.+146    	; 0x6be <sprawdzenie_drzwi+0x158>
   {          //by³y wczeœniej otwierane drzwi
      if (!(dr_w==1))
     62c:	80 91 c5 02 	lds	r24, 0x02C5
     630:	90 91 c6 02 	lds	r25, 0x02C6
     634:	81 30       	cpi	r24, 0x01	; 1
     636:	91 05       	cpc	r25, r1
     638:	09 f4       	brne	.+2      	; 0x63c <sprawdzenie_drzwi+0xd6>
     63a:	41 c0       	rjmp	.+130    	; 0x6be <sprawdzenie_drzwi+0x158>
	  {  
	     if (!(dr_z==1))
     63c:	20 91 c9 04 	lds	r18, 0x04C9
     640:	30 91 ca 04 	lds	r19, 0x04CA
     644:	21 30       	cpi	r18, 0x01	; 1
     646:	31 05       	cpc	r19, r1
     648:	d1 f1       	breq	.+116    	; 0x6be <sprawdzenie_drzwi+0x158>
		 {     //drzwi wewn. i zewn. s¹ ju¿ zamkniête
            if (dr_w==2)
     64a:	02 97       	sbiw	r24, 0x02	; 2
     64c:	11 f5       	brne	.+68     	; 0x692 <sprawdzenie_drzwi+0x12c>
		     {     //zamkniêto wczeœniej otwarte drzwi wewn.
               if (dr_z==2)
     64e:	22 30       	cpi	r18, 0x02	; 2
     650:	31 05       	cpc	r19, r1
     652:	e1 f4       	brne	.+56     	; 0x68c <sprawdzenie_drzwi+0x126>
			    {    //zamkniêto wczeœniej otwarte drzwi zewn.
                  if (kolejnosc_otw==1)
     654:	80 91 bc 02 	lds	r24, 0x02BC
     658:	90 91 bd 02 	lds	r25, 0x02BD
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	59 f4       	brne	.+22     	; 0x676 <sprawdzenie_drzwi+0x110>
				   {    //otwarto najpierw drzwi zewnêtrzne
                     if (kolejnosc_zam==1)
     660:	41 30       	cpi	r20, 0x01	; 1
     662:	51 05       	cpc	r21, r1
     664:	29 f4       	brne	.+10     	; 0x670 <sprawdzenie_drzwi+0x10a>
					  {   //zamkniêto najpierw drzwi zewnêtrzne
                        we_wy=1;     //WE
     666:	50 93 e3 04 	sts	0x04E3, r21
     66a:	40 93 e2 04 	sts	0x04E2, r20
     66e:	17 c0       	rjmp	.+46     	; 0x69e <sprawdzenie_drzwi+0x138>
					  }
                      else  
					  {       //zamkniêto najpierw drzwi wewnêtrzne
                        we_wy=3;     //OZ
     670:	83 e0       	ldi	r24, 0x03	; 3
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	10 c0       	rjmp	.+32     	; 0x696 <sprawdzenie_drzwi+0x130>
					  };
				   }
                   else 
				   {     //otwarto najpierw drzwi wewnêtrzne:
                     if (kolejnosc_zam==1)
     676:	41 30       	cpi	r20, 0x01	; 1
     678:	51 05       	cpc	r21, r1
     67a:	19 f4       	brne	.+6      	; 0x682 <sprawdzenie_drzwi+0x11c>
					  {    //zamkniêto najpierw drzwi zewnêtrzne
                        we_wy=4;     //OW
     67c:	84 e0       	ldi	r24, 0x04	; 4
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	0a c0       	rjmp	.+20     	; 0x696 <sprawdzenie_drzwi+0x130>
					  }
                      else
					  {       //zamkniêto najpierw drzwi wewnêtrzne
                        we_wy=2;     //WY
     682:	30 93 e3 04 	sts	0x04E3, r19
     686:	20 93 e2 04 	sts	0x04E2, r18
     68a:	09 c0       	rjmp	.+18     	; 0x69e <sprawdzenie_drzwi+0x138>
                      };
                   };
				}
                else 
				{      //otwarto i zamkniêto tylko drzwi wewnêtrzne
                  we_wy=6;        //OY
     68c:	86 e0       	ldi	r24, 0x06	; 6
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	02 c0       	rjmp	.+4      	; 0x696 <sprawdzenie_drzwi+0x130>
                };
			 }
             else     //otwarto i zamkniêto tylko drzwi zewnêtrzne
			 {
               we_wy=5;          //OX
     692:	85 e0       	ldi	r24, 0x05	; 5
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	90 93 e3 04 	sts	0x04E3, r25
     69a:	80 93 e2 04 	sts	0x04E2, r24
             };

            dr_z=0;
     69e:	10 92 ca 04 	sts	0x04CA, r1
     6a2:	10 92 c9 04 	sts	0x04C9, r1
            dr_w=0;
     6a6:	10 92 c6 02 	sts	0x02C6, r1
     6aa:	10 92 c5 02 	sts	0x02C5, r1
            kolejnosc_otw=0;
     6ae:	10 92 bd 02 	sts	0x02BD, r1
     6b2:	10 92 bc 02 	sts	0x02BC, r1
            kolejnosc_zam=0;
     6b6:	10 92 c4 02 	sts	0x02C4, r1
     6ba:	10 92 c3 02 	sts	0x02C3, r1
     6be:	08 95       	ret

000006c0 <czas_data_do_rekordu>:

//********************************************************
//*     Podprogram redagowania i zapisu rekordu na SD    *
//********************************************************
void czas_data_do_rekordu()
{
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
     6c4:	df 93       	push	r29
     6c6:	cf 93       	push	r28
     6c8:	cd b7       	in	r28, 0x3d	; 61
     6ca:	de b7       	in	r29, 0x3e	; 62
     6cc:	62 97       	sbiw	r28, 0x12	; 18
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	cd bf       	out	0x3d, r28	; 61
  char string[18];			  // bufor na wynik funkcji itoa

      itoa(dzien, string, 10); // zamiana dnia na string
     6d8:	80 91 fe 04 	lds	r24, 0x04FE
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	be 01       	movw	r22, r28
     6e0:	6f 5f       	subi	r22, 0xFF	; 255
     6e2:	7f 4f       	sbci	r23, 0xFF	; 255
     6e4:	4a e0       	ldi	r20, 0x0A	; 10
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	0e 94 67 16 	call	0x2cce	; 0x2cce <itoa>
	  if (dzien>9)
     6ec:	80 91 fe 04 	lds	r24, 0x04FE
     6f0:	99 81       	ldd	r25, Y+1	; 0x01
     6f2:	8a 30       	cpi	r24, 0x0A	; 10
     6f4:	30 f0       	brcs	.+12     	; 0x702 <czas_data_do_rekordu+0x42>
	   {
	     rekord[0]=string[0];
     6f6:	90 93 76 02 	sts	0x0276, r25
	     rekord[1]=string[1];
     6fa:	8a 81       	ldd	r24, Y+2	; 0x02
     6fc:	80 93 77 02 	sts	0x0277, r24
     700:	05 c0       	rjmp	.+10     	; 0x70c <czas_data_do_rekordu+0x4c>
       }
	   else
	   {
	     rekord[0]='0';
     702:	80 e3       	ldi	r24, 0x30	; 48
     704:	80 93 76 02 	sts	0x0276, r24
	     rekord[1]=string[0];
     708:	90 93 77 02 	sts	0x0277, r25
	   };
	  rekord[2]='/';
     70c:	8f e2       	ldi	r24, 0x2F	; 47
     70e:	80 93 78 02 	sts	0x0278, r24

      itoa(miesiac, string, 10); // zamiana miesi¹ca na string
     712:	80 91 dd 04 	lds	r24, 0x04DD
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	be 01       	movw	r22, r28
     71a:	6f 5f       	subi	r22, 0xFF	; 255
     71c:	7f 4f       	sbci	r23, 0xFF	; 255
     71e:	4a e0       	ldi	r20, 0x0A	; 10
     720:	50 e0       	ldi	r21, 0x00	; 0
     722:	0e 94 67 16 	call	0x2cce	; 0x2cce <itoa>
	  if (miesiac>9)
     726:	80 91 dd 04 	lds	r24, 0x04DD
     72a:	99 81       	ldd	r25, Y+1	; 0x01
     72c:	8a 30       	cpi	r24, 0x0A	; 10
     72e:	30 f0       	brcs	.+12     	; 0x73c <czas_data_do_rekordu+0x7c>
	   {
	     rekord[3]=string[0];
     730:	90 93 79 02 	sts	0x0279, r25
	     rekord[4]=string[1];
     734:	8a 81       	ldd	r24, Y+2	; 0x02
     736:	80 93 7a 02 	sts	0x027A, r24
     73a:	05 c0       	rjmp	.+10     	; 0x746 <czas_data_do_rekordu+0x86>
       }
	   else
	   {
	     rekord[3]='0';
     73c:	80 e3       	ldi	r24, 0x30	; 48
     73e:	80 93 79 02 	sts	0x0279, r24
	     rekord[4]=string[0];
     742:	90 93 7a 02 	sts	0x027A, r25
	   };
	  rekord[5]='/';
     746:	8f e2       	ldi	r24, 0x2F	; 47
     748:	80 93 7b 02 	sts	0x027B, r24

      itoa(rok, string, 10); // zamiana roku na string
     74c:	80 91 e5 04 	lds	r24, 0x04E5
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	8e 01       	movw	r16, r28
     754:	0f 5f       	subi	r16, 0xFF	; 255
     756:	1f 4f       	sbci	r17, 0xFF	; 255
     758:	b8 01       	movw	r22, r16
     75a:	4a e0       	ldi	r20, 0x0A	; 10
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	0e 94 67 16 	call	0x2cce	; 0x2cce <itoa>
	  rekord[6]=string[0];
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	80 93 7c 02 	sts	0x027C, r24
	  rekord[7]=string[1];
     768:	8a 81       	ldd	r24, Y+2	; 0x02
     76a:	80 93 7d 02 	sts	0x027D, r24
	  rekord[8]=string[2];
     76e:	8b 81       	ldd	r24, Y+3	; 0x03
     770:	80 93 7e 02 	sts	0x027E, r24
	  rekord[9]=string[3];
     774:	8c 81       	ldd	r24, Y+4	; 0x04
     776:	80 93 7f 02 	sts	0x027F, r24
	  rekord[10]=' ';
     77a:	80 e2       	ldi	r24, 0x20	; 32
     77c:	80 93 80 02 	sts	0x0280, r24

      itoa(godzina, string, 10); // zamiana godziny na string
     780:	80 91 de 04 	lds	r24, 0x04DE
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	b8 01       	movw	r22, r16
     788:	4a e0       	ldi	r20, 0x0A	; 10
     78a:	50 e0       	ldi	r21, 0x00	; 0
     78c:	0e 94 67 16 	call	0x2cce	; 0x2cce <itoa>
	  if (godzina>9)
     790:	80 91 de 04 	lds	r24, 0x04DE
     794:	99 81       	ldd	r25, Y+1	; 0x01
     796:	8a 30       	cpi	r24, 0x0A	; 10
     798:	30 f0       	brcs	.+12     	; 0x7a6 <czas_data_do_rekordu+0xe6>
	   {
	     rekord[11]=string[0];
     79a:	90 93 81 02 	sts	0x0281, r25
	     rekord[12]=string[1];
     79e:	8a 81       	ldd	r24, Y+2	; 0x02
     7a0:	80 93 82 02 	sts	0x0282, r24
     7a4:	05 c0       	rjmp	.+10     	; 0x7b0 <czas_data_do_rekordu+0xf0>
       }
	   else
	   {
	     rekord[11]='0';
     7a6:	80 e3       	ldi	r24, 0x30	; 48
     7a8:	80 93 81 02 	sts	0x0281, r24
	     rekord[12]=string[0];
     7ac:	90 93 82 02 	sts	0x0282, r25
	   };
	  rekord[13]=':';
     7b0:	8a e3       	ldi	r24, 0x3A	; 58
     7b2:	80 93 83 02 	sts	0x0283, r24

      itoa(minuta, string, 10); // zamiana minuty na string
     7b6:	80 91 c2 02 	lds	r24, 0x02C2
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	be 01       	movw	r22, r28
     7be:	6f 5f       	subi	r22, 0xFF	; 255
     7c0:	7f 4f       	sbci	r23, 0xFF	; 255
     7c2:	4a e0       	ldi	r20, 0x0A	; 10
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	0e 94 67 16 	call	0x2cce	; 0x2cce <itoa>
	  if (minuta>9)
     7ca:	80 91 c2 02 	lds	r24, 0x02C2
     7ce:	99 81       	ldd	r25, Y+1	; 0x01
     7d0:	8a 30       	cpi	r24, 0x0A	; 10
     7d2:	30 f0       	brcs	.+12     	; 0x7e0 <czas_data_do_rekordu+0x120>
	   {
	     rekord[14]=string[0];
     7d4:	90 93 84 02 	sts	0x0284, r25
	     rekord[15]=string[1];
     7d8:	8a 81       	ldd	r24, Y+2	; 0x02
     7da:	80 93 85 02 	sts	0x0285, r24
     7de:	05 c0       	rjmp	.+10     	; 0x7ea <czas_data_do_rekordu+0x12a>
       }
	   else
	   {
	     rekord[14]='0';
     7e0:	80 e3       	ldi	r24, 0x30	; 48
     7e2:	80 93 84 02 	sts	0x0284, r24
	     rekord[15]=string[0];
     7e6:	90 93 85 02 	sts	0x0285, r25
	   };
	  rekord[16]=':';
     7ea:	8a e3       	ldi	r24, 0x3A	; 58
     7ec:	80 93 86 02 	sts	0x0286, r24

      itoa(sek, string, 10); // zamiana sekundy na string
     7f0:	80 91 e4 04 	lds	r24, 0x04E4
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	be 01       	movw	r22, r28
     7f8:	6f 5f       	subi	r22, 0xFF	; 255
     7fa:	7f 4f       	sbci	r23, 0xFF	; 255
     7fc:	4a e0       	ldi	r20, 0x0A	; 10
     7fe:	50 e0       	ldi	r21, 0x00	; 0
     800:	0e 94 67 16 	call	0x2cce	; 0x2cce <itoa>
	  if (sek>9)
     804:	80 91 e4 04 	lds	r24, 0x04E4
     808:	99 81       	ldd	r25, Y+1	; 0x01
     80a:	8a 30       	cpi	r24, 0x0A	; 10
     80c:	30 f0       	brcs	.+12     	; 0x81a <czas_data_do_rekordu+0x15a>
	   {
	     rekord[17]=string[0];
     80e:	90 93 87 02 	sts	0x0287, r25
	     rekord[18]=string[1];
     812:	8a 81       	ldd	r24, Y+2	; 0x02
     814:	80 93 88 02 	sts	0x0288, r24
     818:	05 c0       	rjmp	.+10     	; 0x824 <czas_data_do_rekordu+0x164>
       }
	   else
	   {
	     rekord[17]='0';
     81a:	80 e3       	ldi	r24, 0x30	; 48
     81c:	80 93 87 02 	sts	0x0287, r24
	     rekord[18]=string[0];
     820:	90 93 88 02 	sts	0x0288, r25
	   };
	  rekord[19]=' ';
     824:	80 e2       	ldi	r24, 0x20	; 32
     826:	80 93 89 02 	sts	0x0289, r24
}
     82a:	62 96       	adiw	r28, 0x12	; 18
     82c:	0f b6       	in	r0, 0x3f	; 63
     82e:	f8 94       	cli
     830:	de bf       	out	0x3e, r29	; 62
     832:	0f be       	out	0x3f, r0	; 63
     834:	cd bf       	out	0x3d, r28	; 61
     836:	cf 91       	pop	r28
     838:	df 91       	pop	r29
     83a:	1f 91       	pop	r17
     83c:	0f 91       	pop	r16
     83e:	08 95       	ret

00000840 <lcd_putint>:
//*       Podprogram wys³ania liczby value na LCD        *
//********************************************************
void lcd_putint(int value, u08 radix)	
// wysy³a na port szeregowy tekst 
// przedstawiaj¹cy value z podstaw¹ radix
{
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	df 93       	push	r29
     846:	cf 93       	push	r28
     848:	cd b7       	in	r28, 0x3d	; 61
     84a:	de b7       	in	r29, 0x3e	; 62
     84c:	62 97       	sbiw	r28, 0x12	; 18
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	f8 94       	cli
     852:	de bf       	out	0x3e, r29	; 62
     854:	0f be       	out	0x3f, r0	; 63
     856:	cd bf       	out	0x3d, r28	; 61
     858:	46 2f       	mov	r20, r22
  char string[18];			  // bufor na wynik funkcji itoa
  itoa(value, string, radix); // zamiana liczby na string
     85a:	8e 01       	movw	r16, r28
     85c:	0f 5f       	subi	r16, 0xFF	; 255
     85e:	1f 4f       	sbci	r17, 0xFF	; 255
     860:	b8 01       	movw	r22, r16
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	0e 94 67 16 	call	0x2cce	; 0x2cce <itoa>
  LCD_WriteText(string);	  // wyœlij string na LCD
     868:	c8 01       	movw	r24, r16
     86a:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
}
     86e:	62 96       	adiw	r28, 0x12	; 18
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	f8 94       	cli
     874:	de bf       	out	0x3e, r29	; 62
     876:	0f be       	out	0x3f, r0	; 63
     878:	cd bf       	out	0x3d, r28	; 61
     87a:	cf 91       	pop	r28
     87c:	df 91       	pop	r29
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	08 95       	ret

00000884 <lcd_put_dzien_mc>:
//********************************************************
//*         Podprogram wys³ania na LCD dzien/miesiac/rok *
//********************************************************
void lcd_put_dzien_mc() 
{
   if (dzien<10) LCD_WriteText("0");
     884:	80 91 fe 04 	lds	r24, 0x04FE
     888:	8a 30       	cpi	r24, 0x0A	; 10
     88a:	20 f4       	brcc	.+8      	; 0x894 <lcd_put_dzien_mc+0x10>
     88c:	80 e6       	ldi	r24, 0x60	; 96
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
   lcd_putint(dzien,10);
     894:	80 91 fe 04 	lds	r24, 0x04FE
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	6a e0       	ldi	r22, 0x0A	; 10
     89c:	0e 94 20 04 	call	0x840	; 0x840 <lcd_putint>
   LCD_WriteText("/");
     8a0:	82 e6       	ldi	r24, 0x62	; 98
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
   if (miesiac<10) LCD_WriteText("0");
     8a8:	80 91 dd 04 	lds	r24, 0x04DD
     8ac:	8a 30       	cpi	r24, 0x0A	; 10
     8ae:	20 f4       	brcc	.+8      	; 0x8b8 <lcd_put_dzien_mc+0x34>
     8b0:	80 e6       	ldi	r24, 0x60	; 96
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
   lcd_putint(miesiac,10);
     8b8:	80 91 dd 04 	lds	r24, 0x04DD
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	6a e0       	ldi	r22, 0x0A	; 10
     8c0:	0e 94 20 04 	call	0x840	; 0x840 <lcd_putint>
}	
     8c4:	08 95       	ret

000008c6 <lcd_put_date>:
//********************************************************
//*  Podprogram odczytu daty z PCF8563 i wys³ania na LCD *
//********************************************************
void lcd_put_date()
{
   PCF8563_get_date(&dzien,&miesiac,&rok);
     8c6:	8e ef       	ldi	r24, 0xFE	; 254
     8c8:	94 e0       	ldi	r25, 0x04	; 4
     8ca:	6d ed       	ldi	r22, 0xDD	; 221
     8cc:	74 e0       	ldi	r23, 0x04	; 4
     8ce:	45 ee       	ldi	r20, 0xE5	; 229
     8d0:	54 e0       	ldi	r21, 0x04	; 4
     8d2:	0e 94 2f 02 	call	0x45e	; 0x45e <PCF8563_get_date>
   lcd_put_dzien_mc();
     8d6:	0e 94 42 04 	call	0x884	; 0x884 <lcd_put_dzien_mc>
   LCD_WriteText("/20");
     8da:	84 e6       	ldi	r24, 0x64	; 100
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
   if (rok>30) rok=14;  //===============
     8e2:	80 91 e5 04 	lds	r24, 0x04E5
     8e6:	8f 31       	cpi	r24, 0x1F	; 31
     8e8:	18 f0       	brcs	.+6      	; 0x8f0 <lcd_put_date+0x2a>
     8ea:	8e e0       	ldi	r24, 0x0E	; 14
     8ec:	80 93 e5 04 	sts	0x04E5, r24
   lcd_putint(rok,10);
     8f0:	80 91 e5 04 	lds	r24, 0x04E5
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	6a e0       	ldi	r22, 0x0A	; 10
     8f8:	0e 94 20 04 	call	0x840	; 0x840 <lcd_putint>
}
     8fc:	08 95       	ret

000008fe <lcd_put_godz_min>:
//********************************************************
//*         Podprogram wys³ania na LCD godz:min          *
//********************************************************
void lcd_put_godz_min() 
{
   if (godzina<10) LCD_WriteText("0");
     8fe:	80 91 de 04 	lds	r24, 0x04DE
     902:	8a 30       	cpi	r24, 0x0A	; 10
     904:	20 f4       	brcc	.+8      	; 0x90e <lcd_put_godz_min+0x10>
     906:	80 e6       	ldi	r24, 0x60	; 96
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
   lcd_putint(godzina,10);
     90e:	80 91 de 04 	lds	r24, 0x04DE
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	6a e0       	ldi	r22, 0x0A	; 10
     916:	0e 94 20 04 	call	0x840	; 0x840 <lcd_putint>
   LCD_WriteText(":");
     91a:	88 e6       	ldi	r24, 0x68	; 104
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
   if (minuta<10) LCD_WriteText("0");
     922:	80 91 c2 02 	lds	r24, 0x02C2
     926:	8a 30       	cpi	r24, 0x0A	; 10
     928:	20 f4       	brcc	.+8      	; 0x932 <lcd_put_godz_min+0x34>
     92a:	80 e6       	ldi	r24, 0x60	; 96
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
   lcd_putint(minuta,10);
     932:	80 91 c2 02 	lds	r24, 0x02C2
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	6a e0       	ldi	r22, 0x0A	; 10
     93a:	0e 94 20 04 	call	0x840	; 0x840 <lcd_putint>
}	
     93e:	08 95       	ret

00000940 <lcd_put_time>:
//********************************************************
//* Podprogram odczytu czasu z PCF8563 i wys³ania na LCD *
//********************************************************
void lcd_put_time()
{
   PCF8563_get_time(&godzina,&minuta,&sek);
     940:	8e ed       	ldi	r24, 0xDE	; 222
     942:	94 e0       	ldi	r25, 0x04	; 4
     944:	62 ec       	ldi	r22, 0xC2	; 194
     946:	72 e0       	ldi	r23, 0x02	; 2
     948:	44 ee       	ldi	r20, 0xE4	; 228
     94a:	54 e0       	ldi	r21, 0x04	; 4
     94c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <PCF8563_get_time>
   lcd_put_godz_min();
     950:	0e 94 7f 04 	call	0x8fe	; 0x8fe <lcd_put_godz_min>
   LCD_WriteText(":");
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
   if (sek<10) LCD_WriteText("0");
     95c:	80 91 e4 04 	lds	r24, 0x04E4
     960:	8a 30       	cpi	r24, 0x0A	; 10
     962:	20 f4       	brcc	.+8      	; 0x96c <lcd_put_time+0x2c>
     964:	80 e6       	ldi	r24, 0x60	; 96
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
   lcd_putint(sek,10);
     96c:	80 91 e4 04 	lds	r24, 0x04E4
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	6a e0       	ldi	r22, 0x0A	; 10
     974:	0e 94 20 04 	call	0x840	; 0x840 <lcd_putint>
}
     978:	08 95       	ret

0000097a <obsluga_PCF8563>:

//**********************************************************
//* Podprogr. wyœw. daty DD/MM/ROK na LCD i czasu GG:MM:SS *
//**********************************************************
void obsluga_PCF8563()      
{
     97a:	88 ee       	ldi	r24, 0xE8	; 232
     97c:	93 e0       	ldi	r25, 0x03	; 3
     97e:	28 ec       	ldi	r18, 0xC8	; 200
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	f9 01       	movw	r30, r18
     984:	31 97       	sbiw	r30, 0x01	; 1
     986:	f1 f7       	brne	.-4      	; 0x984 <obsluga_PCF8563+0xa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     988:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     98a:	d9 f7       	brne	.-10     	; 0x982 <obsluga_PCF8563+0x8>
   _delay_ms(100);
   PCF8563_get_time(&godzina,&minuta,&sek);
     98c:	8e ed       	ldi	r24, 0xDE	; 222
     98e:	94 e0       	ldi	r25, 0x04	; 4
     990:	62 ec       	ldi	r22, 0xC2	; 194
     992:	72 e0       	ldi	r23, 0x02	; 2
     994:	44 ee       	ldi	r20, 0xE4	; 228
     996:	54 e0       	ldi	r21, 0x04	; 4
     998:	0e 94 d5 01 	call	0x3aa	; 0x3aa <PCF8563_get_time>
   PCF8563_get_date(&dzien,&miesiac,&rok);
     99c:	8e ef       	ldi	r24, 0xFE	; 254
     99e:	94 e0       	ldi	r25, 0x04	; 4
     9a0:	6d ed       	ldi	r22, 0xDD	; 221
     9a2:	74 e0       	ldi	r23, 0x04	; 4
     9a4:	45 ee       	ldi	r20, 0xE5	; 229
     9a6:	54 e0       	ldi	r21, 0x04	; 4
     9a8:	0e 94 2f 02 	call	0x45e	; 0x45e <PCF8563_get_date>

   if (!(sek==sek_p))
     9ac:	90 91 e4 04 	lds	r25, 0x04E4
     9b0:	80 91 9b 02 	lds	r24, 0x029B
     9b4:	98 17       	cp	r25, r24
     9b6:	39 f1       	breq	.+78     	; 0xa06 <obsluga_PCF8563+0x8c>
   {
     sek_p=sek;
     9b8:	90 93 9b 02 	sts	0x029B, r25
     LCD_Clear(); 
     9bc:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Clear>
	 LCD_WriteText("Data: ");
     9c0:	8a e6       	ldi	r24, 0x6A	; 106
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
	 lcd_put_date();
     9c8:	0e 94 63 04 	call	0x8c6	; 0x8c6 <lcd_put_date>

	 LCD_GoTo(0,1);
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	61 e0       	ldi	r22, 0x01	; 1
     9d0:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_GoTo>
     LCD_WriteText("Czas: ");
     9d4:	81 e7       	ldi	r24, 0x71	; 113
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
     lcd_put_time();  //wyœwietlenie czasu
     9dc:	0e 94 a0 04 	call	0x940	; 0x940 <lcd_put_time>
     LCD_GoTo(14,1);
     9e0:	8e e0       	ldi	r24, 0x0E	; 14
     9e2:	61 e0       	ldi	r22, 0x01	; 1
     9e4:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_GoTo>
     if (tryb_zapisu==1)        //gdy zapis w³¹czony wyœwietl X, jeœli nie to wyœwietl O
     9e8:	80 91 e0 04 	lds	r24, 0x04E0
     9ec:	90 91 e1 04 	lds	r25, 0x04E1
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	29 f4       	brne	.+10     	; 0x9fe <obsluga_PCF8563+0x84>
      {
         LCD_WriteText(" X");
     9f4:	88 e7       	ldi	r24, 0x78	; 120
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
     9fc:	08 95       	ret
      }
      else 
      {
         LCD_WriteText(" O");
     9fe:	8b e7       	ldi	r24, 0x7B	; 123
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
     a06:	08 95       	ret

00000a08 <wyswietl_inf>:
//********************************************************
//*           Podprogram wyœiwtlenia informacji          *
//********************************************************
void wyswietl_inf()
{
  LCD_Clear(); 
     a08:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Clear>
  switch (nr_inf)
     a0c:	80 91 db 04 	lds	r24, 0x04DB
     a10:	90 91 dc 04 	lds	r25, 0x04DC
     a14:	86 30       	cpi	r24, 0x06	; 6
     a16:	91 05       	cpc	r25, r1
     a18:	09 f4       	brne	.+2      	; 0xa1c <wyswietl_inf+0x14>
     a1a:	81 c0       	rjmp	.+258    	; 0xb1e <wyswietl_inf+0x116>
     a1c:	87 30       	cpi	r24, 0x07	; 7
     a1e:	91 05       	cpc	r25, r1
     a20:	9c f4       	brge	.+38     	; 0xa48 <wyswietl_inf+0x40>
     a22:	82 30       	cpi	r24, 0x02	; 2
     a24:	91 05       	cpc	r25, r1
     a26:	09 f4       	brne	.+2      	; 0xa2a <wyswietl_inf+0x22>
     a28:	4a c0       	rjmp	.+148    	; 0xabe <wyswietl_inf+0xb6>
     a2a:	83 30       	cpi	r24, 0x03	; 3
     a2c:	91 05       	cpc	r25, r1
     a2e:	24 f4       	brge	.+8      	; 0xa38 <wyswietl_inf+0x30>
     a30:	01 97       	sbiw	r24, 0x01	; 1
     a32:	09 f0       	breq	.+2      	; 0xa36 <wyswietl_inf+0x2e>
     a34:	c9 c0       	rjmp	.+402    	; 0xbc8 <wyswietl_inf+0x1c0>
     a36:	18 c0       	rjmp	.+48     	; 0xa68 <wyswietl_inf+0x60>
     a38:	84 30       	cpi	r24, 0x04	; 4
     a3a:	91 05       	cpc	r25, r1
     a3c:	09 f4       	brne	.+2      	; 0xa40 <wyswietl_inf+0x38>
     a3e:	51 c0       	rjmp	.+162    	; 0xae2 <wyswietl_inf+0xda>
     a40:	05 97       	sbiw	r24, 0x05	; 5
     a42:	09 f0       	breq	.+2      	; 0xa46 <wyswietl_inf+0x3e>
     a44:	c1 c0       	rjmp	.+386    	; 0xbc8 <wyswietl_inf+0x1c0>
     a46:	5c c0       	rjmp	.+184    	; 0xb00 <wyswietl_inf+0xf8>
     a48:	88 30       	cpi	r24, 0x08	; 8
     a4a:	91 05       	cpc	r25, r1
     a4c:	09 f4       	brne	.+2      	; 0xa50 <wyswietl_inf+0x48>
     a4e:	89 c0       	rjmp	.+274    	; 0xb62 <wyswietl_inf+0x15a>
     a50:	88 30       	cpi	r24, 0x08	; 8
     a52:	91 05       	cpc	r25, r1
     a54:	0c f4       	brge	.+2      	; 0xa58 <wyswietl_inf+0x50>
     a56:	72 c0       	rjmp	.+228    	; 0xb3c <wyswietl_inf+0x134>
     a58:	89 30       	cpi	r24, 0x09	; 9
     a5a:	91 05       	cpc	r25, r1
     a5c:	09 f4       	brne	.+2      	; 0xa60 <wyswietl_inf+0x58>
     a5e:	99 c0       	rjmp	.+306    	; 0xb92 <wyswietl_inf+0x18a>
     a60:	0c 97       	sbiw	r24, 0x0c	; 12
     a62:	09 f0       	breq	.+2      	; 0xa66 <wyswietl_inf+0x5e>
     a64:	b1 c0       	rjmp	.+354    	; 0xbc8 <wyswietl_inf+0x1c0>
     a66:	9e c0       	rjmp	.+316    	; 0xba4 <wyswietl_inf+0x19c>
     a68:	88 e8       	ldi	r24, 0x88	; 136
     a6a:	93 e1       	ldi	r25, 0x13	; 19
     a6c:	28 ec       	ldi	r18, 0xC8	; 200
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	f9 01       	movw	r30, r18
     a72:	31 97       	sbiw	r30, 0x01	; 1
     a74:	f1 f7       	brne	.-4      	; 0xa72 <wyswietl_inf+0x6a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a76:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a78:	d9 f7       	brne	.-10     	; 0xa70 <wyswietl_inf+0x68>
  {
    case 1:
	   _delay_ms(500);
       LCD_WriteText("AVR-DOS v ");
     a7a:	8e e7       	ldi	r24, 0x7E	; 126
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
       LCD_GoTo(2,1);
     a82:	82 e0       	ldi	r24, 0x02	; 2
     a84:	61 e0       	ldi	r22, 0x01	; 1
     a86:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_GoTo>
       LCD_WriteText("Rozmiar ");
     a8a:	89 e8       	ldi	r24, 0x89	; 137
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
     a92:	80 e2       	ldi	r24, 0x20	; 32
     a94:	9e e4       	ldi	r25, 0x4E	; 78
     a96:	28 ec       	ldi	r18, 0xC8	; 200
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	f9 01       	movw	r30, r18
     a9c:	31 97       	sbiw	r30, 0x01	; 1
     a9e:	f1 f7       	brne	.-4      	; 0xa9c <wyswietl_inf+0x94>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aa0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aa2:	d9 f7       	brne	.-10     	; 0xa9a <wyswietl_inf+0x92>
	   _delay_ms(2000);
       LCD_Clear();
     aa4:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Clear>
       LCD_WriteText("Wolne " );
     aa8:	82 e9       	ldi	r24, 0x92	; 146
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
       LCD_GoTo(2,1);
     ab0:	82 e0       	ldi	r24, 0x02	; 2
     ab2:	61 e0       	ldi	r22, 0x01	; 1
     ab4:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_GoTo>
       LCD_WriteText("System OK");
     ab8:	89 e9       	ldi	r24, 0x99	; 153
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	70 c0       	rjmp	.+224    	; 0xb9e <wyswietl_inf+0x196>
	   break;

    case 2:
       obsluga_PCF8563(); 
     abe:	0e 94 bd 04 	call	0x97a	; 0x97a <obsluga_PCF8563>
       LCD_GoTo(14,1);
     ac2:	8e e0       	ldi	r24, 0x0E	; 14
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_GoTo>
       if (tryb_zapisu==1)        //gdy zapis w³¹czony wyœwietl X, jeœli nie to wyœwietl O
     aca:	80 91 e0 04 	lds	r24, 0x04E0
     ace:	90 91 e1 04 	lds	r25, 0x04E1
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	19 f4       	brne	.+6      	; 0xadc <wyswietl_inf+0xd4>
        {
         LCD_WriteText(" X");
     ad6:	88 e7       	ldi	r24, 0x78	; 120
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	61 c0       	rjmp	.+194    	; 0xb9e <wyswietl_inf+0x196>
        }
        else 
        {
         LCD_WriteText(" O");
     adc:	8b e7       	ldi	r24, 0x7B	; 123
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	5e c0       	rjmp	.+188    	; 0xb9e <wyswietl_inf+0x196>

    case 3:
	   break;

	case 4:
       LCD_WriteText("Ustawianie godz.");
     ae2:	83 ea       	ldi	r24, 0xA3	; 163
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
       LCD_GoTo(2,1);
     aea:	82 e0       	ldi	r24, 0x02	; 2
     aec:	61 e0       	ldi	r22, 0x01	; 1
     aee:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_GoTo>
       LCD_WriteText("Godzina=");
     af2:	84 eb       	ldi	r24, 0xB4	; 180
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
       lcd_putint(godzina,10);
     afa:	80 91 de 04 	lds	r24, 0x04DE
     afe:	2c c0       	rjmp	.+88     	; 0xb58 <wyswietl_inf+0x150>
	   break;

	case 5:
       LCD_WriteText("Ustawianie minut");
     b00:	8d eb       	ldi	r24, 0xBD	; 189
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
       LCD_GoTo(2,1);
     b08:	82 e0       	ldi	r24, 0x02	; 2
     b0a:	61 e0       	ldi	r22, 0x01	; 1
     b0c:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_GoTo>
       LCD_WriteText("Minuta=");
     b10:	8e ec       	ldi	r24, 0xCE	; 206
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
       lcd_putint(minuta,10);
     b18:	80 91 c2 02 	lds	r24, 0x02C2
     b1c:	1d c0       	rjmp	.+58     	; 0xb58 <wyswietl_inf+0x150>
	   break;

	case 6:
       LCD_WriteText("Ustawianie dnia");
     b1e:	86 ed       	ldi	r24, 0xD6	; 214
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
       LCD_GoTo(2,1);
     b26:	82 e0       	ldi	r24, 0x02	; 2
     b28:	61 e0       	ldi	r22, 0x01	; 1
     b2a:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_GoTo>
       LCD_WriteText("Dzien=");
     b2e:	86 ee       	ldi	r24, 0xE6	; 230
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
       lcd_putint(dzien,10);
     b36:	80 91 fe 04 	lds	r24, 0x04FE
     b3a:	0e c0       	rjmp	.+28     	; 0xb58 <wyswietl_inf+0x150>
	   break;

	case 7:
       LCD_WriteText("Ustawianie mies.");
     b3c:	8d ee       	ldi	r24, 0xED	; 237
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
       LCD_GoTo(2,1);
     b44:	82 e0       	ldi	r24, 0x02	; 2
     b46:	61 e0       	ldi	r22, 0x01	; 1
     b48:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_GoTo>
       LCD_WriteText("Miesiac=");
     b4c:	8e ef       	ldi	r24, 0xFE	; 254
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
       lcd_putint(miesiac,10);
     b54:	80 91 dd 04 	lds	r24, 0x04DD
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	6a e0       	ldi	r22, 0x0A	; 10
     b5c:	0e 94 20 04 	call	0x840	; 0x840 <lcd_putint>
     b60:	08 95       	ret
	   break;

	case 8:
       LCD_WriteText("Us. zapis SD/MMC");
     b62:	87 e0       	ldi	r24, 0x07	; 7
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
       LCD_GoTo(0,1);
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_GoTo>
	   switch (tryb_zapisu)
     b72:	80 91 e0 04 	lds	r24, 0x04E0
     b76:	90 91 e1 04 	lds	r25, 0x04E1
     b7a:	00 97       	sbiw	r24, 0x00	; 0
     b7c:	19 f0       	breq	.+6      	; 0xb84 <wyswietl_inf+0x17c>
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	19 f5       	brne	.+70     	; 0xbc8 <wyswietl_inf+0x1c0>
     b82:	04 c0       	rjmp	.+8      	; 0xb8c <wyswietl_inf+0x184>
	   {                               //wyœwietlenie ustawionego trybu zapisu
        case 0 : LCD_WriteText("Zapisz buf i wyl");
     b84:	88 e1       	ldi	r24, 0x18	; 24
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
        case 1 : LCD_WriteText("Zap. do buf i wl");
     b8c:	89 e2       	ldi	r24, 0x29	; 41
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	06 c0       	rjmp	.+12     	; 0xb9e <wyswietl_inf+0x196>
	   }
	   break;

	case 9:
       LCD_WriteText("Zapis: ");
     b92:	8a e3       	ldi	r24, 0x3A	; 58
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
	   LCD_WriteText(zdarzenie);
     b9a:	8f e8       	ldi	r24, 0x8F	; 143
     b9c:	92 e0       	ldi	r25, 0x02	; 2
     b9e:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
     ba2:	08 95       	ret

	case 11:
	   break;

	case 12:
       LCD_WriteText("Ustawianie roku");
     ba4:	82 e4       	ldi	r24, 0x42	; 66
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
       LCD_GoTo(2,1);
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	61 e0       	ldi	r22, 0x01	; 1
     bb0:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_GoTo>
       LCD_WriteText("Rok=20");
     bb4:	82 e5       	ldi	r24, 0x52	; 82
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
       lcd_putint(rok,10);
     bbc:	80 91 e5 04 	lds	r24, 0x04E5
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	6a e0       	ldi	r22, 0x0A	; 10
     bc4:	0e 94 20 04 	call	0x840	; 0x840 <lcd_putint>
     bc8:	08 95       	ret

00000bca <ust_zapisu>:

//********************************************************
//*       Podprogram ustawiania trybu zapisu             *
//********************************************************
void ust_zapisu()
{
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
  while (1)
  {
    nr_inf=8;
     bce:	88 e0       	ldi	r24, 0x08	; 8
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	90 93 dc 04 	sts	0x04DC, r25
     bd6:	80 93 db 04 	sts	0x04DB, r24
    wyswietl_inf();
     bda:	0e 94 04 05 	call	0xa08	; 0xa08 <wyswietl_inf>
     bde:	c8 ec       	ldi	r28, 0xC8	; 200
     be0:	d0 e0       	ldi	r29, 0x00	; 0
	while (1)
	{
      if(!(PINA & 0x20)) 				// przycisk S1
     be2:	cd 99       	sbic	0x19, 5	; 25
     be4:	0e c0       	rjmp	.+28     	; 0xc02 <ust_zapisu+0x38>
       {  
         beep();
     be6:	0e 94 8b 02 	call	0x516	; 0x516 <beep>
         while(!(PINA & 0x20)) {}; 	//czekanie na puszczenie klawisza
     bea:	cd 9b       	sbis	0x19, 5	; 25
     bec:	fe cf       	rjmp	.-4      	; 0xbea <ust_zapisu+0x20>
     bee:	84 ef       	ldi	r24, 0xF4	; 244
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	28 ec       	ldi	r18, 0xC8	; 200
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	f9 01       	movw	r30, r18
     bf8:	31 97       	sbiw	r30, 0x01	; 1
     bfa:	f1 f7       	brne	.-4      	; 0xbf8 <ust_zapisu+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bfc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bfe:	d9 f7       	brne	.-10     	; 0xbf6 <ust_zapisu+0x2c>
     c00:	1f c0       	rjmp	.+62     	; 0xc40 <ust_zapisu+0x76>
         _delay_ms(50);
		 return;  //zakoñczenie ustawiania
       };
      if(!(PINA & 0x08)) 			// przycisk S3
     c02:	cb 99       	sbic	0x19, 3	; 25
     c04:	ee cf       	rjmp	.-36     	; 0xbe2 <ust_zapisu+0x18>
       {  
         beep();
     c06:	0e 94 8b 02 	call	0x516	; 0x516 <beep>
         while(!(PINA & 0x08)) {}; 	//czekanie na puszczenie klawisza
     c0a:	cb 9b       	sbis	0x19, 3	; 25
     c0c:	fe cf       	rjmp	.-4      	; 0xc0a <ust_zapisu+0x40>
     c0e:	84 ef       	ldi	r24, 0xF4	; 244
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	fe 01       	movw	r30, r28
     c14:	31 97       	sbiw	r30, 0x01	; 1
     c16:	f1 f7       	brne	.-4      	; 0xc14 <ust_zapisu+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c18:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c1a:	d9 f7       	brne	.-10     	; 0xc12 <ust_zapisu+0x48>
         _delay_ms(50);

         tryb_zapisu++;     //ustwiania trybu zapisu
     c1c:	80 91 e0 04 	lds	r24, 0x04E0
     c20:	90 91 e1 04 	lds	r25, 0x04E1
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	90 93 e1 04 	sts	0x04E1, r25
     c2a:	80 93 e0 04 	sts	0x04E0, r24
         if(tryb_zapisu>1)
     c2e:	02 97       	sbiw	r24, 0x02	; 2
     c30:	24 f0       	brlt	.+8      	; 0xc3a <ust_zapisu+0x70>
         {
	       tryb_zapisu=0;
     c32:	10 92 e1 04 	sts	0x04E1, r1
     c36:	10 92 e0 04 	sts	0x04E0, r1
         };
		 wyswietl_inf();
     c3a:	0e 94 04 05 	call	0xa08	; 0xa08 <wyswietl_inf>
     c3e:	d1 cf       	rjmp	.-94     	; 0xbe2 <ust_zapisu+0x18>
       };
	};
  };
};
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	08 95       	ret

00000c46 <ust_zegara>:

//********************************************************
//*             Podprogram ustawiania zegara             *
//********************************************************
void ust_zegara()
{
     c46:	2f 92       	push	r2
     c48:	3f 92       	push	r3
     c4a:	4f 92       	push	r4
     c4c:	5f 92       	push	r5
     c4e:	6f 92       	push	r6
     c50:	7f 92       	push	r7
     c52:	8f 92       	push	r8
     c54:	9f 92       	push	r9
     c56:	af 92       	push	r10
     c58:	bf 92       	push	r11
     c5a:	cf 92       	push	r12
     c5c:	df 92       	push	r13
     c5e:	ef 92       	push	r14
     c60:	ff 92       	push	r15
     c62:	0f 93       	push	r16
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
  nr_inf=12;
     c6a:	8c e0       	ldi	r24, 0x0C	; 12
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	90 93 dc 04 	sts	0x04DC, r25
     c72:	80 93 db 04 	sts	0x04DB, r24
  wyswietl_inf();
     c76:	0e 94 04 05 	call	0xa08	; 0xa08 <wyswietl_inf>
     c7a:	c8 ec       	ldi	r28, 0xC8	; 200
     c7c:	d0 e0       	ldi	r29, 0x00	; 0
        if(!(PINA & 0x08)) // przycisk S3 - zwiêkszenie trybu ustawiania o 1
        {  
	      beep();
          while(!(PINA & 0x08)) {}; //czekanie na puszczenie klawisza
          _delay_ms(50);
		  tryb_ustawiania=4;
     c7e:	64 e0       	ldi	r22, 0x04	; 4
     c80:	c6 2e       	mov	r12, r22
     c82:	d1 2c       	mov	r13, r1
		  nr_inf=5;
     c84:	55 e0       	ldi	r21, 0x05	; 5
     c86:	45 2e       	mov	r4, r21
     c88:	51 2c       	mov	r5, r1
        {  
	      beep();
          while(!(PINA & 0x10)) {}; //czekanie na puszczenie klawisza
          _delay_ms(50);
	      nr_inf=4;
          zmiana=1;
     c8a:	41 e0       	ldi	r20, 0x01	; 1
     c8c:	e4 2e       	mov	r14, r20
     c8e:	f1 2c       	mov	r15, r1
        {  
	      beep();
          while(!(PINA & 0x08)) {}; //czekanie na puszczenie klawisza
          _delay_ms(50);
		  tryb_ustawiania=0;
		  nr_inf=12;
     c90:	3c e0       	ldi	r19, 0x0C	; 12
     c92:	83 2e       	mov	r8, r19
     c94:	91 2c       	mov	r9, r1
        {  
	      beep();
          while(!(PINA & 0x08)) {}; //czekanie na puszczenie klawisza
          _delay_ms(50);
		  tryb_ustawiania=1;
		  nr_inf=7;
     c96:	27 e0       	ldi	r18, 0x07	; 7
     c98:	62 2e       	mov	r6, r18
     c9a:	71 2c       	mov	r7, r1
        {  
	      beep();
          while(!(PINA & 0x10)) {}; //czekanie na puszczenie klawisza
          _delay_ms(50);
	      nr_inf=12;
          zmiana=2;
     c9c:	02 e0       	ldi	r16, 0x02	; 2
     c9e:	10 e0       	ldi	r17, 0x00	; 0
        {  
	      beep();
          while(!(PINA & 0x08)) {}; //czekanie na puszczenie klawisza
          _delay_ms(50);
		  tryb_ustawiania=2;
		  nr_inf=6;
     ca0:	96 e0       	ldi	r25, 0x06	; 6
     ca2:	a9 2e       	mov	r10, r25
     ca4:	b1 2c       	mov	r11, r1
        if(!(PINA & 0x08)) // przycisk S3 - zwiêkszenie trybu ustawiania o 1
        {  
	      beep();
          while(!(PINA & 0x08)) {}; //czekanie na puszczenie klawisza
          _delay_ms(50);
		  tryb_ustawiania=3;
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	28 2e       	mov	r2, r24
     caa:	31 2c       	mov	r3, r1
{
  nr_inf=12;
  wyswietl_inf();
  while (1)
  {
    switch (tryb_ustawiania)
     cac:	80 91 f7 04 	lds	r24, 0x04F7
     cb0:	90 91 f8 04 	lds	r25, 0x04F8
     cb4:	82 30       	cpi	r24, 0x02	; 2
     cb6:	91 05       	cpc	r25, r1
     cb8:	09 f4       	brne	.+2      	; 0xcbc <ust_zegara+0x76>
     cba:	a6 c0       	rjmp	.+332    	; 0xe08 <ust_zegara+0x1c2>
     cbc:	83 30       	cpi	r24, 0x03	; 3
     cbe:	91 05       	cpc	r25, r1
     cc0:	34 f4       	brge	.+12     	; 0xcce <ust_zegara+0x88>
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	61 f0       	breq	.+24     	; 0xcde <ust_zegara+0x98>
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	91 05       	cpc	r25, r1
     cca:	a1 f7       	brne	.-24     	; 0xcb4 <ust_zegara+0x6e>
     ccc:	56 c0       	rjmp	.+172    	; 0xd7a <ust_zegara+0x134>
     cce:	83 30       	cpi	r24, 0x03	; 3
     cd0:	91 05       	cpc	r25, r1
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <ust_zegara+0x90>
     cd4:	e0 c0       	rjmp	.+448    	; 0xe96 <ust_zegara+0x250>
     cd6:	84 30       	cpi	r24, 0x04	; 4
     cd8:	91 05       	cpc	r25, r1
     cda:	61 f7       	brne	.-40     	; 0xcb4 <ust_zegara+0x6e>
     cdc:	22 c1       	rjmp	.+580    	; 0xf22 <ust_zegara+0x2dc>
    {
      case 0: //rok
        if(!(PINA & 0x20)) // przycisk S1 - koniec ustawiania
     cde:	cd 99       	sbic	0x19, 5	; 25
     ce0:	0e c0       	rjmp	.+28     	; 0xcfe <ust_zegara+0xb8>
        {  
	      beep();
     ce2:	0e 94 8b 02 	call	0x516	; 0x516 <beep>
          while(!(PINA & 0x20)) {}; //czekanie na puszczenie klawisza
     ce6:	cd 9b       	sbis	0x19, 5	; 25
     ce8:	fe cf       	rjmp	.-4      	; 0xce6 <ust_zegara+0xa0>
     cea:	84 ef       	ldi	r24, 0xF4	; 244
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	28 ec       	ldi	r18, 0xC8	; 200
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	f9 01       	movw	r30, r18
     cf4:	31 97       	sbiw	r30, 0x01	; 1
     cf6:	f1 f7       	brne	.-4      	; 0xcf4 <ust_zegara+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cf8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cfa:	d9 f7       	brne	.-10     	; 0xcf2 <ust_zegara+0xac>
     cfc:	59 c1       	rjmp	.+690    	; 0xfb0 <ust_zegara+0x36a>
          _delay_ms(50);
	      return;  //wyjœcie z podprogramu
        };
        if(!(PINA & 0x10)) // przycisk S2 - zwiêkszenie rok o 1
     cfe:	cc 99       	sbic	0x19, 4	; 25
     d00:	26 c0       	rjmp	.+76     	; 0xd4e <ust_zegara+0x108>
        {  
	      beep();
     d02:	0e 94 8b 02 	call	0x516	; 0x516 <beep>
          while(!(PINA & 0x10)) {}; //czekanie na puszczenie klawisza
     d06:	cc 9b       	sbis	0x19, 4	; 25
     d08:	fe cf       	rjmp	.-4      	; 0xd06 <ust_zegara+0xc0>
     d0a:	84 ef       	ldi	r24, 0xF4	; 244
     d0c:	91 e0       	ldi	r25, 0x01	; 1
     d0e:	fe 01       	movw	r30, r28
     d10:	31 97       	sbiw	r30, 0x01	; 1
     d12:	f1 f7       	brne	.-4      	; 0xd10 <ust_zegara+0xca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d14:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d16:	d9 f7       	brne	.-10     	; 0xd0e <ust_zegara+0xc8>
          _delay_ms(50);
	      nr_inf=12;
     d18:	90 92 dc 04 	sts	0x04DC, r9
     d1c:	80 92 db 04 	sts	0x04DB, r8
          zmiana=2;
     d20:	10 93 75 02 	sts	0x0275, r17
     d24:	00 93 74 02 	sts	0x0274, r16
          rok++;     
     d28:	80 91 e5 04 	lds	r24, 0x04E5
     d2c:	8f 5f       	subi	r24, 0xFF	; 255
     d2e:	80 93 e5 04 	sts	0x04E5, r24
          if (rok<14)
     d32:	8e 30       	cpi	r24, 0x0E	; 14
     d34:	18 f4       	brcc	.+6      	; 0xd3c <ust_zegara+0xf6>
            {rok=14;};                              //ustawianie roku od 2014 do 2030
     d36:	8e e0       	ldi	r24, 0x0E	; 14
     d38:	80 93 e5 04 	sts	0x04E5, r24
          if (rok>30) 
     d3c:	80 91 e5 04 	lds	r24, 0x04E5
     d40:	8f 31       	cpi	r24, 0x1F	; 31
     d42:	08 f4       	brcc	.+2      	; 0xd46 <ust_zegara+0x100>
     d44:	32 c1       	rjmp	.+612    	; 0xfaa <ust_zegara+0x364>
            {rok=14;};
     d46:	8e e0       	ldi	r24, 0x0E	; 14
     d48:	80 93 e5 04 	sts	0x04E5, r24
     d4c:	2e c1       	rjmp	.+604    	; 0xfaa <ust_zegara+0x364>
	      wyswietl_inf();
		  break;  //wyjœcie z case
        };
        if(!(PINA & 0x08)) // przycisk S3 - zwiêkszenie trybu ustawiania o 1
     d4e:	cb 99       	sbic	0x19, 3	; 25
     d50:	ad cf       	rjmp	.-166    	; 0xcac <ust_zegara+0x66>
        {  
	      beep();
     d52:	0e 94 8b 02 	call	0x516	; 0x516 <beep>
          while(!(PINA & 0x08)) {}; //czekanie na puszczenie klawisza
     d56:	cb 9b       	sbis	0x19, 3	; 25
     d58:	fe cf       	rjmp	.-4      	; 0xd56 <ust_zegara+0x110>
     d5a:	84 ef       	ldi	r24, 0xF4	; 244
     d5c:	91 e0       	ldi	r25, 0x01	; 1
     d5e:	fe 01       	movw	r30, r28
     d60:	31 97       	sbiw	r30, 0x01	; 1
     d62:	f1 f7       	brne	.-4      	; 0xd60 <ust_zegara+0x11a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d64:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d66:	d9 f7       	brne	.-10     	; 0xd5e <ust_zegara+0x118>
          _delay_ms(50);
		  tryb_ustawiania=1;
     d68:	f0 92 f8 04 	sts	0x04F8, r15
     d6c:	e0 92 f7 04 	sts	0x04F7, r14
		  nr_inf=7;
     d70:	70 92 dc 04 	sts	0x04DC, r7
     d74:	60 92 db 04 	sts	0x04DB, r6
     d78:	18 c1       	rjmp	.+560    	; 0xfaa <ust_zegara+0x364>
		  break;  //wyjœcie z case
        };
		break;

      case 1: //miesi¹c
        if(!(PINA & 0x20)) // przycisk S1 - koniec ustawiania
     d7a:	cd 99       	sbic	0x19, 5	; 25
     d7c:	0e c0       	rjmp	.+28     	; 0xd9a <ust_zegara+0x154>
        {  
	      beep();
     d7e:	0e 94 8b 02 	call	0x516	; 0x516 <beep>
          while(!(PINA & 0x20)) {}; //czekanie na puszczenie klawisza
     d82:	cd 9b       	sbis	0x19, 5	; 25
     d84:	fe cf       	rjmp	.-4      	; 0xd82 <ust_zegara+0x13c>
     d86:	84 ef       	ldi	r24, 0xF4	; 244
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	28 ec       	ldi	r18, 0xC8	; 200
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	f9 01       	movw	r30, r18
     d90:	31 97       	sbiw	r30, 0x01	; 1
     d92:	f1 f7       	brne	.-4      	; 0xd90 <ust_zegara+0x14a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d94:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d96:	d9 f7       	brne	.-10     	; 0xd8e <ust_zegara+0x148>
     d98:	0b c1       	rjmp	.+534    	; 0xfb0 <ust_zegara+0x36a>
          _delay_ms(50);
	      return;  //wyjœcie z podprogramu
        };
        if(!(PINA & 0x10)) // przycisk S2 - zwiêkszenie miesiac o 1
     d9a:	cc 99       	sbic	0x19, 4	; 25
     d9c:	1f c0       	rjmp	.+62     	; 0xddc <ust_zegara+0x196>
        {  
	      beep();
     d9e:	0e 94 8b 02 	call	0x516	; 0x516 <beep>
          while(!(PINA & 0x10)) {}; //czekanie na puszczenie klawisza
     da2:	cc 9b       	sbis	0x19, 4	; 25
     da4:	fe cf       	rjmp	.-4      	; 0xda2 <ust_zegara+0x15c>
     da6:	84 ef       	ldi	r24, 0xF4	; 244
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	fe 01       	movw	r30, r28
     dac:	31 97       	sbiw	r30, 0x01	; 1
     dae:	f1 f7       	brne	.-4      	; 0xdac <ust_zegara+0x166>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     db2:	d9 f7       	brne	.-10     	; 0xdaa <ust_zegara+0x164>
          _delay_ms(50);
	      nr_inf=7;
     db4:	70 92 dc 04 	sts	0x04DC, r7
     db8:	60 92 db 04 	sts	0x04DB, r6
          zmiana=2;
     dbc:	10 93 75 02 	sts	0x0275, r17
     dc0:	00 93 74 02 	sts	0x0274, r16
          miesiac++;     
     dc4:	80 91 dd 04 	lds	r24, 0x04DD
     dc8:	8f 5f       	subi	r24, 0xFF	; 255
     dca:	80 93 dd 04 	sts	0x04DD, r24
          if (miesiac>12) 
     dce:	8d 30       	cpi	r24, 0x0D	; 13
     dd0:	08 f4       	brcc	.+2      	; 0xdd4 <ust_zegara+0x18e>
     dd2:	eb c0       	rjmp	.+470    	; 0xfaa <ust_zegara+0x364>
            {miesiac=1;};
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	80 93 dd 04 	sts	0x04DD, r24
     dda:	e7 c0       	rjmp	.+462    	; 0xfaa <ust_zegara+0x364>
	      wyswietl_inf();
		  break;  //wyjœcie z case
        };
        if(!(PINA & 0x08)) // przycisk S3 - zwiêkszenie trybu ustawiania o 1
     ddc:	cb 99       	sbic	0x19, 3	; 25
     dde:	66 cf       	rjmp	.-308    	; 0xcac <ust_zegara+0x66>
        {  
	      beep();
     de0:	0e 94 8b 02 	call	0x516	; 0x516 <beep>
          while(!(PINA & 0x08)) {}; //czekanie na puszczenie klawisza
     de4:	cb 9b       	sbis	0x19, 3	; 25
     de6:	fe cf       	rjmp	.-4      	; 0xde4 <ust_zegara+0x19e>
     de8:	84 ef       	ldi	r24, 0xF4	; 244
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	fe 01       	movw	r30, r28
     dee:	31 97       	sbiw	r30, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <ust_zegara+0x1a8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df4:	d9 f7       	brne	.-10     	; 0xdec <ust_zegara+0x1a6>
          _delay_ms(50);
		  tryb_ustawiania=2;
     df6:	10 93 f8 04 	sts	0x04F8, r17
     dfa:	00 93 f7 04 	sts	0x04F7, r16
		  nr_inf=6;
     dfe:	b0 92 dc 04 	sts	0x04DC, r11
     e02:	a0 92 db 04 	sts	0x04DB, r10
     e06:	d1 c0       	rjmp	.+418    	; 0xfaa <ust_zegara+0x364>
		  break;  //wyjœcie z case
        };
		break;

      case 2: //dzieñ
        if(!(PINA & 0x20)) // przycisk S1 - koniec ustawiania
     e08:	cd 99       	sbic	0x19, 5	; 25
     e0a:	0e c0       	rjmp	.+28     	; 0xe28 <ust_zegara+0x1e2>
        {  
	      beep();
     e0c:	0e 94 8b 02 	call	0x516	; 0x516 <beep>
          while(!(PINA & 0x20)) {}; //czekanie na puszczenie klawisza
     e10:	cd 9b       	sbis	0x19, 5	; 25
     e12:	fe cf       	rjmp	.-4      	; 0xe10 <ust_zegara+0x1ca>
     e14:	84 ef       	ldi	r24, 0xF4	; 244
     e16:	91 e0       	ldi	r25, 0x01	; 1
     e18:	28 ec       	ldi	r18, 0xC8	; 200
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	f9 01       	movw	r30, r18
     e1e:	31 97       	sbiw	r30, 0x01	; 1
     e20:	f1 f7       	brne	.-4      	; 0xe1e <ust_zegara+0x1d8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e22:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e24:	d9 f7       	brne	.-10     	; 0xe1c <ust_zegara+0x1d6>
     e26:	c4 c0       	rjmp	.+392    	; 0xfb0 <ust_zegara+0x36a>
          _delay_ms(50);
	      return;  //wyjœcie z podprogramu
        };
        if(!(PINA & 0x10)) // przycisk S2 - zwiêkszenie dzien o 1
     e28:	cc 99       	sbic	0x19, 4	; 25
     e2a:	1f c0       	rjmp	.+62     	; 0xe6a <ust_zegara+0x224>
        {  
	      beep();
     e2c:	0e 94 8b 02 	call	0x516	; 0x516 <beep>
          while(!(PINA & 0x10)) {}; //czekanie na puszczenie klawisza
     e30:	cc 9b       	sbis	0x19, 4	; 25
     e32:	fe cf       	rjmp	.-4      	; 0xe30 <ust_zegara+0x1ea>
     e34:	84 ef       	ldi	r24, 0xF4	; 244
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	fe 01       	movw	r30, r28
     e3a:	31 97       	sbiw	r30, 0x01	; 1
     e3c:	f1 f7       	brne	.-4      	; 0xe3a <ust_zegara+0x1f4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e3e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e40:	d9 f7       	brne	.-10     	; 0xe38 <ust_zegara+0x1f2>
          _delay_ms(50);
	      nr_inf=6;
     e42:	b0 92 dc 04 	sts	0x04DC, r11
     e46:	a0 92 db 04 	sts	0x04DB, r10
          zmiana=2;
     e4a:	10 93 75 02 	sts	0x0275, r17
     e4e:	00 93 74 02 	sts	0x0274, r16
          dzien++;     
     e52:	80 91 fe 04 	lds	r24, 0x04FE
     e56:	8f 5f       	subi	r24, 0xFF	; 255
     e58:	80 93 fe 04 	sts	0x04FE, r24
          if (dzien>31) 
     e5c:	80 32       	cpi	r24, 0x20	; 32
     e5e:	08 f4       	brcc	.+2      	; 0xe62 <ust_zegara+0x21c>
     e60:	a4 c0       	rjmp	.+328    	; 0xfaa <ust_zegara+0x364>
            {dzien=1;};
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	80 93 fe 04 	sts	0x04FE, r24
     e68:	a0 c0       	rjmp	.+320    	; 0xfaa <ust_zegara+0x364>
	      wyswietl_inf();
		  break;  //wyjœcie z case
        };
        if(!(PINA & 0x08)) // przycisk S3 - zwiêkszenie trybu ustawiania o 1
     e6a:	cb 99       	sbic	0x19, 3	; 25
     e6c:	1f cf       	rjmp	.-450    	; 0xcac <ust_zegara+0x66>
        {  
	      beep();
     e6e:	0e 94 8b 02 	call	0x516	; 0x516 <beep>
          while(!(PINA & 0x08)) {}; //czekanie na puszczenie klawisza
     e72:	cb 9b       	sbis	0x19, 3	; 25
     e74:	fe cf       	rjmp	.-4      	; 0xe72 <ust_zegara+0x22c>
     e76:	84 ef       	ldi	r24, 0xF4	; 244
     e78:	91 e0       	ldi	r25, 0x01	; 1
     e7a:	fe 01       	movw	r30, r28
     e7c:	31 97       	sbiw	r30, 0x01	; 1
     e7e:	f1 f7       	brne	.-4      	; 0xe7c <ust_zegara+0x236>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e80:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e82:	d9 f7       	brne	.-10     	; 0xe7a <ust_zegara+0x234>
          _delay_ms(50);
		  tryb_ustawiania=3;
     e84:	30 92 f8 04 	sts	0x04F8, r3
     e88:	20 92 f7 04 	sts	0x04F7, r2
		  nr_inf=4;
     e8c:	d0 92 dc 04 	sts	0x04DC, r13
     e90:	c0 92 db 04 	sts	0x04DB, r12
     e94:	8a c0       	rjmp	.+276    	; 0xfaa <ust_zegara+0x364>
		  break;  //wyjœcie z case
        };
		break;

      case 3: //godzina
        if(!(PINA & 0x20)) // przycisk S1 - koniec ustawiania
     e96:	cd 99       	sbic	0x19, 5	; 25
     e98:	0e c0       	rjmp	.+28     	; 0xeb6 <ust_zegara+0x270>
        {  
	      beep();
     e9a:	0e 94 8b 02 	call	0x516	; 0x516 <beep>
          while(!(PINA & 0x20)) {}; //czekanie na puszczenie klawisza
     e9e:	cd 9b       	sbis	0x19, 5	; 25
     ea0:	fe cf       	rjmp	.-4      	; 0xe9e <ust_zegara+0x258>
     ea2:	84 ef       	ldi	r24, 0xF4	; 244
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	28 ec       	ldi	r18, 0xC8	; 200
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	f9 01       	movw	r30, r18
     eac:	31 97       	sbiw	r30, 0x01	; 1
     eae:	f1 f7       	brne	.-4      	; 0xeac <ust_zegara+0x266>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb2:	d9 f7       	brne	.-10     	; 0xeaa <ust_zegara+0x264>
     eb4:	7d c0       	rjmp	.+250    	; 0xfb0 <ust_zegara+0x36a>
          _delay_ms(50);
	      return;  //wyjœcie z podprogramu
        };
        if(!(PINA & 0x10)) // przycisk S2 - zwiêkszenie dzien o 1
     eb6:	cc 99       	sbic	0x19, 4	; 25
     eb8:	1e c0       	rjmp	.+60     	; 0xef6 <ust_zegara+0x2b0>
        {  
	      beep();
     eba:	0e 94 8b 02 	call	0x516	; 0x516 <beep>
          while(!(PINA & 0x10)) {}; //czekanie na puszczenie klawisza
     ebe:	cc 9b       	sbis	0x19, 4	; 25
     ec0:	fe cf       	rjmp	.-4      	; 0xebe <ust_zegara+0x278>
     ec2:	84 ef       	ldi	r24, 0xF4	; 244
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	fe 01       	movw	r30, r28
     ec8:	31 97       	sbiw	r30, 0x01	; 1
     eca:	f1 f7       	brne	.-4      	; 0xec8 <ust_zegara+0x282>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ecc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ece:	d9 f7       	brne	.-10     	; 0xec6 <ust_zegara+0x280>
          _delay_ms(50);
	      nr_inf=4;
     ed0:	d0 92 dc 04 	sts	0x04DC, r13
     ed4:	c0 92 db 04 	sts	0x04DB, r12
          zmiana=1;
     ed8:	f0 92 75 02 	sts	0x0275, r15
     edc:	e0 92 74 02 	sts	0x0274, r14
          godzina++;     
     ee0:	80 91 de 04 	lds	r24, 0x04DE
     ee4:	8f 5f       	subi	r24, 0xFF	; 255
     ee6:	80 93 de 04 	sts	0x04DE, r24
          if (godzina>23) 
     eea:	88 31       	cpi	r24, 0x18	; 24
     eec:	08 f4       	brcc	.+2      	; 0xef0 <ust_zegara+0x2aa>
     eee:	5d c0       	rjmp	.+186    	; 0xfaa <ust_zegara+0x364>
            {godzina=0;};
     ef0:	10 92 de 04 	sts	0x04DE, r1
     ef4:	5a c0       	rjmp	.+180    	; 0xfaa <ust_zegara+0x364>
	      wyswietl_inf();
		  break;  //wyjœcie z case
        };
        if(!(PINA & 0x08)) // przycisk S3 - zwiêkszenie trybu ustawiania o 1
     ef6:	cb 99       	sbic	0x19, 3	; 25
     ef8:	d9 ce       	rjmp	.-590    	; 0xcac <ust_zegara+0x66>
        {  
	      beep();
     efa:	0e 94 8b 02 	call	0x516	; 0x516 <beep>
          while(!(PINA & 0x08)) {}; //czekanie na puszczenie klawisza
     efe:	cb 9b       	sbis	0x19, 3	; 25
     f00:	fe cf       	rjmp	.-4      	; 0xefe <ust_zegara+0x2b8>
     f02:	84 ef       	ldi	r24, 0xF4	; 244
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	fe 01       	movw	r30, r28
     f08:	31 97       	sbiw	r30, 0x01	; 1
     f0a:	f1 f7       	brne	.-4      	; 0xf08 <ust_zegara+0x2c2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f0c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f0e:	d9 f7       	brne	.-10     	; 0xf06 <ust_zegara+0x2c0>
          _delay_ms(50);
		  tryb_ustawiania=4;
     f10:	d0 92 f8 04 	sts	0x04F8, r13
     f14:	c0 92 f7 04 	sts	0x04F7, r12
		  nr_inf=5;
     f18:	50 92 dc 04 	sts	0x04DC, r5
     f1c:	40 92 db 04 	sts	0x04DB, r4
     f20:	44 c0       	rjmp	.+136    	; 0xfaa <ust_zegara+0x364>
		  break;  //wyjœcie z case
        };
		break;

      case 4: //minuta
        if(!(PINA & 0x20)) // przycisk S1 - koniec ustawiania
     f22:	cd 99       	sbic	0x19, 5	; 25
     f24:	0e c0       	rjmp	.+28     	; 0xf42 <ust_zegara+0x2fc>
        {  
	      beep();
     f26:	0e 94 8b 02 	call	0x516	; 0x516 <beep>
          while(!(PINA & 0x20)) {}; //czekanie na puszczenie klawisza
     f2a:	cd 9b       	sbis	0x19, 5	; 25
     f2c:	fe cf       	rjmp	.-4      	; 0xf2a <ust_zegara+0x2e4>
     f2e:	84 ef       	ldi	r24, 0xF4	; 244
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	28 ec       	ldi	r18, 0xC8	; 200
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	f9 01       	movw	r30, r18
     f38:	31 97       	sbiw	r30, 0x01	; 1
     f3a:	f1 f7       	brne	.-4      	; 0xf38 <ust_zegara+0x2f2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f3c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3e:	d9 f7       	brne	.-10     	; 0xf36 <ust_zegara+0x2f0>
     f40:	37 c0       	rjmp	.+110    	; 0xfb0 <ust_zegara+0x36a>
          _delay_ms(50);
	      return;  //wyjœcie z podprogramu
        };
        if(!(PINA & 0x10)) // przycisk S2 - zwiêkszenie dzien o 1
     f42:	cc 99       	sbic	0x19, 4	; 25
     f44:	1d c0       	rjmp	.+58     	; 0xf80 <ust_zegara+0x33a>
        {  
	      beep();
     f46:	0e 94 8b 02 	call	0x516	; 0x516 <beep>
          while(!(PINA & 0x10)) {}; //czekanie na puszczenie klawisza
     f4a:	cc 9b       	sbis	0x19, 4	; 25
     f4c:	fe cf       	rjmp	.-4      	; 0xf4a <ust_zegara+0x304>
     f4e:	84 ef       	ldi	r24, 0xF4	; 244
     f50:	91 e0       	ldi	r25, 0x01	; 1
     f52:	fe 01       	movw	r30, r28
     f54:	31 97       	sbiw	r30, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <ust_zegara+0x30e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f58:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f5a:	d9 f7       	brne	.-10     	; 0xf52 <ust_zegara+0x30c>
          _delay_ms(50);
	      nr_inf=5;
     f5c:	50 92 dc 04 	sts	0x04DC, r5
     f60:	40 92 db 04 	sts	0x04DB, r4
          zmiana=1;
     f64:	f0 92 75 02 	sts	0x0275, r15
     f68:	e0 92 74 02 	sts	0x0274, r14
          minuta++;     
     f6c:	80 91 c2 02 	lds	r24, 0x02C2
     f70:	8f 5f       	subi	r24, 0xFF	; 255
     f72:	80 93 c2 02 	sts	0x02C2, r24
          if (minuta>59) 
     f76:	8c 33       	cpi	r24, 0x3C	; 60
     f78:	c0 f0       	brcs	.+48     	; 0xfaa <ust_zegara+0x364>
            {minuta=0;};
     f7a:	10 92 c2 02 	sts	0x02C2, r1
     f7e:	15 c0       	rjmp	.+42     	; 0xfaa <ust_zegara+0x364>
	      wyswietl_inf();
		  break;  //wyjœcie z case
        };
        if(!(PINA & 0x08)) // przycisk S3 - zwiêkszenie trybu ustawiania o 1
     f80:	cb 99       	sbic	0x19, 3	; 25
     f82:	94 ce       	rjmp	.-728    	; 0xcac <ust_zegara+0x66>
        {  
	      beep();
     f84:	0e 94 8b 02 	call	0x516	; 0x516 <beep>
          while(!(PINA & 0x08)) {}; //czekanie na puszczenie klawisza
     f88:	cb 9b       	sbis	0x19, 3	; 25
     f8a:	fe cf       	rjmp	.-4      	; 0xf88 <ust_zegara+0x342>
     f8c:	84 ef       	ldi	r24, 0xF4	; 244
     f8e:	91 e0       	ldi	r25, 0x01	; 1
     f90:	fe 01       	movw	r30, r28
     f92:	31 97       	sbiw	r30, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <ust_zegara+0x34c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f96:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f98:	d9 f7       	brne	.-10     	; 0xf90 <ust_zegara+0x34a>
          _delay_ms(50);
		  tryb_ustawiania=0;
     f9a:	10 92 f8 04 	sts	0x04F8, r1
     f9e:	10 92 f7 04 	sts	0x04F7, r1
		  nr_inf=12;
     fa2:	90 92 dc 04 	sts	0x04DC, r9
     fa6:	80 92 db 04 	sts	0x04DB, r8
		  wyswietl_inf();
     faa:	0e 94 04 05 	call	0xa08	; 0xa08 <wyswietl_inf>
     fae:	7e ce       	rjmp	.-772    	; 0xcac <ust_zegara+0x66>
		  break;  //wyjœcie z case
        };
		break;
    };
  };
};
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	ff 90       	pop	r15
     fba:	ef 90       	pop	r14
     fbc:	df 90       	pop	r13
     fbe:	cf 90       	pop	r12
     fc0:	bf 90       	pop	r11
     fc2:	af 90       	pop	r10
     fc4:	9f 90       	pop	r9
     fc6:	8f 90       	pop	r8
     fc8:	7f 90       	pop	r7
     fca:	6f 90       	pop	r6
     fcc:	5f 90       	pop	r5
     fce:	4f 90       	pop	r4
     fd0:	3f 90       	pop	r3
     fd2:	2f 90       	pop	r2
     fd4:	08 95       	ret

00000fd6 <dopisz_rekord>:
//************************************************************
//* Podprogram dopisania rekordu i ewentualnego wyœwietlenia *
//* komunikatu b³êdu                                         *
//************************************************************
void dopisz_rekord(unsigned char *rek)
{
     fd6:	bc 01       	movw	r22, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0a c0       	rjmp	.+20     	; 0xff0 <dopisz_rekord+0x1a>
  unsigned char blad;

  for (rob=0; rob<9; rob++)
    fileName[rob]=fileNameZ[rob];
     fdc:	e9 2f       	mov	r30, r25
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	df 01       	movw	r26, r30
     fe2:	af 59       	subi	r26, 0x9F	; 159
     fe4:	bd 4f       	sbci	r27, 0xFD	; 253
     fe6:	8c 91       	ld	r24, X
     fe8:	e4 56       	subi	r30, 0x64	; 100
     fea:	fd 4f       	sbci	r31, 0xFD	; 253
     fec:	80 83       	st	Z, r24
     fee:	9f 5f       	subi	r25, 0xFF	; 255
//************************************************************
void dopisz_rekord(unsigned char *rek)
{
  unsigned char blad;

  for (rob=0; rob<9; rob++)
     ff0:	99 30       	cpi	r25, 0x09	; 9
     ff2:	a0 f3       	brcs	.-24     	; 0xfdc <dopisz_rekord+0x6>
     ff4:	90 93 d6 04 	sts	0x04D6, r25
    fileName[rob]=fileNameZ[rob];

  blad=writeFile (fileName,rek); 
     ff8:	8c e9       	ldi	r24, 0x9C	; 156
     ffa:	92 e0       	ldi	r25, 0x02	; 2
     ffc:	0e 94 03 11 	call	0x2206	; 0x2206 <writeFile>
    1000:	20 ed       	ldi	r18, 0xD0	; 208
    1002:	37 e0       	ldi	r19, 0x07	; 7
    1004:	48 ec       	ldi	r20, 0xC8	; 200
    1006:	50 e0       	ldi	r21, 0x00	; 0
    1008:	fa 01       	movw	r30, r20
    100a:	31 97       	sbiw	r30, 0x01	; 1
    100c:	f1 f7       	brne	.-4      	; 0x100a <dopisz_rekord+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100e:	21 50       	subi	r18, 0x01	; 1
    1010:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1012:	d1 f7       	brne	.-12     	; 0x1008 <dopisz_rekord+0x32>
// 2: brak wolnych klastrow
// 3: b³¹d zapisu klastra
// 4: b³êdna nazwa pliku

  _delay_ms(200);              
  if (!(blad==0))
    1014:	88 23       	and	r24, r24
    1016:	09 f4       	brne	.+2      	; 0x101a <dopisz_rekord+0x44>
    1018:	6d c0       	rjmp	.+218    	; 0x10f4 <dopisz_rekord+0x11e>
  {
    switch (blad)
    101a:	82 30       	cpi	r24, 0x02	; 2
    101c:	21 f1       	breq	.+72     	; 0x1066 <dopisz_rekord+0x90>
    101e:	83 30       	cpi	r24, 0x03	; 3
    1020:	20 f4       	brcc	.+8      	; 0x102a <dopisz_rekord+0x54>
    1022:	81 30       	cpi	r24, 0x01	; 1
    1024:	09 f0       	breq	.+2      	; 0x1028 <dopisz_rekord+0x52>
    1026:	66 c0       	rjmp	.+204    	; 0x10f4 <dopisz_rekord+0x11e>
    1028:	06 c0       	rjmp	.+12     	; 0x1036 <dopisz_rekord+0x60>
    102a:	83 30       	cpi	r24, 0x03	; 3
    102c:	a1 f1       	breq	.+104    	; 0x1096 <dopisz_rekord+0xc0>
    102e:	84 30       	cpi	r24, 0x04	; 4
    1030:	09 f0       	breq	.+2      	; 0x1034 <dopisz_rekord+0x5e>
    1032:	60 c0       	rjmp	.+192    	; 0x10f4 <dopisz_rekord+0x11e>
    1034:	48 c0       	rjmp	.+144    	; 0x10c6 <dopisz_rekord+0xf0>
    {
      case 1:
         LCD_Clear();
    1036:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Clear>
         LCD_WriteText("Blad: nieudane");
    103a:	89 e5       	ldi	r24, 0x59	; 89
    103c:	91 e0       	ldi	r25, 0x01	; 1
    103e:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
         LCD_GoTo(0,1);
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	61 e0       	ldi	r22, 0x01	; 1
    1046:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_GoTo>
         LCD_WriteText("utworzenie pliku");
    104a:	88 e6       	ldi	r24, 0x68	; 104
    104c:	91 e0       	ldi	r25, 0x01	; 1
    104e:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
    1052:	80 e2       	ldi	r24, 0x20	; 32
    1054:	9e e4       	ldi	r25, 0x4E	; 78
    1056:	28 ec       	ldi	r18, 0xC8	; 200
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	f9 01       	movw	r30, r18
    105c:	31 97       	sbiw	r30, 0x01	; 1
    105e:	f1 f7       	brne	.-4      	; 0x105c <dopisz_rekord+0x86>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1060:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1062:	d9 f7       	brne	.-10     	; 0x105a <dopisz_rekord+0x84>
    1064:	08 95       	ret
		 _delay_ms(2000);
  		 break;

      case 2:
         LCD_Clear();
    1066:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Clear>
         LCD_WriteText("Blad:brak woln.");
    106a:	89 e7       	ldi	r24, 0x79	; 121
    106c:	91 e0       	ldi	r25, 0x01	; 1
    106e:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
         LCD_GoTo(0,1);
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	61 e0       	ldi	r22, 0x01	; 1
    1076:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_GoTo>
         LCD_WriteText("klastrow");
    107a:	89 e8       	ldi	r24, 0x89	; 137
    107c:	91 e0       	ldi	r25, 0x01	; 1
    107e:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
    1082:	80 e2       	ldi	r24, 0x20	; 32
    1084:	9e e4       	ldi	r25, 0x4E	; 78
    1086:	28 ec       	ldi	r18, 0xC8	; 200
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	f9 01       	movw	r30, r18
    108c:	31 97       	sbiw	r30, 0x01	; 1
    108e:	f1 f7       	brne	.-4      	; 0x108c <dopisz_rekord+0xb6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1090:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1092:	d9 f7       	brne	.-10     	; 0x108a <dopisz_rekord+0xb4>
    1094:	08 95       	ret
		 _delay_ms(2000);
  		 break;

      case 3:
         LCD_Clear();
    1096:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Clear>
         LCD_WriteText("Blad zapisu");
    109a:	82 e9       	ldi	r24, 0x92	; 146
    109c:	91 e0       	ldi	r25, 0x01	; 1
    109e:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
         LCD_GoTo(0,1);
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	61 e0       	ldi	r22, 0x01	; 1
    10a6:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_GoTo>
         LCD_WriteText("klastra");
    10aa:	8e e9       	ldi	r24, 0x9E	; 158
    10ac:	91 e0       	ldi	r25, 0x01	; 1
    10ae:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
    10b2:	80 e2       	ldi	r24, 0x20	; 32
    10b4:	9e e4       	ldi	r25, 0x4E	; 78
    10b6:	28 ec       	ldi	r18, 0xC8	; 200
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	f9 01       	movw	r30, r18
    10bc:	31 97       	sbiw	r30, 0x01	; 1
    10be:	f1 f7       	brne	.-4      	; 0x10bc <dopisz_rekord+0xe6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c2:	d9 f7       	brne	.-10     	; 0x10ba <dopisz_rekord+0xe4>
    10c4:	08 95       	ret
 		 _delay_ms(2000);
 		 break;

      case 4:
         LCD_Clear();
    10c6:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Clear>
         LCD_WriteText("Bledna nazwa");
    10ca:	86 ea       	ldi	r24, 0xA6	; 166
    10cc:	91 e0       	ldi	r25, 0x01	; 1
    10ce:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
         LCD_GoTo(0,1);
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	61 e0       	ldi	r22, 0x01	; 1
    10d6:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_GoTo>
         LCD_WriteText("pliku");
    10da:	83 eb       	ldi	r24, 0xB3	; 179
    10dc:	91 e0       	ldi	r25, 0x01	; 1
    10de:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
    10e2:	80 e2       	ldi	r24, 0x20	; 32
    10e4:	9e e4       	ldi	r25, 0x4E	; 78
    10e6:	28 ec       	ldi	r18, 0xC8	; 200
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	f9 01       	movw	r30, r18
    10ec:	31 97       	sbiw	r30, 0x01	; 1
    10ee:	f1 f7       	brne	.-4      	; 0x10ec <dopisz_rekord+0x116>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f2:	d9 f7       	brne	.-10     	; 0x10ea <dopisz_rekord+0x114>
    10f4:	08 95       	ret

000010f6 <zapisz_SD>:
//********************************************************
//*     Podprogram redagowania i zapisu rekordu na SD    *
//********************************************************
void zapisz_SD()
{
  czas_data_do_rekordu();
    10f6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <czas_data_do_rekordu>
  LCD_Clear();
    10fa:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Clear>
  LCD_WriteText("Zapis rekordu");
    10fe:	89 eb       	ldi	r24, 0xB9	; 185
    1100:	91 e0       	ldi	r25, 0x01	; 1
    1102:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
  LCD_GoTo(0,1);
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	61 e0       	ldi	r22, 0x01	; 1
    110a:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_GoTo>

  switch (we_wy)
    110e:	80 91 e2 04 	lds	r24, 0x04E2
    1112:	90 91 e3 04 	lds	r25, 0x04E3
    1116:	83 30       	cpi	r24, 0x03	; 3
    1118:	91 05       	cpc	r25, r1
    111a:	29 f1       	breq	.+74     	; 0x1166 <zapisz_SD+0x70>
    111c:	84 30       	cpi	r24, 0x04	; 4
    111e:	91 05       	cpc	r25, r1
    1120:	3c f4       	brge	.+14     	; 0x1130 <zapisz_SD+0x3a>
    1122:	81 30       	cpi	r24, 0x01	; 1
    1124:	91 05       	cpc	r25, r1
    1126:	69 f0       	breq	.+26     	; 0x1142 <zapisz_SD+0x4c>
    1128:	02 97       	sbiw	r24, 0x02	; 2
    112a:	09 f0       	breq	.+2      	; 0x112e <zapisz_SD+0x38>
    112c:	41 c0       	rjmp	.+130    	; 0x11b0 <zapisz_SD+0xba>
    112e:	12 c0       	rjmp	.+36     	; 0x1154 <zapisz_SD+0x5e>
    1130:	85 30       	cpi	r24, 0x05	; 5
    1132:	91 05       	cpc	r25, r1
    1134:	51 f1       	breq	.+84     	; 0x118a <zapisz_SD+0x94>
    1136:	85 30       	cpi	r24, 0x05	; 5
    1138:	91 05       	cpc	r25, r1
    113a:	f4 f0       	brlt	.+60     	; 0x1178 <zapisz_SD+0x82>
    113c:	06 97       	sbiw	r24, 0x06	; 6
    113e:	c1 f5       	brne	.+112    	; 0x11b0 <zapisz_SD+0xba>
    1140:	2d c0       	rjmp	.+90     	; 0x119c <zapisz_SD+0xa6>
  {
    case 1: //ustawiæ WE - wejœcie z zewn¹trz do mieszkania 
	  rekord[20]='W';
    1142:	87 e5       	ldi	r24, 0x57	; 87
    1144:	80 93 8a 02 	sts	0x028A, r24
	  rekord[21]='E';
    1148:	85 e4       	ldi	r24, 0x45	; 69
    114a:	80 93 8b 02 	sts	0x028B, r24
      LCD_WriteText("WE");
    114e:	87 ec       	ldi	r24, 0xC7	; 199
    1150:	91 e0       	ldi	r25, 0x01	; 1
    1152:	2c c0       	rjmp	.+88     	; 0x11ac <zapisz_SD+0xb6>
	  break;

    case 2: //ustawiæ WY - wyjœcie na zewn¹trz z mieszkania
	  rekord[20]='W';
    1154:	87 e5       	ldi	r24, 0x57	; 87
    1156:	80 93 8a 02 	sts	0x028A, r24
	  rekord[21]='Y';
    115a:	89 e5       	ldi	r24, 0x59	; 89
    115c:	80 93 8b 02 	sts	0x028B, r24
      LCD_WriteText("WY");
    1160:	8a ec       	ldi	r24, 0xCA	; 202
    1162:	91 e0       	ldi	r25, 0x01	; 1
    1164:	23 c0       	rjmp	.+70     	; 0x11ac <zapisz_SD+0xb6>
	  break;

    case 3: //ustawiæ OZ - otwarcie i zamkniêcie pary drzwi z zewn¹trz
	  rekord[20]='O';
    1166:	8f e4       	ldi	r24, 0x4F	; 79
    1168:	80 93 8a 02 	sts	0x028A, r24
	  rekord[21]='Z';
    116c:	8a e5       	ldi	r24, 0x5A	; 90
    116e:	80 93 8b 02 	sts	0x028B, r24
      LCD_WriteText("OZ");
    1172:	8d ec       	ldi	r24, 0xCD	; 205
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	1a c0       	rjmp	.+52     	; 0x11ac <zapisz_SD+0xb6>
	  break;

    case 4: //ustawiæ OW - otwarcie i zamkniêcie pary drzwi z wewn¹trz
	  rekord[20]='O';
    1178:	8f e4       	ldi	r24, 0x4F	; 79
    117a:	80 93 8a 02 	sts	0x028A, r24
	  rekord[21]='W';
    117e:	87 e5       	ldi	r24, 0x57	; 87
    1180:	80 93 8b 02 	sts	0x028B, r24
      LCD_WriteText("OW");
    1184:	80 ed       	ldi	r24, 0xD0	; 208
    1186:	91 e0       	ldi	r25, 0x01	; 1
    1188:	11 c0       	rjmp	.+34     	; 0x11ac <zapisz_SD+0xb6>
	  break;

    case 5: //ustawiæ OX - otwarcie i zamkniêcie tylko drzwi zewnêtrznych
	  rekord[20]='O';
    118a:	8f e4       	ldi	r24, 0x4F	; 79
    118c:	80 93 8a 02 	sts	0x028A, r24
	  rekord[21]='X';
    1190:	88 e5       	ldi	r24, 0x58	; 88
    1192:	80 93 8b 02 	sts	0x028B, r24
      LCD_WriteText("OX");
    1196:	83 ed       	ldi	r24, 0xD3	; 211
    1198:	91 e0       	ldi	r25, 0x01	; 1
    119a:	08 c0       	rjmp	.+16     	; 0x11ac <zapisz_SD+0xb6>
	  break;

    case 6: //ustawiæ OY - otwarcie i zamkniêcie tylko drzwi wewnêtrznych
	  rekord[20]='O';
    119c:	8f e4       	ldi	r24, 0x4F	; 79
    119e:	80 93 8a 02 	sts	0x028A, r24
	  rekord[21]='Y';
    11a2:	89 e5       	ldi	r24, 0x59	; 89
    11a4:	80 93 8b 02 	sts	0x028B, r24
      LCD_WriteText("OY");
    11a8:	86 ed       	ldi	r24, 0xD6	; 214
    11aa:	91 e0       	ldi	r25, 0x01	; 1
    11ac:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
	  break;
  }

  dopisz_rekord(rekord);
    11b0:	86 e7       	ldi	r24, 0x76	; 118
    11b2:	92 e0       	ldi	r25, 0x02	; 2
    11b4:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <dopisz_rekord>
    11b8:	80 e2       	ldi	r24, 0x20	; 32
    11ba:	9e e4       	ldi	r25, 0x4E	; 78
    11bc:	28 ec       	ldi	r18, 0xC8	; 200
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	f9 01       	movw	r30, r18
    11c2:	31 97       	sbiw	r30, 0x01	; 1
    11c4:	f1 f7       	brne	.-4      	; 0x11c2 <zapisz_SD+0xcc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c8:	d9 f7       	brne	.-10     	; 0x11c0 <zapisz_SD+0xca>

  _delay_ms(2000);

  we_wy=0;
    11ca:	10 92 e3 04 	sts	0x04E3, r1
    11ce:	10 92 e2 04 	sts	0x04E2, r1

//  beep_3();
}
    11d2:	08 95       	ret

000011d4 <spr_czy_zapis_rekordu>:
//********************************************************
//*  Podprogram sprawdzania czy zapisywaæ rekord na SD   *
//********************************************************
void spr_czy_zapis_rekordu()
{
  if (tryb_zapisu==1)
    11d4:	80 91 e0 04 	lds	r24, 0x04E0
    11d8:	90 91 e1 04 	lds	r25, 0x04E1
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	41 f4       	brne	.+16     	; 0x11f0 <spr_czy_zapis_rekordu+0x1c>
  {
     if (!(we_wy==0))
    11e0:	80 91 e2 04 	lds	r24, 0x04E2
    11e4:	90 91 e3 04 	lds	r25, 0x04E3
    11e8:	89 2b       	or	r24, r25
    11ea:	11 f0       	breq	.+4      	; 0x11f0 <spr_czy_zapis_rekordu+0x1c>
	 {
        zapisz_SD(); //zredagowanie i dopisanie rekordu do SD
    11ec:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <zapisz_SD>
    11f0:	08 95       	ret

000011f2 <inicjuj_SD>:

//********************************************************
//*             Podprogram inicjowania SD                *
//********************************************************
void inicjuj_SD()
{
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
  unsigned char error, FAT32_active;
  unsigned int i;
  cardType = 0;
    11f6:	10 92 df 04 	sts	0x04DF, r1
    11fa:	c0 e0       	ldi	r28, 0x00	; 0
    11fc:	d0 e0       	ldi	r29, 0x00	; 0
  for (i=0; i<10; i++)
  {
    error = SD_init();
    11fe:	0e 94 18 15 	call	0x2a30	; 0x2a30 <SD_init>
    if(!error) break;
    1202:	88 23       	and	r24, r24
    1204:	69 f1       	breq	.+90     	; 0x1260 <inicjuj_SD+0x6e>
void inicjuj_SD()
{
  unsigned char error, FAT32_active;
  unsigned int i;
  cardType = 0;
  for (i=0; i<10; i++)
    1206:	21 96       	adiw	r28, 0x01	; 1
    1208:	ca 30       	cpi	r28, 0x0A	; 10
    120a:	d1 05       	cpc	r29, r1
    120c:	c1 f7       	brne	.-16     	; 0x11fe <inicjuj_SD+0xc>
    if(!error) break;
  };

  if(error)
  {
    if(error == 1) 
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	69 f4       	brne	.+26     	; 0x122c <inicjuj_SD+0x3a>
    {
       LCD_Clear();
    1212:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Clear>
       LCD_WriteText("Blad!!!" );
    1216:	89 ed       	ldi	r24, 0xD9	; 217
    1218:	91 e0       	ldi	r25, 0x01	; 1
    121a:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
       LCD_GoTo(0,1);
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	61 e0       	ldi	r22, 0x01	; 1
    1222:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_GoTo>
       LCD_WriteText("Brak karty SD");
    1226:	81 ee       	ldi	r24, 0xE1	; 225
    1228:	91 e0       	ldi	r25, 0x01	; 1
    122a:	0e c0       	rjmp	.+28     	; 0x1248 <inicjuj_SD+0x56>
    };

    if(error == 2) 
    122c:	82 30       	cpi	r24, 0x02	; 2
    122e:	71 f4       	brne	.+28     	; 0x124c <inicjuj_SD+0x5a>
    {
       LCD_Clear();
    1230:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Clear>
       LCD_WriteText("Blad!!!");
    1234:	89 ed       	ldi	r24, 0xD9	; 217
    1236:	91 e0       	ldi	r25, 0x01	; 1
    1238:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
       LCD_GoTo(0,1);
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	61 e0       	ldi	r22, 0x01	; 1
    1240:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_GoTo>
       LCD_WriteText("Inicjalizacja");
    1244:	8f ee       	ldi	r24, 0xEF	; 239
    1246:	91 e0       	ldi	r25, 0x01	; 1
    1248:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
    124c:	80 e2       	ldi	r24, 0x20	; 32
    124e:	9e e4       	ldi	r25, 0x4E	; 78
    1250:	28 ec       	ldi	r18, 0xC8	; 200
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	f9 01       	movw	r30, r18
    1256:	31 97       	sbiw	r30, 0x01	; 1
    1258:	f1 f7       	brne	.-4      	; 0x1256 <inicjuj_SD+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    125a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    125c:	d9 f7       	brne	.-10     	; 0x1254 <inicjuj_SD+0x62>
    125e:	ff cf       	rjmp	.-2      	; 0x125e <inicjuj_SD+0x6c>
  _delay_ms(2000);

  while(1);  //wait here forever if error in SD init 
  }

  switch (cardType)
    1260:	80 91 df 04 	lds	r24, 0x04DF
    1264:	82 30       	cpi	r24, 0x02	; 2
    1266:	89 f0       	breq	.+34     	; 0x128a <inicjuj_SD+0x98>
    1268:	83 30       	cpi	r24, 0x03	; 3
    126a:	e1 f0       	breq	.+56     	; 0x12a4 <inicjuj_SD+0xb2>
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	39 f5       	brne	.+78     	; 0x12be <inicjuj_SD+0xcc>
  {
    case 1:
         LCD_Clear();
    1270:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Clear>
         LCD_WriteText("Karta SD typu");
    1274:	8d ef       	ldi	r24, 0xFD	; 253
    1276:	91 e0       	ldi	r25, 0x01	; 1
    1278:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
         LCD_GoTo(0,1);
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	61 e0       	ldi	r22, 0x01	; 1
    1280:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_GoTo>
         LCD_WriteText("ver. 1.x");
    1284:	8b e0       	ldi	r24, 0x0B	; 11
    1286:	92 e0       	ldi	r25, 0x02	; 2
    1288:	26 c0       	rjmp	.+76     	; 0x12d6 <inicjuj_SD+0xe4>
  		 break;
  case 2:
         LCD_Clear();
    128a:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Clear>
         LCD_WriteText("Karta typu");
    128e:	84 e1       	ldi	r24, 0x14	; 20
    1290:	92 e0       	ldi	r25, 0x02	; 2
    1292:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
         LCD_GoTo(0,1);
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	61 e0       	ldi	r22, 0x01	; 1
    129a:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_GoTo>
         LCD_WriteText("High SD Capacity");
    129e:	8f e1       	ldi	r24, 0x1F	; 31
    12a0:	92 e0       	ldi	r25, 0x02	; 2
    12a2:	19 c0       	rjmp	.+50     	; 0x12d6 <inicjuj_SD+0xe4>
  		 break;
  case 3:
         LCD_Clear();
    12a4:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Clear>
         LCD_WriteText("Karta SD typu");
    12a8:	8d ef       	ldi	r24, 0xFD	; 253
    12aa:	91 e0       	ldi	r25, 0x01	; 1
    12ac:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
         LCD_GoTo(0,1);
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	61 e0       	ldi	r22, 0x01	; 1
    12b4:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_GoTo>
         LCD_WriteText("ver. 2.x");
    12b8:	80 e3       	ldi	r24, 0x30	; 48
    12ba:	92 e0       	ldi	r25, 0x02	; 2
    12bc:	0c c0       	rjmp	.+24     	; 0x12d6 <inicjuj_SD+0xe4>
  		 break;
  default:
         LCD_Clear();
    12be:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Clear>
         LCD_WriteText("Karta SD typu");
    12c2:	8d ef       	ldi	r24, 0xFD	; 253
    12c4:	91 e0       	ldi	r25, 0x01	; 1
    12c6:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
         LCD_GoTo(0,1);
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	61 e0       	ldi	r22, 0x01	; 1
    12ce:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_GoTo>
         LCD_WriteText("nieznanego");
    12d2:	89 e3       	ldi	r24, 0x39	; 57
    12d4:	92 e0       	ldi	r25, 0x02	; 2
    12d6:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
    12da:	80 e2       	ldi	r24, 0x20	; 32
    12dc:	9e e4       	ldi	r25, 0x4E	; 78
    12de:	28 ec       	ldi	r18, 0xC8	; 200
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	f9 01       	movw	r30, r18
    12e4:	31 97       	sbiw	r30, 0x01	; 1
    12e6:	f1 f7       	brne	.-4      	; 0x12e4 <inicjuj_SD+0xf2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ea:	d9 f7       	brne	.-10     	; 0x12e2 <inicjuj_SD+0xf0>
  		 break; 
  }
  _delay_ms(2000);

  SPI_HIGH_SPEED;	//SCK - 4 MHz
    12ec:	80 e5       	ldi	r24, 0x50	; 80
    12ee:	8d b9       	out	0x0d, r24	; 13
    12f0:	70 9a       	sbi	0x0e, 0	; 14
    12f2:	80 ed       	ldi	r24, 0xD0	; 208
    12f4:	97 e0       	ldi	r25, 0x07	; 7
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	f1 f7       	brne	.-4      	; 0x12f6 <inicjuj_SD+0x104>
  _delay_ms(1);   //some delay

//=================
  FAT32_active = 1;
  error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    12fa:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <getBootSectorData>
  if(error) 	
    12fe:	88 23       	and	r24, r24
    1300:	71 f0       	breq	.+28     	; 0x131e <inicjuj_SD+0x12c>
  {
    LCD_Clear();
    1302:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Clear>
    LCD_WriteText("Blad partycji.");
    1306:	84 e4       	ldi	r24, 0x44	; 68
    1308:	92 e0       	ldi	r25, 0x02	; 2
    130a:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
    LCD_GoTo(0,1);
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	61 e0       	ldi	r22, 0x01	; 1
    1312:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_GoTo>
    LCD_WriteText("Brak FAT32!");
    1316:	83 e5       	ldi	r24, 0x53	; 83
    1318:	92 e0       	ldi	r25, 0x02	; 2
    131a:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WriteText>
    FAT32_active = 0;
  };

}
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	08 95       	ret

00001324 <init_devices>:
//***********************************************************
//*     Podprogram inicjowania wszystkich peryferalow       *
//***********************************************************
void init_devices(void)
{
  cli();  //all interrupts disabled
    1324:	f8 94       	cli
  port_init();
    1326:	0e 94 7e 02 	call	0x4fc	; 0x4fc <port_init>
  spi_init();
    132a:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <spi_init>

  MCUCR = 0x00;
    132e:	15 be       	out	0x35, r1	; 53
  GICR  = 0x00;
    1330:	1b be       	out	0x3b, r1	; 59
  TIMSK = 0x00; //timer interrupt sources
    1332:	19 be       	out	0x39, r1	; 57
  sbi(PORTD,1);     // "podci¹gnij" do logicznej 1 liniê PD1 (cz.d.z.)
    1334:	91 9a       	sbi	0x12, 1	; 18
  sbi(PORTD,2);     // "podci¹gnij" do logicznej 1 liniê PD2 (cz.d.w.)
    1336:	92 9a       	sbi	0x12, 2	; 18

  sbi(PORTA,3);     // "podci¹gnij" do logicznej 1 liniê PA3 (S3)
    1338:	db 9a       	sbi	0x1b, 3	; 27
  sbi(PORTA,4);     // "podci¹gnij" do logicznej 1 liniê PA4 (S2)
    133a:	dc 9a       	sbi	0x1b, 4	; 27
  sbi(PORTA,5);     // "podci¹gnij" do logicznej 1 liniê PA5 (S1)
    133c:	dd 9a       	sbi	0x1b, 5	; 27

  LCD_Initalize();  //inicjowanie LCD
    133e:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_Initalize>
    1342:	80 ed       	ldi	r24, 0xD0	; 208
    1344:	97 e0       	ldi	r25, 0x07	; 7
    1346:	28 ec       	ldi	r18, 0xC8	; 200
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	f9 01       	movw	r30, r18
    134c:	31 97       	sbiw	r30, 0x01	; 1
    134e:	f1 f7       	brne	.-4      	; 0x134c <init_devices+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1350:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1352:	d9 f7       	brne	.-10     	; 0x134a <init_devices+0x26>

  _delay_ms(200);

}
    1354:	08 95       	ret

00001356 <main>:

//========================================================
//=====              Pocz¹tek programu               =====
//========================================================
int main(void)
{
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
  init_devices(); 	//inicjowanie peryfera³ów
    135a:	0e 94 92 09 	call	0x1324	; 0x1324 <init_devices>
  inicjuj_SD();
    135e:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <inicjuj_SD>

  beep_3();
    1362:	0e 94 9a 02 	call	0x534	; 0x534 <beep_3>

  PCF8563_init();	// inicjowanie ukladu PCF8563
    1366:	0e 94 c2 01 	call	0x384	; 0x384 <PCF8563_init>

  tryb_zapisu=1;  
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	90 93 e1 04 	sts	0x04E1, r25
    1372:	80 93 e0 04 	sts	0x04E0, r24
    1376:	c8 ec       	ldi	r28, 0xC8	; 200
    1378:	d0 e0       	ldi	r29, 0x00	; 0

  while(1)
  {
	if (!(zmiana==0))
    137a:	80 91 74 02 	lds	r24, 0x0274
    137e:	90 91 75 02 	lds	r25, 0x0275
    1382:	89 2b       	or	r24, r25
    1384:	a9 f0       	breq	.+42     	; 0x13b0 <main+0x5a>
	{ 
	  zmiana=0;
    1386:	10 92 75 02 	sts	0x0275, r1
    138a:	10 92 74 02 	sts	0x0274, r1
      PCF8563_set_time(godzina,minuta,0);
    138e:	80 91 de 04 	lds	r24, 0x04DE
    1392:	60 91 c2 02 	lds	r22, 0x02C2
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	0e 94 15 02 	call	0x42a	; 0x42a <PCF8563_set_time>
	  PCF8563_set_date(dzien,miesiac,rok);
    139c:	80 91 fe 04 	lds	r24, 0x04FE
    13a0:	60 91 dd 04 	lds	r22, 0x04DD
    13a4:	40 91 e5 04 	lds	r20, 0x04E5
    13a8:	0e 94 64 02 	call	0x4c8	; 0x4c8 <PCF8563_set_date>
	  beep_3();
    13ac:	0e 94 9a 02 	call	0x534	; 0x534 <beep_3>
	};

    if(!(PINA & 0x08)) // przycisk S3
    13b0:	cb 99       	sbic	0x19, 3	; 25
    13b2:	11 c0       	rjmp	.+34     	; 0x13d6 <main+0x80>
     {  
	    beep();
    13b4:	0e 94 8b 02 	call	0x516	; 0x516 <beep>
        while(!(PINA & 0x08)) {}; //czekanie na puszczenie klawisza
    13b8:	cb 9b       	sbis	0x19, 3	; 25
    13ba:	fe cf       	rjmp	.-4      	; 0x13b8 <main+0x62>
    13bc:	84 ef       	ldi	r24, 0xF4	; 244
    13be:	91 e0       	ldi	r25, 0x01	; 1
    13c0:	fe 01       	movw	r30, r28
    13c2:	31 97       	sbiw	r30, 0x01	; 1
    13c4:	f1 f7       	brne	.-4      	; 0x13c2 <main+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c8:	d9 f7       	brne	.-10     	; 0x13c0 <main+0x6a>
        _delay_ms(50);
		tryb_ustawiania=0; //rok
    13ca:	10 92 f8 04 	sts	0x04F8, r1
    13ce:	10 92 f7 04 	sts	0x04F7, r1
	    ust_zegara();
    13d2:	0e 94 23 06 	call	0xc46	; 0xc46 <ust_zegara>
     };

    if(!(PINA & 0x10)) // przycisk S2
    13d6:	cc 99       	sbic	0x19, 4	; 25
    13d8:	0d c0       	rjmp	.+26     	; 0x13f4 <main+0x9e>
     {  
	    beep();
    13da:	0e 94 8b 02 	call	0x516	; 0x516 <beep>
        while(!(PINA & 0x10)) {}; //czekanie na puszczenie klawisza
    13de:	cc 9b       	sbis	0x19, 4	; 25
    13e0:	fe cf       	rjmp	.-4      	; 0x13de <main+0x88>
    13e2:	84 ef       	ldi	r24, 0xF4	; 244
    13e4:	91 e0       	ldi	r25, 0x01	; 1
    13e6:	fe 01       	movw	r30, r28
    13e8:	31 97       	sbiw	r30, 0x01	; 1
    13ea:	f1 f7       	brne	.-4      	; 0x13e8 <main+0x92>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ee:	d9 f7       	brne	.-10     	; 0x13e6 <main+0x90>
        _delay_ms(50);
	    ust_zapisu();
    13f0:	0e 94 e5 05 	call	0xbca	; 0xbca <ust_zapisu>
     };

    if(zmiana==0)
    13f4:	80 91 74 02 	lds	r24, 0x0274
    13f8:	90 91 75 02 	lds	r25, 0x0275
    13fc:	89 2b       	or	r24, r25
    13fe:	11 f4       	brne	.+4      	; 0x1404 <main+0xae>
	{
       obsluga_PCF8563();    //wyœwietlanie czasu GG:MM:SS i daty DD/MM/ROK na LCD
    1400:	0e 94 bd 04 	call	0x97a	; 0x97a <obsluga_PCF8563>
    };
    sprawdzenie_drzwi();
    1404:	0e 94 b3 02 	call	0x566	; 0x566 <sprawdzenie_drzwi>
    spr_czy_zapis_rekordu();
    1408:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <spr_czy_zapis_rekordu>
    140c:	b6 cf       	rjmp	.-148    	; 0x137a <main+0x24>

0000140e <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
    140e:	ef 92       	push	r14
    1410:	ff 92       	push	r15
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1416:	20 91 c7 04 	lds	r18, 0x04C7
    141a:	30 91 c8 04 	lds	r19, 0x04C8
    141e:	e0 90 a9 02 	lds	r14, 0x02A9
    1422:	f0 90 aa 02 	lds	r15, 0x02AA
    1426:	00 91 ab 02 	lds	r16, 0x02AB
    142a:	10 91 ac 02 	lds	r17, 0x02AC
    142e:	62 50       	subi	r22, 0x02	; 2
    1430:	70 40       	sbci	r23, 0x00	; 0
    1432:	80 40       	sbci	r24, 0x00	; 0
    1434:	90 40       	sbci	r25, 0x00	; 0
    1436:	40 e0       	ldi	r20, 0x00	; 0
    1438:	50 e0       	ldi	r21, 0x00	; 0
    143a:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <__mulsi3>
    143e:	9b 01       	movw	r18, r22
    1440:	ac 01       	movw	r20, r24
    1442:	2e 0d       	add	r18, r14
    1444:	3f 1d       	adc	r19, r15
    1446:	40 1f       	adc	r20, r16
    1448:	51 1f       	adc	r21, r17
}
    144a:	b9 01       	movw	r22, r18
    144c:	ca 01       	movw	r24, r20
    144e:	1f 91       	pop	r17
    1450:	0f 91       	pop	r16
    1452:	ff 90       	pop	r15
    1454:	ef 90       	pop	r14
    1456:	08 95       	ret

00001458 <convertFileName>:
//Funkcja: do zamiany na normaln¹ krótk¹ nazwê pliku w FAT 
//Arguments: pointer do nazwy pliku
//Zwraca: gdy poprawnie 0, w przeciwnym razie 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	2b 97       	sbiw	r28, 0x0b	; 11
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	8c 01       	movw	r16, r24
    1472:	58 2f       	mov	r21, r24
    1474:	a1 2f       	mov	r26, r17
    1476:	fc 01       	movw	r30, r24
    1478:	40 e0       	ldi	r20, 0x00	; 0
  unsigned char fileNameFAT[11];
  unsigned char j, k;

  for(j=0; j<12; j++)  //sprawdzanie struktury nazwy xxxxxxxx.yyy
    if(fileName[j] == '.') break;
    147a:	80 81       	ld	r24, Z
    147c:	8e 32       	cpi	r24, 0x2E	; 46
    147e:	19 f4       	brne	.+6      	; 0x1486 <convertFileName+0x2e>

  if(j>8) 
    1480:	49 30       	cpi	r20, 0x09	; 9
    1482:	30 f0       	brcs	.+12     	; 0x1490 <convertFileName+0x38>
    1484:	61 c0       	rjmp	.+194    	; 0x1548 <convertFileName+0xf0>
unsigned char convertFileName (unsigned char *fileName)
{
  unsigned char fileNameFAT[11];
  unsigned char j, k;

  for(j=0; j<12; j++)  //sprawdzanie struktury nazwy xxxxxxxx.yyy
    1486:	4f 5f       	subi	r20, 0xFF	; 255
    1488:	31 96       	adiw	r30, 0x01	; 1
    148a:	4c 30       	cpi	r20, 0x0C	; 12
    148c:	b1 f7       	brne	.-20     	; 0x147a <convertFileName+0x22>
    148e:	5c c0       	rjmp	.+184    	; 0x1548 <convertFileName+0xf0>
    1490:	be 01       	movw	r22, r28
    1492:	6f 5f       	subi	r22, 0xFF	; 255
    1494:	7f 4f       	sbci	r23, 0xFF	; 255
    1496:	85 2f       	mov	r24, r21
    1498:	9a 2f       	mov	r25, r26
    149a:	9c 01       	movw	r18, r24
    149c:	f9 01       	movw	r30, r18
    149e:	db 01       	movw	r26, r22
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <convertFileName+0x4e>
//    transmitString_F(PSTR("Invalid fileName..")); 
    return 1;  //b³êdna nazwa - za d³ugi pierwszy cz³on
  }

  for(k=0; k<j; k++) //przeniesienie do fileNameFAT pierwszego cz³ona nazwy
    fileNameFAT[k] = fileName[k];
    14a2:	81 91       	ld	r24, Z+
    14a4:	8d 93       	st	X+, r24
  {
//    transmitString_F(PSTR("Invalid fileName..")); 
    return 1;  //b³êdna nazwa - za d³ugi pierwszy cz³on
  }

  for(k=0; k<j; k++) //przeniesienie do fileNameFAT pierwszego cz³ona nazwy
    14a6:	8e 2f       	mov	r24, r30
    14a8:	85 1b       	sub	r24, r21
    14aa:	84 17       	cp	r24, r20
    14ac:	d0 f3       	brcs	.-12     	; 0x14a2 <convertFileName+0x4a>
    14ae:	84 2f       	mov	r24, r20
    fileNameFAT[k] = fileName[k];

  for(k=j; k<=7; k++) //dope³nienie nazwy spacjami, gdy nazwa krótsza
    fileNameFAT[k] = ' ';
    14b0:	9e 01       	movw	r18, r28
    14b2:	2f 5f       	subi	r18, 0xFF	; 255
    14b4:	3f 4f       	sbci	r19, 0xFF	; 255
    14b6:	90 e2       	ldi	r25, 0x20	; 32
    14b8:	05 c0       	rjmp	.+10     	; 0x14c4 <convertFileName+0x6c>
    14ba:	f9 01       	movw	r30, r18
    14bc:	e8 0f       	add	r30, r24
    14be:	f1 1d       	adc	r31, r1
    14c0:	90 83       	st	Z, r25
  }

  for(k=0; k<j; k++) //przeniesienie do fileNameFAT pierwszego cz³ona nazwy
    fileNameFAT[k] = fileName[k];

  for(k=j; k<=7; k++) //dope³nienie nazwy spacjami, gdy nazwa krótsza
    14c2:	8f 5f       	subi	r24, 0xFF	; 255
    14c4:	88 30       	cpi	r24, 0x08	; 8
    14c6:	c9 f7       	brne	.-14     	; 0x14ba <convertFileName+0x62>
    fileNameFAT[k] = ' ';

  j++;
    14c8:	24 2f       	mov	r18, r20
    14ca:	2f 5f       	subi	r18, 0xFF	; 255
  {
    if(fileName[j] != 0)
      fileNameFAT[k] = fileName[j++];
    else 	//dope³nienie nazwy rozszerzenia pliku spacjami
      while(k<11)
        fileNameFAT[k++] = ' ';
    14cc:	ae 01       	movw	r20, r28
    14ce:	4f 5f       	subi	r20, 0xFF	; 255
    14d0:	5f 4f       	sbci	r21, 0xFF	; 255
    14d2:	30 e2       	ldi	r19, 0x20	; 32
    fileNameFAT[k] = ' ';

  j++;
  for(k=8; k<11; k++) //ustawienie nazwy rozszerzenia pliku
  {
    if(fileName[j] != 0)
    14d4:	f8 01       	movw	r30, r16
    14d6:	e2 0f       	add	r30, r18
    14d8:	f1 1d       	adc	r31, r1
    14da:	90 81       	ld	r25, Z
    14dc:	99 23       	and	r25, r25
    14de:	59 f0       	breq	.+22     	; 0x14f6 <convertFileName+0x9e>
      fileNameFAT[k] = fileName[j++];
    14e0:	fa 01       	movw	r30, r20
    14e2:	e8 0f       	add	r30, r24
    14e4:	f1 1d       	adc	r31, r1
    14e6:	90 83       	st	Z, r25
    14e8:	2f 5f       	subi	r18, 0xFF	; 255
    14ea:	07 c0       	rjmp	.+14     	; 0x14fa <convertFileName+0xa2>
    else 	//dope³nienie nazwy rozszerzenia pliku spacjami
      while(k<11)
        fileNameFAT[k++] = ' ';
    14ec:	fa 01       	movw	r30, r20
    14ee:	e8 0f       	add	r30, r24
    14f0:	f1 1d       	adc	r31, r1
    14f2:	30 83       	st	Z, r19
    14f4:	8f 5f       	subi	r24, 0xFF	; 255
  for(k=8; k<11; k++) //ustawienie nazwy rozszerzenia pliku
  {
    if(fileName[j] != 0)
      fileNameFAT[k] = fileName[j++];
    else 	//dope³nienie nazwy rozszerzenia pliku spacjami
      while(k<11)
    14f6:	8b 30       	cpi	r24, 0x0B	; 11
    14f8:	c8 f3       	brcs	.-14     	; 0x14ec <convertFileName+0x94>

  for(k=j; k<=7; k++) //dope³nienie nazwy spacjami, gdy nazwa krótsza
    fileNameFAT[k] = ' ';

  j++;
  for(k=8; k<11; k++) //ustawienie nazwy rozszerzenia pliku
    14fa:	8f 5f       	subi	r24, 0xFF	; 255
    14fc:	8b 30       	cpi	r24, 0x0B	; 11
    14fe:	50 f3       	brcs	.-44     	; 0x14d4 <convertFileName+0x7c>
    else 	//dope³nienie nazwy rozszerzenia pliku spacjami
      while(k<11)
        fileNameFAT[k++] = ' ';
  }

  for(j=0; j<11; j++) //zamiana ma³ych liter w nazwie na du¿e litery
    1500:	9e 01       	movw	r18, r28
    1502:	24 5f       	subi	r18, 0xF4	; 244
    1504:	3f 4f       	sbci	r19, 0xFF	; 255
    if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    1506:	fb 01       	movw	r30, r22
    1508:	90 81       	ld	r25, Z
    150a:	89 2f       	mov	r24, r25
    150c:	81 56       	subi	r24, 0x61	; 97
    150e:	8a 31       	cpi	r24, 0x1A	; 26
    1510:	10 f4       	brcc	.+4      	; 0x1516 <convertFileName+0xbe>
      fileNameFAT[j] -= 0x20;
    1512:	90 52       	subi	r25, 0x20	; 32
    1514:	90 83       	st	Z, r25
    1516:	6f 5f       	subi	r22, 0xFF	; 255
    1518:	7f 4f       	sbci	r23, 0xFF	; 255
    else 	//dope³nienie nazwy rozszerzenia pliku spacjami
      while(k<11)
        fileNameFAT[k++] = ' ';
  }

  for(j=0; j<11; j++) //zamiana ma³ych liter w nazwie na du¿e litery
    151a:	62 17       	cp	r22, r18
    151c:	73 07       	cpc	r23, r19
    151e:	99 f7       	brne	.-26     	; 0x1506 <convertFileName+0xae>
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
      fileNameFAT[j] -= 0x20;

  for(j=0; j<11; j++)  //niszczy pierwotn¹ nazwê pliku!!!!
    fileName[j] = fileNameFAT[j]; 
    1524:	ae 01       	movw	r20, r28
    1526:	4f 5f       	subi	r20, 0xFF	; 255
    1528:	5f 4f       	sbci	r21, 0xFF	; 255
    152a:	f8 01       	movw	r30, r16
    152c:	e2 0f       	add	r30, r18
    152e:	f3 1f       	adc	r31, r19
    1530:	da 01       	movw	r26, r20
    1532:	a2 0f       	add	r26, r18
    1534:	b3 1f       	adc	r27, r19
    1536:	8c 91       	ld	r24, X
    1538:	80 83       	st	Z, r24
    153a:	2f 5f       	subi	r18, 0xFF	; 255
    153c:	3f 4f       	sbci	r19, 0xFF	; 255

  for(j=0; j<11; j++) //zamiana ma³ych liter w nazwie na du¿e litery
    if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
      fileNameFAT[j] -= 0x20;

  for(j=0; j<11; j++)  //niszczy pierwotn¹ nazwê pliku!!!!
    153e:	2b 30       	cpi	r18, 0x0B	; 11
    1540:	31 05       	cpc	r19, r1
    1542:	99 f7       	brne	.-26     	; 0x152a <convertFileName+0xd2>
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	01 c0       	rjmp	.+2      	; 0x154a <convertFileName+0xf2>
    1548:	81 e0       	ldi	r24, 0x01	; 1
    fileName[j] = fileNameFAT[j]; 

  return 0;
}
    154a:	2b 96       	adiw	r28, 0x0b	; 11
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	1f 91       	pop	r17
    155c:	0f 91       	pop	r16
    155e:	08 95       	ret

00001560 <displayMemory>:
//Arguments: 1. unsigned char flag. If flag is HIGH, memory will be displayed in KBytes, else in Bytes. 
//			 2. unsigned long memory value
//return: none
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
    1560:	1f 93       	push	r17
    1562:	1c e0       	ldi	r17, 0x0C	; 12
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
    1564:	15 30       	cpi	r17, 0x05	; 5
    1566:	11 f0       	breq	.+4      	; 0x156c <displayMemory+0xc>
    1568:	19 30       	cpi	r17, 0x09	; 9
    156a:	09 f4       	brne	.+2      	; 0x156e <displayMemory+0xe>
	{
	   memoryString[i-1] = ',';  
	   i--;
    156c:	11 50       	subi	r17, 0x01	; 1
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    memory /= 10;
    156e:	cb 01       	movw	r24, r22
    1570:	ba 01       	movw	r22, r20
    1572:	2a e0       	ldi	r18, 0x0A	; 10
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	40 e0       	ldi	r20, 0x00	; 0
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <__udivmodsi4>
    157e:	c9 01       	movw	r24, r18
    1580:	da 01       	movw	r26, r20
    1582:	ac 01       	movw	r20, r24
    1584:	bd 01       	movw	r22, r26
	if(memory == 0) break;
    1586:	41 15       	cp	r20, r1
    1588:	51 05       	cpc	r21, r1
    158a:	61 05       	cpc	r22, r1
    158c:	71 05       	cpc	r23, r1
    158e:	11 f0       	breq	.+4      	; 0x1594 <displayMemory+0x34>
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
    1590:	11 50       	subi	r17, 0x01	; 1
    1592:	41 f7       	brne	.-48     	; 0x1564 <displayMemory+0x4>
    memory /= 10;
	if(memory == 0) break;
  }
  if(flag == HIGH)  memoryString[13] = 'K';
//  transmitString(memoryString);
}
    1594:	1f 91       	pop	r17
    1596:	08 95       	ret

00001598 <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
    1598:	6f 92       	push	r6
    159a:	7f 92       	push	r7
    159c:	8f 92       	push	r8
    159e:	9f 92       	push	r9
    15a0:	af 92       	push	r10
    15a2:	bf 92       	push	r11
    15a4:	cf 92       	push	r12
    15a6:	df 92       	push	r13
    15a8:	ef 92       	push	r14
    15aa:	ff 92       	push	r15
    15ac:	0f 93       	push	r16
    15ae:	1f 93       	push	r17
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    15b0:	60 78       	andi	r22, 0x80	; 128
    15b2:	3b 01       	movw	r6, r22
    15b4:	4c 01       	movw	r8, r24
    15b6:	22 e0       	ldi	r18, 0x02	; 2
    15b8:	66 0c       	add	r6, r6
    15ba:	77 1c       	adc	r7, r7
    15bc:	88 1c       	adc	r8, r8
    15be:	99 1c       	adc	r9, r9
    15c0:	2a 95       	dec	r18
    15c2:	d1 f7       	brne	.-12     	; 0x15b8 <searchNextFreeCluster+0x20>
    15c4:	5b 01       	movw	r10, r22
    15c6:	6c 01       	movw	r12, r24
    15c8:	50 c0       	rjmp	.+160    	; 0x166a <searchNextFreeCluster+0xd2>
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
    15ca:	e0 90 d4 04 	lds	r14, 0x04D4
    15ce:	f0 90 d5 04 	lds	r15, 0x04D5
    15d2:	20 91 b1 02 	lds	r18, 0x02B1
    15d6:	30 91 b2 02 	lds	r19, 0x02B2
      SD_readSingleBlock(sector);
    15da:	00 e0       	ldi	r16, 0x00	; 0
    15dc:	10 e0       	ldi	r17, 0x00	; 0
    15de:	80 91 cb 04 	lds	r24, 0x04CB
    15e2:	90 91 cc 04 	lds	r25, 0x04CC
    15e6:	a0 91 cd 04 	lds	r26, 0x04CD
    15ea:	b0 91 ce 04 	lds	r27, 0x04CE
    15ee:	e8 0e       	add	r14, r24
    15f0:	f9 1e       	adc	r15, r25
    15f2:	0a 1f       	adc	r16, r26
    15f4:	1b 1f       	adc	r17, r27
    15f6:	40 e0       	ldi	r20, 0x00	; 0
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	c4 01       	movw	r24, r8
    15fc:	b3 01       	movw	r22, r6
    15fe:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <__udivmodsi4>
    1602:	e2 0e       	add	r14, r18
    1604:	f3 1e       	adc	r15, r19
    1606:	04 1f       	adc	r16, r20
    1608:	15 1f       	adc	r17, r21
    160a:	c8 01       	movw	r24, r16
    160c:	b7 01       	movw	r22, r14
    160e:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <SD_readSingleBlock>
    1612:	60 e0       	ldi	r22, 0x00	; 0
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
    1614:	e6 2f       	mov	r30, r22
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	ee 0f       	add	r30, r30
    161a:	ff 1f       	adc	r31, r31
    161c:	ee 0f       	add	r30, r30
    161e:	ff 1f       	adc	r31, r31
    1620:	e9 53       	subi	r30, 0x39	; 57
    1622:	fd 4f       	sbci	r31, 0xFD	; 253
    1624:	80 81       	ld	r24, Z
    1626:	91 81       	ldd	r25, Z+1	; 0x01
    1628:	a2 81       	ldd	r26, Z+2	; 0x02
    162a:	b3 81       	ldd	r27, Z+3	; 0x03
    162c:	bf 70       	andi	r27, 0x0F	; 15
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	a1 05       	cpc	r26, r1
    1632:	b1 05       	cpc	r27, r1
    1634:	39 f4       	brne	.+14     	; 0x1644 <searchNextFreeCluster+0xac>
            return(cluster+i);
    1636:	a6 01       	movw	r20, r12
    1638:	95 01       	movw	r18, r10
    163a:	26 0f       	add	r18, r22
    163c:	31 1d       	adc	r19, r1
    163e:	41 1d       	adc	r20, r1
    1640:	51 1d       	adc	r21, r1
    1642:	25 c0       	rjmp	.+74     	; 0x168e <searchNextFreeCluster+0xf6>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
    1644:	6f 5f       	subi	r22, 0xFF	; 255
    1646:	60 38       	cpi	r22, 0x80	; 128
    1648:	29 f7       	brne	.-54     	; 0x1614 <searchNextFreeCluster+0x7c>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    164a:	80 e8       	ldi	r24, 0x80	; 128
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	a0 e0       	ldi	r26, 0x00	; 0
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	a8 0e       	add	r10, r24
    1654:	b9 1e       	adc	r11, r25
    1656:	ca 1e       	adc	r12, r26
    1658:	db 1e       	adc	r13, r27
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	92 e0       	ldi	r25, 0x02	; 2
    165e:	a0 e0       	ldi	r26, 0x00	; 0
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	68 0e       	add	r6, r24
    1664:	79 1e       	adc	r7, r25
    1666:	8a 1e       	adc	r8, r26
    1668:	9b 1e       	adc	r9, r27
    166a:	80 91 b4 02 	lds	r24, 0x02B4
    166e:	90 91 b5 02 	lds	r25, 0x02B5
    1672:	a0 91 b6 02 	lds	r26, 0x02B6
    1676:	b0 91 b7 02 	lds	r27, 0x02B7
    167a:	a8 16       	cp	r10, r24
    167c:	b9 06       	cpc	r11, r25
    167e:	ca 06       	cpc	r12, r26
    1680:	db 06       	cpc	r13, r27
    1682:	08 f4       	brcc	.+2      	; 0x1686 <searchNextFreeCluster+0xee>
    1684:	a2 cf       	rjmp	.-188    	; 0x15ca <searchNextFreeCluster+0x32>
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e0       	ldi	r20, 0x00	; 0
    168c:	50 e0       	ldi	r21, 0x00	; 0
            return(cluster+i);
      }  
    } 

 return 0;
}
    168e:	b9 01       	movw	r22, r18
    1690:	ca 01       	movw	r24, r20
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	ff 90       	pop	r15
    1698:	ef 90       	pop	r14
    169a:	df 90       	pop	r13
    169c:	cf 90       	pop	r12
    169e:	bf 90       	pop	r11
    16a0:	af 90       	pop	r10
    16a2:	9f 90       	pop	r9
    16a4:	8f 90       	pop	r8
    16a6:	7f 90       	pop	r7
    16a8:	6f 90       	pop	r6
    16aa:	08 95       	ret

000016ac <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
    16ac:	cf 92       	push	r12
    16ae:	df 92       	push	r13
    16b0:	ef 92       	push	r14
    16b2:	ff 92       	push	r15
    16b4:	0f 93       	push	r16
    16b6:	1f 93       	push	r17
    16b8:	d8 2e       	mov	r13, r24
    16ba:	c6 2e       	mov	r12, r22
    16bc:	79 01       	movw	r14, r18
    16be:	8a 01       	movw	r16, r20
  struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
  unsigned char error;

  SD_readSingleBlock(unusedSectors + 1);
    16c0:	60 91 cb 04 	lds	r22, 0x04CB
    16c4:	70 91 cc 04 	lds	r23, 0x04CC
    16c8:	80 91 cd 04 	lds	r24, 0x04CD
    16cc:	90 91 ce 04 	lds	r25, 0x04CE
    16d0:	6f 5f       	subi	r22, 0xFF	; 255
    16d2:	7f 4f       	sbci	r23, 0xFF	; 255
    16d4:	8f 4f       	sbci	r24, 0xFF	; 255
    16d6:	9f 4f       	sbci	r25, 0xFF	; 255
    16d8:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <SD_readSingleBlock>

  if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
    16dc:	80 91 c7 02 	lds	r24, 0x02C7
    16e0:	90 91 c8 02 	lds	r25, 0x02C8
    16e4:	a0 91 c9 02 	lds	r26, 0x02C9
    16e8:	b0 91 ca 02 	lds	r27, 0x02CA
    16ec:	82 55       	subi	r24, 0x52	; 82
    16ee:	92 45       	sbci	r25, 0x52	; 82
    16f0:	a1 46       	sbci	r26, 0x61	; 97
    16f2:	b1 44       	sbci	r27, 0x41	; 65
    16f4:	09 f0       	breq	.+2      	; 0x16f8 <getSetFreeCluster+0x4c>
    16f6:	54 c0       	rjmp	.+168    	; 0x17a0 <getSetFreeCluster+0xf4>
    16f8:	80 91 ab 04 	lds	r24, 0x04AB
    16fc:	90 91 ac 04 	lds	r25, 0x04AC
    1700:	a0 91 ad 04 	lds	r26, 0x04AD
    1704:	b0 91 ae 04 	lds	r27, 0x04AE
    1708:	82 57       	subi	r24, 0x72	; 114
    170a:	92 47       	sbci	r25, 0x72	; 114
    170c:	a1 44       	sbci	r26, 0x41	; 65
    170e:	b1 46       	sbci	r27, 0x61	; 97
    1710:	09 f0       	breq	.+2      	; 0x1714 <getSetFreeCluster+0x68>
    1712:	46 c0       	rjmp	.+140    	; 0x17a0 <getSetFreeCluster+0xf4>
    1714:	80 91 c3 04 	lds	r24, 0x04C3
    1718:	90 91 c4 04 	lds	r25, 0x04C4
    171c:	a0 91 c5 04 	lds	r26, 0x04C5
    1720:	b0 91 c6 04 	lds	r27, 0x04C6
    1724:	80 50       	subi	r24, 0x00	; 0
    1726:	90 40       	sbci	r25, 0x00	; 0
    1728:	a5 45       	sbci	r26, 0x55	; 85
    172a:	ba 4a       	sbci	r27, 0xAA	; 170
    172c:	c9 f5       	brne	.+114    	; 0x17a0 <getSetFreeCluster+0xf4>
    return 0xffffffff;

  if(get_set == GET)
    172e:	cc 20       	and	r12, r12
    1730:	a9 f4       	brne	.+42     	; 0x175c <getSetFreeCluster+0xb0>
  {
    if(totOrNext == TOTAL_FREE)
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	d8 16       	cp	r13, r24
    1736:	49 f4       	brne	.+18     	; 0x174a <getSetFreeCluster+0x9e>
      return(FS->freeClusterCount);
    1738:	20 91 af 04 	lds	r18, 0x04AF
    173c:	30 91 b0 04 	lds	r19, 0x04B0
    1740:	40 91 b1 04 	lds	r20, 0x04B1
    1744:	50 91 b2 04 	lds	r21, 0x04B2
    1748:	2f c0       	rjmp	.+94     	; 0x17a8 <getSetFreeCluster+0xfc>
    else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
    174a:	20 91 b3 04 	lds	r18, 0x04B3
    174e:	30 91 b4 04 	lds	r19, 0x04B4
    1752:	40 91 b5 04 	lds	r20, 0x04B5
    1756:	50 91 b6 04 	lds	r21, 0x04B6
    175a:	26 c0       	rjmp	.+76     	; 0x17a8 <getSetFreeCluster+0xfc>
  }
  else
  {
    if(totOrNext == TOTAL_FREE)
    175c:	21 e0       	ldi	r18, 0x01	; 1
    175e:	d2 16       	cp	r13, r18
    1760:	49 f4       	brne	.+18     	; 0x1774 <getSetFreeCluster+0xc8>
      FS->freeClusterCount = FSEntry;
    1762:	e0 92 af 04 	sts	0x04AF, r14
    1766:	f0 92 b0 04 	sts	0x04B0, r15
    176a:	00 93 b1 04 	sts	0x04B1, r16
    176e:	10 93 b2 04 	sts	0x04B2, r17
    1772:	08 c0       	rjmp	.+16     	; 0x1784 <getSetFreeCluster+0xd8>
    else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
    1774:	e0 92 b3 04 	sts	0x04B3, r14
    1778:	f0 92 b4 04 	sts	0x04B4, r15
    177c:	00 93 b5 04 	sts	0x04B5, r16
    1780:	10 93 b6 04 	sts	0x04B6, r17
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
    1784:	60 91 cb 04 	lds	r22, 0x04CB
    1788:	70 91 cc 04 	lds	r23, 0x04CC
    178c:	80 91 cd 04 	lds	r24, 0x04CD
    1790:	90 91 ce 04 	lds	r25, 0x04CE
    1794:	6f 5f       	subi	r22, 0xFF	; 255
    1796:	7f 4f       	sbci	r23, 0xFF	; 255
    1798:	8f 4f       	sbci	r24, 0xFF	; 255
    179a:	9f 4f       	sbci	r25, 0xFF	; 255
    179c:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <SD_writeSingleBlock>
  }
  return 0xffffffff;
    17a0:	2f ef       	ldi	r18, 0xFF	; 255
    17a2:	3f ef       	ldi	r19, 0xFF	; 255
    17a4:	4f ef       	ldi	r20, 0xFF	; 255
    17a6:	5f ef       	ldi	r21, 0xFF	; 255
}
    17a8:	b9 01       	movw	r22, r18
    17aa:	ca 01       	movw	r24, r20
    17ac:	1f 91       	pop	r17
    17ae:	0f 91       	pop	r16
    17b0:	ff 90       	pop	r15
    17b2:	ef 90       	pop	r14
    17b4:	df 90       	pop	r13
    17b6:	cf 90       	pop	r12
    17b8:	08 95       	ret

000017ba <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
    17ba:	df 92       	push	r13
    17bc:	ef 92       	push	r14
    17be:	ff 92       	push	r15
    17c0:	0f 93       	push	r16
    17c2:	1f 93       	push	r17
    17c4:	d8 2e       	mov	r13, r24
    17c6:	db 01       	movw	r26, r22
    17c8:	ca 01       	movw	r24, r20
    17ca:	e9 e0       	ldi	r30, 0x09	; 9
    17cc:	b6 95       	lsr	r27
    17ce:	a7 95       	ror	r26
    17d0:	97 95       	ror	r25
    17d2:	87 95       	ror	r24
    17d4:	ea 95       	dec	r30
    17d6:	d1 f7       	brne	.-12     	; 0x17cc <freeMemoryUpdate+0x12>
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
    17d8:	51 70       	andi	r21, 0x01	; 1
    17da:	60 70       	andi	r22, 0x00	; 0
    17dc:	70 70       	andi	r23, 0x00	; 0
    17de:	41 15       	cp	r20, r1
    17e0:	51 05       	cpc	r21, r1
    17e2:	61 05       	cpc	r22, r1
    17e4:	71 05       	cpc	r23, r1
    17e6:	19 f4       	brne	.+6      	; 0x17ee <freeMemoryUpdate+0x34>
    17e8:	ac 01       	movw	r20, r24
    17ea:	bd 01       	movw	r22, r26
    17ec:	06 c0       	rjmp	.+12     	; 0x17fa <freeMemoryUpdate+0x40>
  else size = (size / 512) +1;
    17ee:	ac 01       	movw	r20, r24
    17f0:	bd 01       	movw	r22, r26
    17f2:	4f 5f       	subi	r20, 0xFF	; 255
    17f4:	5f 4f       	sbci	r21, 0xFF	; 255
    17f6:	6f 4f       	sbci	r22, 0xFF	; 255
    17f8:	7f 4f       	sbci	r23, 0xFF	; 255
    17fa:	db 01       	movw	r26, r22
    17fc:	ca 01       	movw	r24, r20
    17fe:	33 e0       	ldi	r19, 0x03	; 3
    1800:	b6 95       	lsr	r27
    1802:	a7 95       	ror	r26
    1804:	97 95       	ror	r25
    1806:	87 95       	ror	r24
    1808:	3a 95       	dec	r19
    180a:	d1 f7       	brne	.-12     	; 0x1800 <freeMemoryUpdate+0x46>
  if((size % 8) == 0) size = size / 8;
    180c:	47 70       	andi	r20, 0x07	; 7
    180e:	50 70       	andi	r21, 0x00	; 0
    1810:	60 70       	andi	r22, 0x00	; 0
    1812:	70 70       	andi	r23, 0x00	; 0
    1814:	41 15       	cp	r20, r1
    1816:	51 05       	cpc	r21, r1
    1818:	61 05       	cpc	r22, r1
    181a:	71 05       	cpc	r23, r1
    181c:	19 f4       	brne	.+6      	; 0x1824 <freeMemoryUpdate+0x6a>
    181e:	7c 01       	movw	r14, r24
    1820:	8d 01       	movw	r16, r26
    1822:	07 c0       	rjmp	.+14     	; 0x1832 <freeMemoryUpdate+0x78>
  else size = (size / 8) +1;
    1824:	7c 01       	movw	r14, r24
    1826:	8d 01       	movw	r16, r26
    1828:	08 94       	sec
    182a:	e1 1c       	adc	r14, r1
    182c:	f1 1c       	adc	r15, r1
    182e:	01 1d       	adc	r16, r1
    1830:	11 1d       	adc	r17, r1

  if(freeClusterCountUpdated)
    1832:	80 91 f9 04 	lds	r24, 0x04F9
    1836:	88 23       	and	r24, r24
    1838:	d9 f0       	breq	.+54     	; 0x1870 <freeMemoryUpdate+0xb6>
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	50 e0       	ldi	r21, 0x00	; 0
    1846:	0e 94 56 0b 	call	0x16ac	; 0x16ac <getSetFreeCluster>
	if(flag == ADD)
    184a:	dd 20       	and	r13, r13
    184c:	39 f4       	brne	.+14     	; 0x185c <freeMemoryUpdate+0xa2>
  	   freeClusters = freeClusters + size;
    184e:	9b 01       	movw	r18, r22
    1850:	ac 01       	movw	r20, r24
    1852:	2e 0d       	add	r18, r14
    1854:	3f 1d       	adc	r19, r15
    1856:	40 1f       	adc	r20, r16
    1858:	51 1f       	adc	r21, r17
    185a:	06 c0       	rjmp	.+12     	; 0x1868 <freeMemoryUpdate+0xae>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
    185c:	9b 01       	movw	r18, r22
    185e:	ac 01       	movw	r20, r24
    1860:	2e 19       	sub	r18, r14
    1862:	3f 09       	sbc	r19, r15
    1864:	40 0b       	sbc	r20, r16
    1866:	51 0b       	sbc	r21, r17
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	61 e0       	ldi	r22, 0x01	; 1
    186c:	0e 94 56 0b 	call	0x16ac	; 0x16ac <getSetFreeCluster>
  }
}
    1870:	1f 91       	pop	r17
    1872:	0f 91       	pop	r16
    1874:	ff 90       	pop	r15
    1876:	ef 90       	pop	r14
    1878:	df 90       	pop	r13
    187a:	08 95       	ret

0000187c <memoryStatistics>:
//it tries to read from SD whether a free cluster count is stored, if it is stored
//then it will return immediately. Otherwise it will count the total number of
//free clusters, which takes time
//****************************************************************************
void memoryStatistics (void)
{
    187c:	2f 92       	push	r2
    187e:	3f 92       	push	r3
    1880:	4f 92       	push	r4
    1882:	5f 92       	push	r5
    1884:	6f 92       	push	r6
    1886:	7f 92       	push	r7
    1888:	8f 92       	push	r8
    188a:	9f 92       	push	r9
    188c:	af 92       	push	r10
    188e:	bf 92       	push	r11
    1890:	cf 92       	push	r12
    1892:	df 92       	push	r13
    1894:	ef 92       	push	r14
    1896:	ff 92       	push	r15
    1898:	0f 93       	push	r16
    189a:	1f 93       	push	r17
  unsigned long freeClusters, totalClusterCount, cluster;
  unsigned long totalMemory, freeMemory;
  unsigned long sector, *value;
  unsigned int i;

  totalMemory = totalClusters * sectorPerCluster / 1024;
    189c:	20 91 b4 02 	lds	r18, 0x02B4
    18a0:	30 91 b5 02 	lds	r19, 0x02B5
    18a4:	40 91 b6 02 	lds	r20, 0x02B6
    18a8:	50 91 b7 02 	lds	r21, 0x02B7
    18ac:	60 91 c7 04 	lds	r22, 0x04C7
    18b0:	70 91 c8 04 	lds	r23, 0x04C8
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <__mulsi3>
    18bc:	1a e0       	ldi	r17, 0x0A	; 10
    18be:	96 95       	lsr	r25
    18c0:	87 95       	ror	r24
    18c2:	77 95       	ror	r23
    18c4:	67 95       	ror	r22
    18c6:	1a 95       	dec	r17
    18c8:	d1 f7       	brne	.-12     	; 0x18be <memoryStatistics+0x42>
  totalMemory *= bytesPerSector;
    18ca:	20 91 b1 02 	lds	r18, 0x02B1
    18ce:	30 91 b2 02 	lds	r19, 0x02B2

//TX_NEWLINE;
//TX_NEWLINE;
//transmitString_F(PSTR("Total Memory: "));

  displayMemory (HIGH, totalMemory);
    18d2:	40 e0       	ldi	r20, 0x00	; 0
    18d4:	50 e0       	ldi	r21, 0x00	; 0
    18d6:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <__mulsi3>
    18da:	ab 01       	movw	r20, r22
    18dc:	bc 01       	movw	r22, r24
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	0e 94 b0 0a 	call	0x1560	; 0x1560 <displayMemory>

  freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	60 e0       	ldi	r22, 0x00	; 0
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	40 e0       	ldi	r20, 0x00	; 0
    18ee:	50 e0       	ldi	r21, 0x00	; 0
    18f0:	0e 94 56 0b 	call	0x16ac	; 0x16ac <getSetFreeCluster>
    18f4:	3b 01       	movw	r6, r22
    18f6:	4c 01       	movw	r8, r24
//freeClusters = 0xffffffff;    

  if(freeClusters > totalClusters)
    18f8:	80 91 b4 02 	lds	r24, 0x02B4
    18fc:	90 91 b5 02 	lds	r25, 0x02B5
    1900:	a0 91 b6 02 	lds	r26, 0x02B6
    1904:	b0 91 b7 02 	lds	r27, 0x02B7
    1908:	86 15       	cp	r24, r6
    190a:	97 05       	cpc	r25, r7
    190c:	a8 05       	cpc	r26, r8
    190e:	b9 05       	cpc	r27, r9
    1910:	08 f0       	brcs	.+2      	; 0x1914 <memoryStatistics+0x98>
    1912:	7c c0       	rjmp	.+248    	; 0x1a0c <memoryStatistics+0x190>
  {
    freeClusterCountUpdated = 0;
    1914:	10 92 f9 04 	sts	0x04F9, r1
    freeClusters = 0;
    totalClusterCount = 0;
    cluster = rootCluster;    
    1918:	a0 90 b8 02 	lds	r10, 0x02B8
    191c:	b0 90 b9 02 	lds	r11, 0x02B9
    1920:	c0 90 ba 02 	lds	r12, 0x02BA
    1924:	d0 90 bb 02 	lds	r13, 0x02BB
    1928:	b2 e0       	ldi	r27, 0x02	; 2
    192a:	aa 0c       	add	r10, r10
    192c:	bb 1c       	adc	r11, r11
    192e:	cc 1c       	adc	r12, r12
    1930:	dd 1c       	adc	r13, r13
    1932:	ba 95       	dec	r27
    1934:	d1 f7       	brne	.-12     	; 0x192a <memoryStatistics+0xae>
    1936:	66 24       	eor	r6, r6
    1938:	77 24       	eor	r7, r7
    193a:	43 01       	movw	r8, r6
    193c:	22 24       	eor	r2, r2
    193e:	33 24       	eor	r3, r3
    1940:	21 01       	movw	r4, r2
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
    1942:	e0 90 d4 04 	lds	r14, 0x04D4
    1946:	f0 90 d5 04 	lds	r15, 0x04D5
    194a:	20 91 b1 02 	lds	r18, 0x02B1
    194e:	30 91 b2 02 	lds	r19, 0x02B2
      SD_readSingleBlock(sector);
    1952:	00 e0       	ldi	r16, 0x00	; 0
    1954:	10 e0       	ldi	r17, 0x00	; 0
    1956:	80 91 cb 04 	lds	r24, 0x04CB
    195a:	90 91 cc 04 	lds	r25, 0x04CC
    195e:	a0 91 cd 04 	lds	r26, 0x04CD
    1962:	b0 91 ce 04 	lds	r27, 0x04CE
    1966:	e8 0e       	add	r14, r24
    1968:	f9 1e       	adc	r15, r25
    196a:	0a 1f       	adc	r16, r26
    196c:	1b 1f       	adc	r17, r27
    196e:	40 e0       	ldi	r20, 0x00	; 0
    1970:	50 e0       	ldi	r21, 0x00	; 0
    1972:	c6 01       	movw	r24, r12
    1974:	b5 01       	movw	r22, r10
    1976:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <__udivmodsi4>
    197a:	e2 0e       	add	r14, r18
    197c:	f3 1e       	adc	r15, r19
    197e:	04 1f       	adc	r16, r20
    1980:	15 1f       	adc	r17, r21
    1982:	c8 01       	movw	r24, r16
    1984:	b7 01       	movw	r22, r14
    1986:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <SD_readSingleBlock>
    198a:	a2 01       	movw	r20, r4
    198c:	91 01       	movw	r18, r2
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	70 e0       	ldi	r23, 0x00	; 0
      for(i=0; i<128; i++)
      {
           value = (unsigned long *) &buffer[i*4];
         if(((*value)& 0x0fffffff) == 0)
    1992:	fb 01       	movw	r30, r22
    1994:	e9 53       	subi	r30, 0x39	; 57
    1996:	fd 4f       	sbci	r31, 0xFD	; 253
    1998:	80 81       	ld	r24, Z
    199a:	91 81       	ldd	r25, Z+1	; 0x01
    199c:	a2 81       	ldd	r26, Z+2	; 0x02
    199e:	b3 81       	ldd	r27, Z+3	; 0x03
    19a0:	bf 70       	andi	r27, 0x0F	; 15
    19a2:	00 97       	sbiw	r24, 0x00	; 0
    19a4:	a1 05       	cpc	r26, r1
    19a6:	b1 05       	cpc	r27, r1
    19a8:	29 f4       	brne	.+10     	; 0x19b4 <memoryStatistics+0x138>
            freeClusters++;;
    19aa:	08 94       	sec
    19ac:	61 1c       	adc	r6, r1
    19ae:	71 1c       	adc	r7, r1
    19b0:	81 1c       	adc	r8, r1
    19b2:	91 1c       	adc	r9, r1
        
         totalClusterCount++;
    19b4:	2f 5f       	subi	r18, 0xFF	; 255
    19b6:	3f 4f       	sbci	r19, 0xFF	; 255
    19b8:	4f 4f       	sbci	r20, 0xFF	; 255
    19ba:	5f 4f       	sbci	r21, 0xFF	; 255
         if(totalClusterCount == (totalClusters+2)) break;
    19bc:	80 91 b4 02 	lds	r24, 0x02B4
    19c0:	90 91 b5 02 	lds	r25, 0x02B5
    19c4:	a0 91 b6 02 	lds	r26, 0x02B6
    19c8:	b0 91 b7 02 	lds	r27, 0x02B7
    19cc:	02 96       	adiw	r24, 0x02	; 2
    19ce:	a1 1d       	adc	r26, r1
    19d0:	b1 1d       	adc	r27, r1
    19d2:	28 17       	cp	r18, r24
    19d4:	39 07       	cpc	r19, r25
    19d6:	4a 07       	cpc	r20, r26
    19d8:	5b 07       	cpc	r21, r27
    19da:	c1 f0       	breq	.+48     	; 0x1a0c <memoryStatistics+0x190>
    19dc:	c9 01       	movw	r24, r18
    19de:	82 19       	sub	r24, r2
    19e0:	93 09       	sbc	r25, r3
    19e2:	6c 5f       	subi	r22, 0xFC	; 252
    19e4:	7f 4f       	sbci	r23, 0xFF	; 255
    cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
    19e6:	02 e0       	ldi	r16, 0x02	; 2
    19e8:	60 30       	cpi	r22, 0x00	; 0
    19ea:	70 07       	cpc	r23, r16
    19ec:	91 f6       	brne	.-92     	; 0x1992 <memoryStatistics+0x116>
    19ee:	e1 2c       	mov	r14, r1
    19f0:	a2 e0       	ldi	r26, 0x02	; 2
    19f2:	fa 2e       	mov	r15, r26
    19f4:	01 2d       	mov	r16, r1
    19f6:	11 2d       	mov	r17, r1
    19f8:	ae 0c       	add	r10, r14
    19fa:	bf 1c       	adc	r11, r15
    19fc:	c0 1e       	adc	r12, r16
    19fe:	d1 1e       	adc	r13, r17
            freeClusters++;;
        
         totalClusterCount++;
         if(totalClusterCount == (totalClusters+2)) break;
      }  
      if(i < 128) break;
    1a00:	80 38       	cpi	r24, 0x80	; 128
    1a02:	91 05       	cpc	r25, r1
    1a04:	18 f0       	brcs	.+6      	; 0x1a0c <memoryStatistics+0x190>
    1a06:	19 01       	movw	r2, r18
    1a08:	2a 01       	movw	r4, r20
    1a0a:	9b cf       	rjmp	.-202    	; 0x1942 <memoryStatistics+0xc6>
      cluster+=128;
    } 
  }

  if(!freeClusterCountUpdated)
    1a0c:	80 91 f9 04 	lds	r24, 0x04F9
    1a10:	88 23       	and	r24, r24
    1a12:	31 f4       	brne	.+12     	; 0x1a20 <memoryStatistics+0x1a4>
    getSetFreeCluster (TOTAL_FREE, SET, freeClusters); //update FSinfo next free cluster entry
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	61 e0       	ldi	r22, 0x01	; 1
    1a18:	a4 01       	movw	r20, r8
    1a1a:	93 01       	movw	r18, r6
    1a1c:	0e 94 56 0b 	call	0x16ac	; 0x16ac <getSetFreeCluster>
  freeClusterCountUpdated = 1;  //set flag
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	80 93 f9 04 	sts	0x04F9, r24
  freeMemory = freeClusters * sectorPerCluster / 1024;
    1a26:	20 91 c7 04 	lds	r18, 0x04C7
    1a2a:	30 91 c8 04 	lds	r19, 0x04C8
    1a2e:	40 e0       	ldi	r20, 0x00	; 0
    1a30:	50 e0       	ldi	r21, 0x00	; 0
    1a32:	c4 01       	movw	r24, r8
    1a34:	b3 01       	movw	r22, r6
    1a36:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <__mulsi3>
    1a3a:	fa e0       	ldi	r31, 0x0A	; 10
    1a3c:	96 95       	lsr	r25
    1a3e:	87 95       	ror	r24
    1a40:	77 95       	ror	r23
    1a42:	67 95       	ror	r22
    1a44:	fa 95       	dec	r31
    1a46:	d1 f7       	brne	.-12     	; 0x1a3c <memoryStatistics+0x1c0>
  freeMemory *= bytesPerSector ;
    1a48:	20 91 b1 02 	lds	r18, 0x02B1
    1a4c:	30 91 b2 02 	lds	r19, 0x02B2
//TX_NEWLINE;
//transmitString_F(PSTR(" Free Memory: "));
  displayMemory (HIGH, freeMemory);
    1a50:	40 e0       	ldi	r20, 0x00	; 0
    1a52:	50 e0       	ldi	r21, 0x00	; 0
    1a54:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <__mulsi3>
    1a58:	ab 01       	movw	r20, r22
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <displayMemory>
//TX_NEWLINE; 
}
    1a62:	1f 91       	pop	r17
    1a64:	0f 91       	pop	r16
    1a66:	ff 90       	pop	r15
    1a68:	ef 90       	pop	r14
    1a6a:	df 90       	pop	r13
    1a6c:	cf 90       	pop	r12
    1a6e:	bf 90       	pop	r11
    1a70:	af 90       	pop	r10
    1a72:	9f 90       	pop	r9
    1a74:	8f 90       	pop	r8
    1a76:	7f 90       	pop	r7
    1a78:	6f 90       	pop	r6
    1a7a:	5f 90       	pop	r5
    1a7c:	4f 90       	pop	r4
    1a7e:	3f 90       	pop	r3
    1a80:	2f 90       	pop	r2
    1a82:	08 95       	ret

00001a84 <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
    1a84:	6f 92       	push	r6
    1a86:	7f 92       	push	r7
    1a88:	8f 92       	push	r8
    1a8a:	9f 92       	push	r9
    1a8c:	af 92       	push	r10
    1a8e:	bf 92       	push	r11
    1a90:	cf 92       	push	r12
    1a92:	df 92       	push	r13
    1a94:	ef 92       	push	r14
    1a96:	ff 92       	push	r15
    1a98:	0f 93       	push	r16
    1a9a:	1f 93       	push	r17
  struct BS_Structure *bpb; //mapping the buffer onto the structure
  struct MBRinfo_Structure *mbr;
  struct partitionInfo_Structure *partition;
  unsigned long dataSectors;

  unusedSectors = 0;
    1a9c:	10 92 cb 04 	sts	0x04CB, r1
    1aa0:	10 92 cc 04 	sts	0x04CC, r1
    1aa4:	10 92 cd 04 	sts	0x04CD, r1
    1aa8:	10 92 ce 04 	sts	0x04CE, r1

  SD_readSingleBlock(0);
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <SD_readSingleBlock>
  bpb = (struct BS_Structure *)buffer;

  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
    1ab8:	80 91 c7 02 	lds	r24, 0x02C7
    1abc:	89 3e       	cpi	r24, 0xE9	; 233
    1abe:	19 f1       	breq	.+70     	; 0x1b06 <getBootSectorData+0x82>
    1ac0:	8b 3e       	cpi	r24, 0xEB	; 235
    1ac2:	09 f1       	breq	.+66     	; 0x1b06 <getBootSectorData+0x82>
  {
    mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
    if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
    1ac4:	80 91 c5 04 	lds	r24, 0x04C5
    1ac8:	90 91 c6 04 	lds	r25, 0x04C6
    1acc:	85 55       	subi	r24, 0x55	; 85
    1ace:	9a 4a       	sbci	r25, 0xAA	; 170
    1ad0:	09 f0       	breq	.+2      	; 0x1ad4 <getBootSectorData+0x50>
    1ad2:	b0 c0       	rjmp	.+352    	; 0x1c34 <getBootSectorData+0x1b0>
  	
    partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
    unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
    1ad4:	60 91 8d 04 	lds	r22, 0x048D
    1ad8:	70 91 8e 04 	lds	r23, 0x048E
    1adc:	80 91 8f 04 	lds	r24, 0x048F
    1ae0:	90 91 90 04 	lds	r25, 0x0490
    1ae4:	60 93 cb 04 	sts	0x04CB, r22
    1ae8:	70 93 cc 04 	sts	0x04CC, r23
    1aec:	80 93 cd 04 	sts	0x04CD, r24
    1af0:	90 93 ce 04 	sts	0x04CE, r25
  
    SD_readSingleBlock(partition->firstSector);//read the bpb sector
    1af4:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <SD_readSingleBlock>
    bpb = (struct BS_Structure *)buffer;
    if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
    1af8:	80 91 c7 02 	lds	r24, 0x02C7
    1afc:	89 3e       	cpi	r24, 0xE9	; 233
    1afe:	19 f0       	breq	.+6      	; 0x1b06 <getBootSectorData+0x82>
    1b00:	8b 3e       	cpi	r24, 0xEB	; 235
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <getBootSectorData+0x82>
    1b04:	97 c0       	rjmp	.+302    	; 0x1c34 <getBootSectorData+0x1b0>
  }

  bytesPerSector = bpb->bytesPerSector;
    1b06:	80 91 d2 02 	lds	r24, 0x02D2
    1b0a:	90 91 d3 02 	lds	r25, 0x02D3
    1b0e:	90 93 b2 02 	sts	0x02B2, r25
    1b12:	80 93 b1 02 	sts	0x02B1, r24
//transmitHex(INT, bytesPerSector); transmitByte(' ');
  sectorPerCluster = bpb->sectorPerCluster;
    1b16:	80 91 d4 02 	lds	r24, 0x02D4
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	90 93 c8 04 	sts	0x04C8, r25
    1b20:	80 93 c7 04 	sts	0x04C7, r24
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
  reservedSectorCount = bpb->reservedSectorCount;
    1b24:	a0 90 d5 02 	lds	r10, 0x02D5
    1b28:	b0 90 d6 02 	lds	r11, 0x02D6
    1b2c:	b0 92 d5 04 	sts	0x04D5, r11
    1b30:	a0 92 d4 04 	sts	0x04D4, r10
  rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
    1b34:	80 91 f3 02 	lds	r24, 0x02F3
    1b38:	90 91 f4 02 	lds	r25, 0x02F4
    1b3c:	a0 91 f5 02 	lds	r26, 0x02F5
    1b40:	b0 91 f6 02 	lds	r27, 0x02F6
    1b44:	80 93 b8 02 	sts	0x02B8, r24
    1b48:	90 93 b9 02 	sts	0x02B9, r25
    1b4c:	a0 93 ba 02 	sts	0x02BA, r26
    1b50:	b0 93 bb 02 	sts	0x02BB, r27
  firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
    1b54:	e0 90 d4 04 	lds	r14, 0x04D4
    1b58:	f0 90 d5 04 	lds	r15, 0x04D5
    1b5c:	60 91 d7 02 	lds	r22, 0x02D7
    1b60:	70 e0       	ldi	r23, 0x00	; 0
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	20 91 eb 02 	lds	r18, 0x02EB
    1b6a:	30 91 ec 02 	lds	r19, 0x02EC
    1b6e:	40 91 ed 02 	lds	r20, 0x02ED
    1b72:	50 91 ee 02 	lds	r21, 0x02EE
    1b76:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <__mulsi3>
    1b7a:	3b 01       	movw	r6, r22
    1b7c:	4c 01       	movw	r8, r24
    1b7e:	00 e0       	ldi	r16, 0x00	; 0
    1b80:	10 e0       	ldi	r17, 0x00	; 0
    1b82:	80 91 e3 02 	lds	r24, 0x02E3
    1b86:	90 91 e4 02 	lds	r25, 0x02E4
    1b8a:	a0 91 e5 02 	lds	r26, 0x02E5
    1b8e:	b0 91 e6 02 	lds	r27, 0x02E6
    1b92:	e8 0e       	add	r14, r24
    1b94:	f9 1e       	adc	r15, r25
    1b96:	0a 1f       	adc	r16, r26
    1b98:	1b 1f       	adc	r17, r27
    1b9a:	e6 0c       	add	r14, r6
    1b9c:	f7 1c       	adc	r15, r7
    1b9e:	08 1d       	adc	r16, r8
    1ba0:	19 1d       	adc	r17, r9
    1ba2:	e0 92 a9 02 	sts	0x02A9, r14
    1ba6:	f0 92 aa 02 	sts	0x02AA, r15
    1baa:	00 93 ab 02 	sts	0x02AB, r16
    1bae:	10 93 ac 02 	sts	0x02AC, r17

  dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
  totalClusters = dataSectors / sectorPerCluster;
    1bb2:	20 91 c7 04 	lds	r18, 0x04C7
    1bb6:	30 91 c8 04 	lds	r19, 0x04C8
    1bba:	cc 24       	eor	r12, r12
    1bbc:	dd 24       	eor	r13, r13
    1bbe:	60 91 e7 02 	lds	r22, 0x02E7
    1bc2:	70 91 e8 02 	lds	r23, 0x02E8
    1bc6:	80 91 e9 02 	lds	r24, 0x02E9
    1bca:	90 91 ea 02 	lds	r25, 0x02EA
    1bce:	6a 19       	sub	r22, r10
    1bd0:	7b 09       	sbc	r23, r11
    1bd2:	8c 09       	sbc	r24, r12
    1bd4:	9d 09       	sbc	r25, r13
    1bd6:	66 19       	sub	r22, r6
    1bd8:	77 09       	sbc	r23, r7
    1bda:	88 09       	sbc	r24, r8
    1bdc:	99 09       	sbc	r25, r9
    1bde:	40 e0       	ldi	r20, 0x00	; 0
    1be0:	50 e0       	ldi	r21, 0x00	; 0
    1be2:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <__udivmodsi4>
    1be6:	c9 01       	movw	r24, r18
    1be8:	da 01       	movw	r26, r20
    1bea:	80 93 b4 02 	sts	0x02B4, r24
    1bee:	90 93 b5 02 	sts	0x02B5, r25
    1bf2:	a0 93 b6 02 	sts	0x02B6, r26
    1bf6:	b0 93 b7 02 	sts	0x02B7, r27
//transmitHex(LONG, totalClusters); transmitByte(' ');

  if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	60 e0       	ldi	r22, 0x00	; 0
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	40 e0       	ldi	r20, 0x00	; 0
    1c04:	50 e0       	ldi	r21, 0x00	; 0
    1c06:	0e 94 56 0b 	call	0x16ac	; 0x16ac <getSetFreeCluster>
    1c0a:	20 91 b4 02 	lds	r18, 0x02B4
    1c0e:	30 91 b5 02 	lds	r19, 0x02B5
    1c12:	40 91 b6 02 	lds	r20, 0x02B6
    1c16:	50 91 b7 02 	lds	r21, 0x02B7
    1c1a:	26 17       	cp	r18, r22
    1c1c:	37 07       	cpc	r19, r23
    1c1e:	48 07       	cpc	r20, r24
    1c20:	59 07       	cpc	r21, r25
    1c22:	18 f4       	brcc	.+6      	; 0x1c2a <getBootSectorData+0x1a6>
     freeClusterCountUpdated = 0;
    1c24:	10 92 f9 04 	sts	0x04F9, r1
    1c28:	03 c0       	rjmp	.+6      	; 0x1c30 <getBootSectorData+0x1ac>
  else
	 freeClusterCountUpdated = 1;
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	80 93 f9 04 	sts	0x04F9, r24
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	01 c0       	rjmp	.+2      	; 0x1c36 <getBootSectorData+0x1b2>
    1c34:	81 e0       	ldi	r24, 0x01	; 1
  return 0;
}
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	ff 90       	pop	r15
    1c3c:	ef 90       	pop	r14
    1c3e:	df 90       	pop	r13
    1c40:	cf 90       	pop	r12
    1c42:	bf 90       	pop	r11
    1c44:	af 90       	pop	r10
    1c46:	9f 90       	pop	r9
    1c48:	8f 90       	pop	r8
    1c4a:	7f 90       	pop	r7
    1c4c:	6f 90       	pop	r6
    1c4e:	08 95       	ret

00001c50 <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
    1c50:	4f 92       	push	r4
    1c52:	5f 92       	push	r5
    1c54:	6f 92       	push	r6
    1c56:	7f 92       	push	r7
    1c58:	8f 92       	push	r8
    1c5a:	9f 92       	push	r9
    1c5c:	af 92       	push	r10
    1c5e:	bf 92       	push	r11
    1c60:	cf 92       	push	r12
    1c62:	df 92       	push	r13
    1c64:	ef 92       	push	r14
    1c66:	ff 92       	push	r15
    1c68:	0f 93       	push	r16
    1c6a:	1f 93       	push	r17
    1c6c:	cf 93       	push	r28
    1c6e:	df 93       	push	r29
    1c70:	5b 01       	movw	r10, r22
    1c72:	6c 01       	movw	r12, r24
    1c74:	84 2e       	mov	r8, r20
    1c76:	28 01       	movw	r4, r16
    1c78:	39 01       	movw	r6, r18
  unsigned long *FATEntryValue;
  unsigned long FATEntrySector;
  unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
  FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
    1c7a:	80 91 d4 04 	lds	r24, 0x04D4
    1c7e:	90 91 d5 04 	lds	r25, 0x04D5
    1c82:	02 e0       	ldi	r16, 0x02	; 2
    1c84:	aa 0c       	add	r10, r10
    1c86:	bb 1c       	adc	r11, r11
    1c88:	cc 1c       	adc	r12, r12
    1c8a:	dd 1c       	adc	r13, r13
    1c8c:	0a 95       	dec	r16
    1c8e:	d1 f7       	brne	.-12     	; 0x1c84 <getSetNextCluster+0x34>
    1c90:	20 91 b1 02 	lds	r18, 0x02B1
    1c94:	30 91 b2 02 	lds	r19, 0x02B2
    1c98:	7c 01       	movw	r14, r24
    1c9a:	00 e0       	ldi	r16, 0x00	; 0
    1c9c:	10 e0       	ldi	r17, 0x00	; 0
    1c9e:	80 91 cb 04 	lds	r24, 0x04CB
    1ca2:	90 91 cc 04 	lds	r25, 0x04CC
    1ca6:	a0 91 cd 04 	lds	r26, 0x04CD
    1caa:	b0 91 ce 04 	lds	r27, 0x04CE
    1cae:	e8 0e       	add	r14, r24
    1cb0:	f9 1e       	adc	r15, r25
    1cb2:	0a 1f       	adc	r16, r26
    1cb4:	1b 1f       	adc	r17, r27
    1cb6:	40 e0       	ldi	r20, 0x00	; 0
    1cb8:	50 e0       	ldi	r21, 0x00	; 0
    1cba:	c6 01       	movw	r24, r12
    1cbc:	b5 01       	movw	r22, r10
    1cbe:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <__udivmodsi4>
    1cc2:	e2 0e       	add	r14, r18
    1cc4:	f3 1e       	adc	r15, r19
    1cc6:	04 1f       	adc	r16, r20
    1cc8:	15 1f       	adc	r17, r21

//get the offset address in that sector number
  FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
    1cca:	c0 91 b1 02 	lds	r28, 0x02B1
    1cce:	d0 91 b2 02 	lds	r29, 0x02B2
    1cd2:	99 24       	eor	r9, r9

//read the sector into a buffer
  while(retry <10)
  { if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
    1cd4:	c8 01       	movw	r24, r16
    1cd6:	b7 01       	movw	r22, r14
    1cd8:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <SD_readSingleBlock>
    1cdc:	88 23       	and	r24, r24
    1cde:	21 f0       	breq	.+8      	; 0x1ce8 <getSetNextCluster+0x98>
    1ce0:	93 94       	inc	r9

//get the offset address in that sector number
  FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

//read the sector into a buffer
  while(retry <10)
    1ce2:	8a e0       	ldi	r24, 0x0A	; 10
    1ce4:	98 16       	cp	r9, r24
    1ce6:	b1 f7       	brne	.-20     	; 0x1cd4 <getSetNextCluster+0x84>
  { if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

//get the cluster address from the buffer
  FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
    1ce8:	9e 01       	movw	r18, r28
    1cea:	40 e0       	ldi	r20, 0x00	; 0
    1cec:	50 e0       	ldi	r21, 0x00	; 0
    1cee:	c6 01       	movw	r24, r12
    1cf0:	b5 01       	movw	r22, r10
    1cf2:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <__udivmodsi4>
    1cf6:	fb 01       	movw	r30, r22
    1cf8:	e9 53       	subi	r30, 0x39	; 57
    1cfa:	fd 4f       	sbci	r31, 0xFD	; 253

  if(get_set == GET)
    1cfc:	88 20       	and	r8, r8
    1cfe:	31 f4       	brne	.+12     	; 0x1d0c <getSetNextCluster+0xbc>
    return ((*FATEntryValue) & 0x0fffffff);
    1d00:	20 81       	ld	r18, Z
    1d02:	31 81       	ldd	r19, Z+1	; 0x01
    1d04:	42 81       	ldd	r20, Z+2	; 0x02
    1d06:	53 81       	ldd	r21, Z+3	; 0x03
    1d08:	5f 70       	andi	r21, 0x0F	; 15
    1d0a:	0c c0       	rjmp	.+24     	; 0x1d24 <getSetNextCluster+0xd4>


  *FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
    1d0c:	40 82       	st	Z, r4
    1d0e:	51 82       	std	Z+1, r5	; 0x01
    1d10:	62 82       	std	Z+2, r6	; 0x02
    1d12:	73 82       	std	Z+3, r7	; 0x03

  SD_writeSingleBlock(FATEntrySector);
    1d14:	c8 01       	movw	r24, r16
    1d16:	b7 01       	movw	r22, r14
    1d18:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <SD_writeSingleBlock>
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e0       	ldi	r20, 0x00	; 0
    1d22:	50 e0       	ldi	r21, 0x00	; 0

  return (0);
}
    1d24:	b9 01       	movw	r22, r18
    1d26:	ca 01       	movw	r24, r20
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	1f 91       	pop	r17
    1d2e:	0f 91       	pop	r16
    1d30:	ff 90       	pop	r15
    1d32:	ef 90       	pop	r14
    1d34:	df 90       	pop	r13
    1d36:	cf 90       	pop	r12
    1d38:	bf 90       	pop	r11
    1d3a:	af 90       	pop	r10
    1d3c:	9f 90       	pop	r9
    1d3e:	8f 90       	pop	r8
    1d40:	7f 90       	pop	r7
    1d42:	6f 90       	pop	r6
    1d44:	5f 90       	pop	r5
    1d46:	4f 90       	pop	r4
    1d48:	08 95       	ret

00001d4a <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
    1d4a:	2f 92       	push	r2
    1d4c:	3f 92       	push	r3
    1d4e:	4f 92       	push	r4
    1d50:	5f 92       	push	r5
    1d52:	6f 92       	push	r6
    1d54:	7f 92       	push	r7
    1d56:	8f 92       	push	r8
    1d58:	9f 92       	push	r9
    1d5a:	af 92       	push	r10
    1d5c:	bf 92       	push	r11
    1d5e:	cf 92       	push	r12
    1d60:	df 92       	push	r13
    1d62:	ef 92       	push	r14
    1d64:	ff 92       	push	r15
    1d66:	0f 93       	push	r16
    1d68:	1f 93       	push	r17
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
    1d72:	28 97       	sbiw	r28, 0x08	; 8
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	cd bf       	out	0x3d, r28	; 61
    1d7e:	8b 83       	std	Y+3, r24	; 0x03
    1d80:	7d 83       	std	Y+5, r23	; 0x05
    1d82:	6c 83       	std	Y+4, r22	; 0x04
  unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
  struct dir_Structure *dir;
  unsigned int i;
  unsigned char j;

  cluster = rootCluster; //root cluster
    1d84:	a0 90 b8 02 	lds	r10, 0x02B8
    1d88:	b0 90 b9 02 	lds	r11, 0x02B9
    1d8c:	c0 90 ba 02 	lds	r12, 0x02BA
    1d90:	d0 90 bb 02 	lds	r13, 0x02BB
//		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
    1d94:	81 50       	subi	r24, 0x01	; 1
    1d96:	8e 83       	std	Y+6, r24	; 0x06
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1d98:	20 91 c7 04 	lds	r18, 0x04C7
    1d9c:	30 91 c8 04 	lds	r19, 0x04C8
    1da0:	e0 90 a9 02 	lds	r14, 0x02A9
    1da4:	f0 90 aa 02 	lds	r15, 0x02AA
    1da8:	00 91 ab 02 	lds	r16, 0x02AB
    1dac:	10 91 ac 02 	lds	r17, 0x02AC
    1db0:	c6 01       	movw	r24, r12
    1db2:	b5 01       	movw	r22, r10
    1db4:	62 50       	subi	r22, 0x02	; 2
    1db6:	70 40       	sbci	r23, 0x00	; 0
    1db8:	80 40       	sbci	r24, 0x00	; 0
    1dba:	90 40       	sbci	r25, 0x00	; 0
    1dbc:	40 e0       	ldi	r20, 0x00	; 0
    1dbe:	50 e0       	ldi	r21, 0x00	; 0
    1dc0:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <__mulsi3>
    1dc4:	3b 01       	movw	r6, r22
    1dc6:	4c 01       	movw	r8, r24
    1dc8:	6e 0c       	add	r6, r14
    1dca:	7f 1c       	adc	r7, r15
    1dcc:	80 1e       	adc	r8, r16
    1dce:	91 1e       	adc	r9, r17
    1dd0:	ee 24       	eor	r14, r14
    1dd2:	ff 24       	eor	r15, r15
    1dd4:	87 01       	movw	r16, r14
    1dd6:	04 c1       	rjmp	.+520    	; 0x1fe0 <findFiles+0x296>

  while(1)
  {
    firstSector = getFirstSector (cluster);

    for(sector = 0; sector < sectorPerCluster; sector++)
    1dd8:	17 01       	movw	r2, r14
    1dda:	28 01       	movw	r4, r16
    1ddc:	26 0c       	add	r2, r6
    1dde:	37 1c       	adc	r3, r7
    1de0:	48 1c       	adc	r4, r8
    1de2:	59 1c       	adc	r5, r9
    {
      SD_readSingleBlock (firstSector + sector);
    1de4:	c2 01       	movw	r24, r4
    1de6:	b1 01       	movw	r22, r2
    1de8:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <SD_readSingleBlock>
    1dec:	80 e2       	ldi	r24, 0x20	; 32
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	e4 c0       	rjmp	.+456    	; 0x1fba <findFiles+0x270>
	

      for(i=0; i<bytesPerSector; i+=32)
    1df2:	da 01       	movw	r26, r20
    1df4:	a9 53       	subi	r26, 0x39	; 57
    1df6:	bd 4f       	sbci	r27, 0xFD	; 253
    1df8:	b8 87       	std	Y+8, r27	; 0x08
    1dfa:	af 83       	std	Y+7, r26	; 0x07
      {
	    dir = (struct dir_Structure *) &buffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    1dfc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dfe:	fa 81       	ldd	r31, Y+2	; 0x02
    1e00:	e9 55       	subi	r30, 0x59	; 89
    1e02:	fd 4f       	sbci	r31, 0xFD	; 253
    1e04:	e0 81       	ld	r30, Z
    1e06:	ee 23       	and	r30, r30
    1e08:	21 f4       	brne	.+8      	; 0x1e12 <findFiles+0xc8>
		{
		  if((flag == GET_FILE) || (flag == DELETE))
    1e0a:	be 81       	ldd	r27, Y+6	; 0x06
    1e0c:	b2 30       	cpi	r27, 0x02	; 2
    1e0e:	20 f4       	brcc	.+8      	; 0x1e18 <findFiles+0xce>
    1e10:	0d c1       	rjmp	.+538    	; 0x202c <findFiles+0x2e2>
//		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    1e12:	e5 3e       	cpi	r30, 0xE5	; 229
    1e14:	09 f4       	brne	.+2      	; 0x1e18 <findFiles+0xce>
    1e16:	ce c0       	rjmp	.+412    	; 0x1fb4 <findFiles+0x26a>
    1e18:	e9 81       	ldd	r30, Y+1	; 0x01
    1e1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e1c:	e9 53       	subi	r30, 0x39	; 57
    1e1e:	fd 4f       	sbci	r31, 0xFD	; 253
    1e20:	75 97       	sbiw	r30, 0x15	; 21
    1e22:	80 81       	ld	r24, Z
    1e24:	75 96       	adiw	r30, 0x15	; 21
    1e26:	8f 30       	cpi	r24, 0x0F	; 15
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <findFiles+0xe2>
    1e2a:	c4 c0       	rjmp	.+392    	; 0x1fb4 <findFiles+0x26a>
        {
          if((flag == GET_FILE) || (flag == DELETE))
    1e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2e:	92 30       	cpi	r25, 0x02	; 2
    1e30:	08 f0       	brcs	.+2      	; 0x1e34 <findFiles+0xea>
    1e32:	b4 c0       	rjmp	.+360    	; 0x1f9c <findFiles+0x252>
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
    1e38:	8f 81       	ldd	r24, Y+7	; 0x07
    1e3a:	98 85       	ldd	r25, Y+8	; 0x08
    1e3c:	82 0f       	add	r24, r18
    1e3e:	93 1f       	adc	r25, r19
    1e40:	ac 81       	ldd	r26, Y+4	; 0x04
    1e42:	bd 81       	ldd	r27, Y+5	; 0x05
    1e44:	a2 0f       	add	r26, r18
    1e46:	b3 1f       	adc	r27, r19
    1e48:	fc 01       	movw	r30, r24
    1e4a:	90 81       	ld	r25, Z
    1e4c:	8c 91       	ld	r24, X
    1e4e:	98 17       	cp	r25, r24
    1e50:	09 f0       	breq	.+2      	; 0x1e54 <findFiles+0x10a>
    1e52:	b0 c0       	rjmp	.+352    	; 0x1fb4 <findFiles+0x26a>
    1e54:	82 2f       	mov	r24, r18
    1e56:	8f 5f       	subi	r24, 0xFF	; 255
    1e58:	2f 5f       	subi	r18, 0xFF	; 255
    1e5a:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    1e5c:	2b 30       	cpi	r18, 0x0B	; 11
    1e5e:	31 05       	cpc	r19, r1
    1e60:	59 f7       	brne	.-42     	; 0x1e38 <findFiles+0xee>
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
    1e62:	8b 30       	cpi	r24, 0x0B	; 11
    1e64:	09 f0       	breq	.+2      	; 0x1e68 <findFiles+0x11e>
    1e66:	a6 c0       	rjmp	.+332    	; 0x1fb4 <findFiles+0x26a>
    1e68:	af 81       	ldd	r26, Y+7	; 0x07
    1e6a:	b8 85       	ldd	r27, Y+8	; 0x08
    1e6c:	54 96       	adiw	r26, 0x14	; 20
    1e6e:	6d 91       	ld	r22, X+
    1e70:	7c 91       	ld	r23, X
    1e72:	55 97       	sbiw	r26, 0x15	; 21
    1e74:	5a 96       	adiw	r26, 0x1a	; 26
    1e76:	2d 91       	ld	r18, X+
    1e78:	3c 91       	ld	r19, X
    1e7a:	5b 97       	sbiw	r26, 0x1b	; 27
			{
			  if(flag == GET_FILE)
    1e7c:	bb 81       	ldd	r27, Y+3	; 0x03
    1e7e:	b1 30       	cpi	r27, 0x01	; 1
    1e80:	b1 f5       	brne	.+108    	; 0x1eee <findFiles+0x1a4>
              {
			    appendFileSector = firstSector + sector;
    1e82:	20 92 fa 04 	sts	0x04FA, r2
    1e86:	30 92 fb 04 	sts	0x04FB, r3
    1e8a:	40 92 fc 04 	sts	0x04FC, r4
    1e8e:	50 92 fd 04 	sts	0x04FD, r5
				appendFileLocation = i;
    1e92:	ca 01       	movw	r24, r20
    1e94:	a0 e0       	ldi	r26, 0x00	; 0
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	80 93 97 02 	sts	0x0297, r24
    1e9c:	90 93 98 02 	sts	0x0298, r25
    1ea0:	a0 93 99 02 	sts	0x0299, r26
    1ea4:	b0 93 9a 02 	sts	0x029A, r27
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	a0 e0       	ldi	r26, 0x00	; 0
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	dc 01       	movw	r26, r24
    1eb0:	99 27       	eor	r25, r25
    1eb2:	88 27       	eor	r24, r24
    1eb4:	40 e0       	ldi	r20, 0x00	; 0
    1eb6:	50 e0       	ldi	r21, 0x00	; 0
    1eb8:	82 2b       	or	r24, r18
    1eba:	93 2b       	or	r25, r19
    1ebc:	a4 2b       	or	r26, r20
    1ebe:	b5 2b       	or	r27, r21
    1ec0:	80 93 d7 04 	sts	0x04D7, r24
    1ec4:	90 93 d8 04 	sts	0x04D8, r25
    1ec8:	a0 93 d9 04 	sts	0x04D9, r26
    1ecc:	b0 93 da 04 	sts	0x04DA, r27
				fileSize = dir->fileSize;
    1ed0:	ef 81       	ldd	r30, Y+7	; 0x07
    1ed2:	f8 85       	ldd	r31, Y+8	; 0x08
    1ed4:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ed6:	95 8d       	ldd	r25, Z+29	; 0x1d
    1ed8:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1eda:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1edc:	80 93 ad 02 	sts	0x02AD, r24
    1ee0:	90 93 ae 02 	sts	0x02AE, r25
    1ee4:	a0 93 af 02 	sts	0x02AF, r26
    1ee8:	b0 93 b0 02 	sts	0x02B0, r27
    1eec:	a1 c0       	rjmp	.+322    	; 0x2030 <findFiles+0x2e6>
			  {
//			     TX_NEWLINE;
//				 transmitString_F(PSTR("Deleting.."));
//				 TX_NEWLINE;
//				 TX_NEWLINE;
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1eee:	cb 01       	movw	r24, r22
    1ef0:	a0 e0       	ldi	r26, 0x00	; 0
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	5c 01       	movw	r10, r24
    1ef6:	99 24       	eor	r9, r9
    1ef8:	88 24       	eor	r8, r8
    1efa:	c9 01       	movw	r24, r18
    1efc:	a0 e0       	ldi	r26, 0x00	; 0
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	88 2a       	or	r8, r24
    1f02:	99 2a       	or	r9, r25
    1f04:	aa 2a       	or	r10, r26
    1f06:	bb 2a       	or	r11, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
    1f08:	85 ee       	ldi	r24, 0xE5	; 229
    1f0a:	af 81       	ldd	r26, Y+7	; 0x07
    1f0c:	b8 85       	ldd	r27, Y+8	; 0x08
    1f0e:	8c 93       	st	X, r24
				 SD_writeSingleBlock (firstSector+sector);
    1f10:	c2 01       	movw	r24, r4
    1f12:	b1 01       	movw	r22, r2
    1f14:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <SD_writeSingleBlock>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
    1f18:	ef 81       	ldd	r30, Y+7	; 0x07
    1f1a:	f8 85       	ldd	r31, Y+8	; 0x08
    1f1c:	44 8d       	ldd	r20, Z+28	; 0x1c
    1f1e:	55 8d       	ldd	r21, Z+29	; 0x1d
    1f20:	66 8d       	ldd	r22, Z+30	; 0x1e
    1f22:	77 8d       	ldd	r23, Z+31	; 0x1f
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <freeMemoryUpdate>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    1f2a:	82 e0       	ldi	r24, 0x02	; 2
    1f2c:	60 e0       	ldi	r22, 0x00	; 0
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	40 e0       	ldi	r20, 0x00	; 0
    1f34:	50 e0       	ldi	r21, 0x00	; 0
    1f36:	0e 94 56 0b 	call	0x16ac	; 0x16ac <getSetFreeCluster>
				 if(firstCluster < cluster)
    1f3a:	86 16       	cp	r8, r22
    1f3c:	97 06       	cpc	r9, r23
    1f3e:	a8 06       	cpc	r10, r24
    1f40:	b9 06       	cpc	r11, r25
    1f42:	30 f4       	brcc	.+12     	; 0x1f50 <findFiles+0x206>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    1f44:	82 e0       	ldi	r24, 0x02	; 2
    1f46:	61 e0       	ldi	r22, 0x01	; 1
    1f48:	a5 01       	movw	r20, r10
    1f4a:	94 01       	movw	r18, r8
    1f4c:	0e 94 56 0b 	call	0x16ac	; 0x16ac <getSetFreeCluster>

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
    1f50:	c5 01       	movw	r24, r10
    1f52:	b4 01       	movw	r22, r8
    1f54:	40 e0       	ldi	r20, 0x00	; 0
    1f56:	00 e0       	ldi	r16, 0x00	; 0
    1f58:	10 e0       	ldi	r17, 0x00	; 0
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <getSetNextCluster>
    1f62:	f6 2e       	mov	r15, r22
    1f64:	e7 2e       	mov	r14, r23
    1f66:	d8 2e       	mov	r13, r24
    1f68:	c9 2e       	mov	r12, r25
					getSetNextCluster (firstCluster, SET, 0);
    1f6a:	c5 01       	movw	r24, r10
    1f6c:	b4 01       	movw	r22, r8
    1f6e:	41 e0       	ldi	r20, 0x01	; 1
    1f70:	00 e0       	ldi	r16, 0x00	; 0
    1f72:	10 e0       	ldi	r17, 0x00	; 0
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <getSetNextCluster>
    1f7c:	8f 2d       	mov	r24, r15
    1f7e:	9e 2d       	mov	r25, r14
    1f80:	ad 2d       	mov	r26, r13
    1f82:	bc 2d       	mov	r27, r12
    1f84:	4c 01       	movw	r8, r24
    1f86:	5d 01       	movw	r10, r26
					if(nextCluster > 0x0ffffff6) 
    1f88:	f7 ef       	ldi	r31, 0xF7	; 247
    1f8a:	8f 16       	cp	r8, r31
    1f8c:	ff ef       	ldi	r31, 0xFF	; 255
    1f8e:	9f 06       	cpc	r9, r31
    1f90:	ff ef       	ldi	r31, 0xFF	; 255
    1f92:	af 06       	cpc	r10, r31
    1f94:	ff e0       	ldi	r31, 0x0F	; 15
    1f96:	bf 06       	cpc	r11, r31
    1f98:	d8 f2       	brcs	.-74     	; 0x1f50 <findFiles+0x206>
    1f9a:	48 c0       	rjmp	.+144    	; 0x202c <findFiles+0x2e2>
//		     {
//			   if(j == 8) transmitByte(' ');
//			   transmitByte (dir->name[j]);
//			 }
//		     transmitString_F (PSTR("   "));
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
    1f9c:	80 31       	cpi	r24, 0x10	; 16
    1f9e:	51 f0       	breq	.+20     	; 0x1fb4 <findFiles+0x26a>
    1fa0:	88 30       	cpi	r24, 0x08	; 8
    1fa2:	41 f0       	breq	.+16     	; 0x1fb4 <findFiles+0x26a>
			 {
//			     transmitString_F (PSTR("FILE" ));
//		         transmitString_F (PSTR("   "));
			     displayMemory (LOW, dir->fileSize);
    1fa4:	34 97       	sbiw	r30, 0x04	; 4
    1fa6:	40 81       	ld	r20, Z
    1fa8:	51 81       	ldd	r21, Z+1	; 0x01
    1faa:	62 81       	ldd	r22, Z+2	; 0x02
    1fac:	73 81       	ldd	r23, Z+3	; 0x03
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	0e 94 b0 0a 	call	0x1560	; 0x1560 <displayMemory>
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb8:	80 96       	adiw	r24, 0x20	; 32
    1fba:	9a 83       	std	Y+2, r25	; 0x02
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	49 81       	ldd	r20, Y+1	; 0x01
    1fc0:	5a 81       	ldd	r21, Y+2	; 0x02
    1fc2:	40 52       	subi	r20, 0x20	; 32
    1fc4:	50 40       	sbci	r21, 0x00	; 0
    for(sector = 0; sector < sectorPerCluster; sector++)
    {
      SD_readSingleBlock (firstSector + sector);
	

      for(i=0; i<bytesPerSector; i+=32)
    1fc6:	80 91 b1 02 	lds	r24, 0x02B1
    1fca:	90 91 b2 02 	lds	r25, 0x02B2
    1fce:	48 17       	cp	r20, r24
    1fd0:	59 07       	cpc	r21, r25
    1fd2:	08 f4       	brcc	.+2      	; 0x1fd6 <findFiles+0x28c>
    1fd4:	0e cf       	rjmp	.-484    	; 0x1df2 <findFiles+0xa8>

  while(1)
  {
    firstSector = getFirstSector (cluster);

    for(sector = 0; sector < sectorPerCluster; sector++)
    1fd6:	08 94       	sec
    1fd8:	e1 1c       	adc	r14, r1
    1fda:	f1 1c       	adc	r15, r1
    1fdc:	01 1d       	adc	r16, r1
    1fde:	11 1d       	adc	r17, r1
    1fe0:	80 91 c7 04 	lds	r24, 0x04C7
    1fe4:	90 91 c8 04 	lds	r25, 0x04C8
    1fe8:	a0 e0       	ldi	r26, 0x00	; 0
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e8 16       	cp	r14, r24
    1fee:	f9 06       	cpc	r15, r25
    1ff0:	0a 07       	cpc	r16, r26
    1ff2:	1b 07       	cpc	r17, r27
    1ff4:	08 f4       	brcc	.+2      	; 0x1ff8 <findFiles+0x2ae>
    1ff6:	f0 ce       	rjmp	.-544    	; 0x1dd8 <findFiles+0x8e>
		  }
        }
      }
    }

    cluster = (getSetNextCluster (cluster, GET, 0));
    1ff8:	c6 01       	movw	r24, r12
    1ffa:	b5 01       	movw	r22, r10
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	00 e0       	ldi	r16, 0x00	; 0
    2000:	10 e0       	ldi	r17, 0x00	; 0
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <getSetNextCluster>
    200a:	5b 01       	movw	r10, r22
    200c:	6c 01       	movw	r12, r24

    if(cluster > 0x0ffffff6)
    200e:	97 ef       	ldi	r25, 0xF7	; 247
    2010:	a9 16       	cp	r10, r25
    2012:	9f ef       	ldi	r25, 0xFF	; 255
    2014:	b9 06       	cpc	r11, r25
    2016:	9f ef       	ldi	r25, 0xFF	; 255
    2018:	c9 06       	cpc	r12, r25
    201a:	9f e0       	ldi	r25, 0x0F	; 15
    201c:	d9 06       	cpc	r13, r25
    201e:	30 f4       	brcc	.+12     	; 0x202c <findFiles+0x2e2>
   	  return 0;
    if(cluster == 0) 
    2020:	a1 14       	cp	r10, r1
    2022:	b1 04       	cpc	r11, r1
    2024:	c1 04       	cpc	r12, r1
    2026:	d1 04       	cpc	r13, r1
    2028:	09 f0       	breq	.+2      	; 0x202c <findFiles+0x2e2>
    202a:	b6 ce       	rjmp	.-660    	; 0x1d98 <findFiles+0x4e>
    202c:	18 86       	std	Y+8, r1	; 0x08
    202e:	1f 82       	std	Y+7, r1	; 0x07
//     transmitString_F(PSTR("Error in getting cluster"));  
	  return 0;
    }
  }
return 0;
}
    2030:	8f 81       	ldd	r24, Y+7	; 0x07
    2032:	98 85       	ldd	r25, Y+8	; 0x08
    2034:	28 96       	adiw	r28, 0x08	; 8
    2036:	0f b6       	in	r0, 0x3f	; 63
    2038:	f8 94       	cli
    203a:	de bf       	out	0x3e, r29	; 62
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	cd bf       	out	0x3d, r28	; 61
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	1f 91       	pop	r17
    2046:	0f 91       	pop	r16
    2048:	ff 90       	pop	r15
    204a:	ef 90       	pop	r14
    204c:	df 90       	pop	r13
    204e:	cf 90       	pop	r12
    2050:	bf 90       	pop	r11
    2052:	af 90       	pop	r10
    2054:	9f 90       	pop	r9
    2056:	8f 90       	pop	r8
    2058:	7f 90       	pop	r7
    205a:	6f 90       	pop	r6
    205c:	5f 90       	pop	r5
    205e:	4f 90       	pop	r4
    2060:	3f 90       	pop	r3
    2062:	2f 90       	pop	r2
    2064:	08 95       	ret

00002066 <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    2066:	cf 93       	push	r28
    2068:	df 93       	push	r29
    206a:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    206c:	0e 94 2c 0a 	call	0x1458	; 0x1458 <convertFileName>
  if(error) return;
    2070:	88 23       	and	r24, r24
    2072:	21 f4       	brne	.+8      	; 0x207c <deleteFile+0x16>

  findFiles (DELETE, fileName);
    2074:	82 e0       	ldi	r24, 0x02	; 2
    2076:	be 01       	movw	r22, r28
    2078:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <findFiles>
}
    207c:	df 91       	pop	r29
    207e:	cf 91       	pop	r28
    2080:	08 95       	ret

00002082 <readFile>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    2082:	2f 92       	push	r2
    2084:	3f 92       	push	r3
    2086:	4f 92       	push	r4
    2088:	5f 92       	push	r5
    208a:	6f 92       	push	r6
    208c:	7f 92       	push	r7
    208e:	8f 92       	push	r8
    2090:	9f 92       	push	r9
    2092:	af 92       	push	r10
    2094:	bf 92       	push	r11
    2096:	cf 92       	push	r12
    2098:	df 92       	push	r13
    209a:	ef 92       	push	r14
    209c:	ff 92       	push	r15
    209e:	0f 93       	push	r16
    20a0:	1f 93       	push	r17
    20a2:	df 93       	push	r29
    20a4:	cf 93       	push	r28
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <readFile+0x26>
    20a8:	00 d0       	rcall	.+0      	; 0x20aa <readFile+0x28>
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	e8 2e       	mov	r14, r24
    20b0:	8b 01       	movw	r16, r22
  struct dir_Structure *dir;
  unsigned long cluster, byteCounter = 0, fileSize, firstSector;
  unsigned int k;
  unsigned char j, error;

  error = convertFileName (fileName); //zamiana nazwy pliku w fileName na format dla FAT
    20b2:	cb 01       	movw	r24, r22
    20b4:	0e 94 2c 0a 	call	0x1458	; 0x1458 <convertFileName>
  if(error) return 2;
    20b8:	88 23       	and	r24, r24
    20ba:	11 f0       	breq	.+4      	; 0x20c0 <readFile+0x3e>
    20bc:	82 e0       	ldi	r24, 0x02	; 2
    20be:	8c c0       	rjmp	.+280    	; 0x21d8 <readFile+0x156>

  dir = findFiles (GET_FILE, fileName); //pobranie lokalizacji pliku
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	b8 01       	movw	r22, r16
    20c4:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <findFiles>
    20c8:	9c 01       	movw	r18, r24
  if(dir == 0) 
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	09 f4       	brne	.+2      	; 0x20d0 <readFile+0x4e>
    20ce:	83 c0       	rjmp	.+262    	; 0x21d6 <readFile+0x154>
    return (0);

  if(flag == VERIFY) return (1);	//specified file name is already existing
    20d0:	22 24       	eor	r2, r2
    20d2:	23 94       	inc	r2
    20d4:	e2 14       	cp	r14, r2
    20d6:	11 f4       	brne	.+4      	; 0x20dc <readFile+0x5a>
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	7e c0       	rjmp	.+252    	; 0x21d8 <readFile+0x156>

  cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    20dc:	dc 01       	movw	r26, r24
    20de:	54 96       	adiw	r26, 0x14	; 20
    20e0:	8d 91       	ld	r24, X+
    20e2:	9c 91       	ld	r25, X
    20e4:	55 97       	sbiw	r26, 0x15	; 21
    20e6:	a0 e0       	ldi	r26, 0x00	; 0
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	4c 01       	movw	r8, r24
    20ec:	77 24       	eor	r7, r7
    20ee:	66 24       	eor	r6, r6
    20f0:	f9 01       	movw	r30, r18
    20f2:	82 8d       	ldd	r24, Z+26	; 0x1a
    20f4:	93 8d       	ldd	r25, Z+27	; 0x1b
    20f6:	a0 e0       	ldi	r26, 0x00	; 0
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	68 2a       	or	r6, r24
    20fc:	79 2a       	or	r7, r25
    20fe:	8a 2a       	or	r8, r26
    2100:	9b 2a       	or	r9, r27

  fileSize = dir->fileSize;
    2102:	d9 01       	movw	r26, r18
    2104:	5c 96       	adiw	r26, 0x1c	; 28
    2106:	2d 90       	ld	r2, X+
    2108:	3d 90       	ld	r3, X+
    210a:	4d 90       	ld	r4, X+
    210c:	5c 90       	ld	r5, X
    210e:	5f 97       	sbiw	r26, 0x1f	; 31
    2110:	29 82       	std	Y+1, r2	; 0x01
    2112:	3a 82       	std	Y+2, r3	; 0x02
    2114:	4b 82       	std	Y+3, r4	; 0x03
    2116:	5c 82       	std	Y+4, r5	; 0x04
    2118:	22 24       	eor	r2, r2
    211a:	33 24       	eor	r3, r3
    211c:	21 01       	movw	r4, r2
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    211e:	20 91 c7 04 	lds	r18, 0x04C7
    2122:	30 91 c8 04 	lds	r19, 0x04C8
    2126:	e0 90 a9 02 	lds	r14, 0x02A9
    212a:	f0 90 aa 02 	lds	r15, 0x02AA
    212e:	00 91 ab 02 	lds	r16, 0x02AB
    2132:	10 91 ac 02 	lds	r17, 0x02AC
    2136:	c4 01       	movw	r24, r8
    2138:	b3 01       	movw	r22, r6
    213a:	62 50       	subi	r22, 0x02	; 2
    213c:	70 40       	sbci	r23, 0x00	; 0
    213e:	80 40       	sbci	r24, 0x00	; 0
    2140:	90 40       	sbci	r25, 0x00	; 0
    2142:	40 e0       	ldi	r20, 0x00	; 0
    2144:	50 e0       	ldi	r21, 0x00	; 0
    2146:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <__mulsi3>
    214a:	5b 01       	movw	r10, r22
    214c:	6c 01       	movw	r12, r24
    214e:	ae 0c       	add	r10, r14
    2150:	bf 1c       	adc	r11, r15
    2152:	c0 1e       	adc	r12, r16
    2154:	d1 1e       	adc	r13, r17
    2156:	10 e0       	ldi	r17, 0x00	; 0
    2158:	24 c0       	rjmp	.+72     	; 0x21a2 <readFile+0x120>
  {
    firstSector = getFirstSector (cluster);

    for(j=0; j<sectorPerCluster; j++)
    {
      SD_readSingleBlock(firstSector + j);
    215a:	c6 01       	movw	r24, r12
    215c:	b5 01       	movw	r22, r10
    215e:	61 0f       	add	r22, r17
    2160:	71 1d       	adc	r23, r1
    2162:	81 1d       	adc	r24, r1
    2164:	91 1d       	adc	r25, r1
    2166:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <SD_readSingleBlock>
    216a:	d2 01       	movw	r26, r4
    216c:	c1 01       	movw	r24, r2
    
	  for(k=0; k<512; k++)
    216e:	a2 01       	movw	r20, r4
    2170:	91 01       	movw	r18, r2
    2172:	20 50       	subi	r18, 0x00	; 0
    2174:	3e 4f       	sbci	r19, 0xFE	; 254
    2176:	4f 4f       	sbci	r20, 0xFF	; 255
    2178:	5f 4f       	sbci	r21, 0xFF	; 255
      {
//      transmitByte(buffer[k]);
        if ((byteCounter++) >= fileSize ) return 0;
    217a:	29 80       	ldd	r2, Y+1	; 0x01
    217c:	3a 80       	ldd	r3, Y+2	; 0x02
    217e:	4b 80       	ldd	r4, Y+3	; 0x03
    2180:	5c 80       	ldd	r5, Y+4	; 0x04
    2182:	82 15       	cp	r24, r2
    2184:	93 05       	cpc	r25, r3
    2186:	a4 05       	cpc	r26, r4
    2188:	b5 05       	cpc	r27, r5
    218a:	28 f5       	brcc	.+74     	; 0x21d6 <readFile+0x154>
    218c:	01 96       	adiw	r24, 0x01	; 1
    218e:	a1 1d       	adc	r26, r1
    2190:	b1 1d       	adc	r27, r1

    for(j=0; j<sectorPerCluster; j++)
    {
      SD_readSingleBlock(firstSector + j);
    
	  for(k=0; k<512; k++)
    2192:	82 17       	cp	r24, r18
    2194:	93 07       	cpc	r25, r19
    2196:	a4 07       	cpc	r26, r20
    2198:	b5 07       	cpc	r27, r21
    219a:	79 f7       	brne	.-34     	; 0x217a <readFile+0xf8>

  while(1)
  {
    firstSector = getFirstSector (cluster);

    for(j=0; j<sectorPerCluster; j++)
    219c:	1f 5f       	subi	r17, 0xFF	; 255
    219e:	1c 01       	movw	r2, r24
    21a0:	2d 01       	movw	r4, r26
    21a2:	20 91 c7 04 	lds	r18, 0x04C7
    21a6:	30 91 c8 04 	lds	r19, 0x04C8
    21aa:	81 2f       	mov	r24, r17
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	82 17       	cp	r24, r18
    21b0:	93 07       	cpc	r25, r19
    21b2:	98 f2       	brcs	.-90     	; 0x215a <readFile+0xd8>
      {
//      transmitByte(buffer[k]);
        if ((byteCounter++) >= fileSize ) return 0;
      }
    }
    cluster = getSetNextCluster (cluster, GET, 0);
    21b4:	c4 01       	movw	r24, r8
    21b6:	b3 01       	movw	r22, r6
    21b8:	40 e0       	ldi	r20, 0x00	; 0
    21ba:	00 e0       	ldi	r16, 0x00	; 0
    21bc:	10 e0       	ldi	r17, 0x00	; 0
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <getSetNextCluster>
    21c6:	3b 01       	movw	r6, r22
    21c8:	4c 01       	movw	r8, r24
    if(cluster == 0) 
    21ca:	61 15       	cp	r22, r1
    21cc:	71 05       	cpc	r23, r1
    21ce:	81 05       	cpc	r24, r1
    21d0:	91 05       	cpc	r25, r1
    21d2:	09 f0       	breq	.+2      	; 0x21d6 <readFile+0x154>
    21d4:	a4 cf       	rjmp	.-184    	; 0x211e <readFile+0x9c>
    21d6:	80 e0       	ldi	r24, 0x00	; 0
//    transmitString_F(PSTR("Error in getting cluster")); 
	  return 0;
	}
  }
  return 0;
}
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	1f 91       	pop	r17
    21e6:	0f 91       	pop	r16
    21e8:	ff 90       	pop	r15
    21ea:	ef 90       	pop	r14
    21ec:	df 90       	pop	r13
    21ee:	cf 90       	pop	r12
    21f0:	bf 90       	pop	r11
    21f2:	af 90       	pop	r10
    21f4:	9f 90       	pop	r9
    21f6:	8f 90       	pop	r8
    21f8:	7f 90       	pop	r7
    21fa:	6f 90       	pop	r6
    21fc:	5f 90       	pop	r5
    21fe:	4f 90       	pop	r4
    2200:	3f 90       	pop	r3
    2202:	2f 90       	pop	r2
    2204:	08 95       	ret

00002206 <writeFile>:
//Argumenty: pointer do nazwy pliku, pointer do rekordu
//Zwraca: 0 gdy OK lub kod b³êdu (1-4)
//************************************************************************************
//++void writeFile (unsigned char *fileName, unsigned char *rek)
unsigned char writeFile (unsigned char *fileName, unsigned char *rek)
{
    2206:	2f 92       	push	r2
    2208:	3f 92       	push	r3
    220a:	4f 92       	push	r4
    220c:	5f 92       	push	r5
    220e:	6f 92       	push	r6
    2210:	7f 92       	push	r7
    2212:	8f 92       	push	r8
    2214:	9f 92       	push	r9
    2216:	af 92       	push	r10
    2218:	bf 92       	push	r11
    221a:	cf 92       	push	r12
    221c:	df 92       	push	r13
    221e:	ef 92       	push	r14
    2220:	ff 92       	push	r15
    2222:	0f 93       	push	r16
    2224:	1f 93       	push	r17
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
    222e:	2b 97       	sbiw	r28, 0x0b	; 11
    2230:	0f b6       	in	r0, 0x3f	; 63
    2232:	f8 94       	cli
    2234:	de bf       	out	0x3e, r29	; 62
    2236:	0f be       	out	0x3f, r0	; 63
    2238:	cd bf       	out	0x3d, r28	; 61
    223a:	99 87       	std	Y+9, r25	; 0x09
    223c:	88 87       	std	Y+8, r24	; 0x08
    223e:	7b 87       	std	Y+11, r23	; 0x0b
    2240:	6a 87       	std	Y+10, r22	; 0x0a
  unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;
  unsigned int nr_bajtu;

  nr_bajtu=0;

  j = readFile (VERIFY, fileName);
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	68 85       	ldd	r22, Y+8	; 0x08
    2246:	79 85       	ldd	r23, Y+9	; 0x09
    2248:	0e 94 41 10 	call	0x2082	; 0x2082 <readFile>

  if(j == 1) 
    224c:	81 30       	cpi	r24, 0x01	; 1
    224e:	09 f0       	breq	.+2      	; 0x2252 <writeFile+0x4c>
    2250:	56 c0       	rjmp	.+172    	; 0x22fe <writeFile+0xf8>
  {
    //  transmitString_F(PSTR(" File already exists, appending data..")); 
    appendFile = 1;
    cluster = appendStartCluster;
    2252:	60 90 d7 04 	lds	r6, 0x04D7
    2256:	70 90 d8 04 	lds	r7, 0x04D8
    225a:	80 90 d9 04 	lds	r8, 0x04D9
    225e:	90 90 da 04 	lds	r9, 0x04DA
    2262:	aa 24       	eor	r10, r10
    2264:	bb 24       	eor	r11, r11
    2266:	65 01       	movw	r12, r10
    clusterCount=0;
    while(1)
    {
      nextCluster = getSetNextCluster (cluster, GET, 0);
    2268:	c4 01       	movw	r24, r8
    226a:	b3 01       	movw	r22, r6
    226c:	40 e0       	ldi	r20, 0x00	; 0
    226e:	00 e0       	ldi	r16, 0x00	; 0
    2270:	10 e0       	ldi	r17, 0x00	; 0
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <getSetNextCluster>
      if(nextCluster == EOF) break;
    227a:	6f 3f       	cpi	r22, 0xFF	; 255
    227c:	2f ef       	ldi	r18, 0xFF	; 255
    227e:	72 07       	cpc	r23, r18
    2280:	2f ef       	ldi	r18, 0xFF	; 255
    2282:	82 07       	cpc	r24, r18
    2284:	2f e0       	ldi	r18, 0x0F	; 15
    2286:	92 07       	cpc	r25, r18
    2288:	41 f0       	breq	.+16     	; 0x229a <writeFile+0x94>
	  cluster = nextCluster;
	  clusterCount++;
    228a:	08 94       	sec
    228c:	a1 1c       	adc	r10, r1
    228e:	b1 1c       	adc	r11, r1
    2290:	c1 1c       	adc	r12, r1
    2292:	d1 1c       	adc	r13, r1
    2294:	3b 01       	movw	r6, r22
    2296:	4c 01       	movw	r8, r24
    2298:	e7 cf       	rjmp	.-50     	; 0x2268 <writeFile+0x62>
    }

    sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    229a:	20 91 c7 04 	lds	r18, 0x04C7
    229e:	30 91 c8 04 	lds	r19, 0x04C8
    22a2:	60 91 b1 02 	lds	r22, 0x02B1
    22a6:	70 91 b2 02 	lds	r23, 0x02B2
    22aa:	e0 90 b1 02 	lds	r14, 0x02B1
    22ae:	f0 90 b2 02 	lds	r15, 0x02B2
    22b2:	80 e0       	ldi	r24, 0x00	; 0
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	40 e0       	ldi	r20, 0x00	; 0
    22b8:	50 e0       	ldi	r21, 0x00	; 0
    22ba:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <__mulsi3>
    22be:	a6 01       	movw	r20, r12
    22c0:	95 01       	movw	r18, r10
    22c2:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <__mulsi3>
    22c6:	9b 01       	movw	r18, r22
    22c8:	ac 01       	movw	r20, r24
    22ca:	60 91 ad 02 	lds	r22, 0x02AD
    22ce:	70 91 ae 02 	lds	r23, 0x02AE
    22d2:	80 91 af 02 	lds	r24, 0x02AF
    22d6:	90 91 b0 02 	lds	r25, 0x02B0
    22da:	62 1b       	sub	r22, r18
    22dc:	73 0b       	sbc	r23, r19
    22de:	84 0b       	sbc	r24, r20
    22e0:	95 0b       	sbc	r25, r21
    22e2:	00 e0       	ldi	r16, 0x00	; 0
    22e4:	10 e0       	ldi	r17, 0x00	; 0
    22e6:	a8 01       	movw	r20, r16
    22e8:	97 01       	movw	r18, r14
    22ea:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <__udivmodsi4>
    22ee:	29 83       	std	Y+1, r18	; 0x01
    22f0:	21 e0       	ldi	r18, 0x01	; 1
    22f2:	2f 83       	std	Y+7, r18	; 0x07
    22f4:	1d 82       	std	Y+5, r1	; 0x05
    22f6:	1c 82       	std	Y+4, r1	; 0x04
    22f8:	1b 82       	std	Y+3, r1	; 0x03
    22fa:	1a 82       	std	Y+2, r1	; 0x02
    22fc:	48 c0       	rjmp	.+144    	; 0x238e <writeFile+0x188>
    start = 1;
    //  appendFile();
    //  return;
  }
  else 
    if(j == 2) 
    22fe:	82 30       	cpi	r24, 0x02	; 2
    2300:	11 f4       	brne	.+4      	; 0x2306 <writeFile+0x100>
    2302:	84 e0       	ldi	r24, 0x04	; 4
    2304:	dd c2       	rjmp	.+1466   	; 0x28c0 <writeFile+0x6ba>
    else
     {
//     TX_NEWLINE;
//     transmitString_F(PSTR(" Creating File.."));

       cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    2306:	82 e0       	ldi	r24, 0x02	; 2
    2308:	60 e0       	ldi	r22, 0x00	; 0
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e0       	ldi	r20, 0x00	; 0
    2310:	50 e0       	ldi	r21, 0x00	; 0
    2312:	0e 94 56 0b 	call	0x16ac	; 0x16ac <getSetFreeCluster>
    2316:	9b 01       	movw	r18, r22
    2318:	ac 01       	movw	r20, r24
       if(cluster > totalClusters)
    231a:	80 91 b4 02 	lds	r24, 0x02B4
    231e:	90 91 b5 02 	lds	r25, 0x02B5
    2322:	a0 91 b6 02 	lds	r26, 0x02B6
    2326:	b0 91 b7 02 	lds	r27, 0x02B7
    232a:	82 17       	cp	r24, r18
    232c:	93 07       	cpc	r25, r19
    232e:	a4 07       	cpc	r26, r20
    2330:	b5 07       	cpc	r27, r21
    2332:	40 f4       	brcc	.+16     	; 0x2344 <writeFile+0x13e>
         cluster = rootCluster;
    2334:	20 91 b8 02 	lds	r18, 0x02B8
    2338:	30 91 b9 02 	lds	r19, 0x02B9
    233c:	40 91 ba 02 	lds	r20, 0x02BA
    2340:	50 91 bb 02 	lds	r21, 0x02BB

       cluster = searchNextFreeCluster(cluster);
    2344:	ca 01       	movw	r24, r20
    2346:	b9 01       	movw	r22, r18
    2348:	0e 94 cc 0a 	call	0x1598	; 0x1598 <searchNextFreeCluster>
    234c:	3b 01       	movw	r6, r22
    234e:	4c 01       	movw	r8, r24
       if(cluster == 0)
    2350:	61 15       	cp	r22, r1
    2352:	71 05       	cpc	r23, r1
    2354:	81 05       	cpc	r24, r1
    2356:	91 05       	cpc	r25, r1
    2358:	09 f4       	brne	.+2      	; 0x235c <writeFile+0x156>
    235a:	b1 c2       	rjmp	.+1378   	; 0x28be <writeFile+0x6b8>
        {
//        TX_NEWLINE;
//        transmitString_F(PSTR(" No free cluster!"));
	      return 2;
        }
       getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    235c:	41 e0       	ldi	r20, 0x01	; 1
    235e:	0f ef       	ldi	r16, 0xFF	; 255
    2360:	1f ef       	ldi	r17, 0xFF	; 255
    2362:	2f ef       	ldi	r18, 0xFF	; 255
    2364:	3f e0       	ldi	r19, 0x0F	; 15
    2366:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <getSetNextCluster>
   
       firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    236a:	c4 01       	movw	r24, r8
    236c:	aa 27       	eor	r26, r26
    236e:	bb 27       	eor	r27, r27
    2370:	9d 83       	std	Y+5, r25	; 0x05
    2372:	8c 83       	std	Y+4, r24	; 0x04
       firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
    2374:	7b 82       	std	Y+3, r7	; 0x03
    2376:	6a 82       	std	Y+2, r6	; 0x02
       fileSize = 0;
    2378:	10 92 ad 02 	sts	0x02AD, r1
    237c:	10 92 ae 02 	sts	0x02AE, r1
    2380:	10 92 af 02 	sts	0x02AF, r1
    2384:	10 92 b0 02 	sts	0x02B0, r1
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	1f 82       	std	Y+7, r1	; 0x07
    238c:	19 82       	std	Y+1, r1	; 0x01
    238e:	1e 82       	std	Y+6, r1	; 0x06
    2390:	aa 24       	eor	r10, r10
    2392:	bb 24       	eor	r11, r11
  while(1) //====
  {
    if(start)
      {
        start = 0;
	    startBlock = getFirstSector (cluster) + sector;
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	28 2e       	mov	r2, r24
    2398:	33 24       	eor	r3, r3
    239a:	44 24       	eor	r4, r4
    239c:	55 24       	eor	r5, r5
    239e:	c4 01       	movw	r24, r8
    23a0:	b3 01       	movw	r22, r6
    23a2:	62 50       	subi	r22, 0x02	; 2
    23a4:	70 40       	sbci	r23, 0x00	; 0
    23a6:	80 40       	sbci	r24, 0x00	; 0
    23a8:	90 40       	sbci	r25, 0x00	; 0
       fileSize = 0;
     }

  while(1) //====
  {
    if(start)
    23aa:	22 23       	and	r18, r18
    23ac:	e1 f1       	breq	.+120    	; 0x2426 <writeFile+0x220>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    23ae:	20 91 c7 04 	lds	r18, 0x04C7
    23b2:	30 91 c8 04 	lds	r19, 0x04C8
    23b6:	e0 90 a9 02 	lds	r14, 0x02A9
    23ba:	f0 90 aa 02 	lds	r15, 0x02AA
    23be:	00 91 ab 02 	lds	r16, 0x02AB
    23c2:	10 91 ac 02 	lds	r17, 0x02AC
  while(1) //====
  {
    if(start)
      {
        start = 0;
	    startBlock = getFirstSector (cluster) + sector;
    23c6:	e2 0c       	add	r14, r2
    23c8:	f3 1c       	adc	r15, r3
    23ca:	04 1d       	adc	r16, r4
    23cc:	15 1d       	adc	r17, r5
    23ce:	40 e0       	ldi	r20, 0x00	; 0
    23d0:	50 e0       	ldi	r21, 0x00	; 0
    23d2:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <__mulsi3>
    23d6:	e6 0e       	add	r14, r22
    23d8:	f7 1e       	adc	r15, r23
    23da:	08 1f       	adc	r16, r24
    23dc:	19 1f       	adc	r17, r25
    23de:	e0 92 be 02 	sts	0x02BE, r14
    23e2:	f0 92 bf 02 	sts	0x02BF, r15
    23e6:	00 93 c0 02 	sts	0x02C0, r16
    23ea:	10 93 c1 02 	sts	0x02C1, r17
	    SD_readSingleBlock (startBlock);
    23ee:	60 91 be 02 	lds	r22, 0x02BE
    23f2:	70 91 bf 02 	lds	r23, 0x02BF
    23f6:	80 91 c0 02 	lds	r24, 0x02C0
    23fa:	90 91 c1 02 	lds	r25, 0x02C1
    23fe:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <SD_readSingleBlock>
	    i = fileSize % bytesPerSector;
    2402:	20 91 b1 02 	lds	r18, 0x02B1
    2406:	30 91 b2 02 	lds	r19, 0x02B2
    240a:	40 e0       	ldi	r20, 0x00	; 0
    240c:	50 e0       	ldi	r21, 0x00	; 0
    240e:	60 91 ad 02 	lds	r22, 0x02AD
    2412:	70 91 ae 02 	lds	r23, 0x02AE
    2416:	80 91 af 02 	lds	r24, 0x02AF
    241a:	90 91 b0 02 	lds	r25, 0x02B0
    241e:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <__udivmodsi4>
    2422:	09 81       	ldd	r16, Y+1	; 0x01
    2424:	1f c0       	rjmp	.+62     	; 0x2464 <writeFile+0x25e>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    2426:	20 91 c7 04 	lds	r18, 0x04C7
    242a:	30 91 c8 04 	lds	r19, 0x04C8
    242e:	e0 90 a9 02 	lds	r14, 0x02A9
    2432:	f0 90 aa 02 	lds	r15, 0x02AA
    2436:	00 91 ab 02 	lds	r16, 0x02AB
    243a:	10 91 ac 02 	lds	r17, 0x02AC
    243e:	40 e0       	ldi	r20, 0x00	; 0
    2440:	50 e0       	ldi	r21, 0x00	; 0
    2442:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <__mulsi3>
    2446:	e6 0e       	add	r14, r22
    2448:	f7 1e       	adc	r15, r23
    244a:	08 1f       	adc	r16, r24
    244c:	19 1f       	adc	r17, r25
	    i = fileSize % bytesPerSector;
	    j = sector;
      }
     else
      {
        startBlock = getFirstSector (cluster);
    244e:	e0 92 be 02 	sts	0x02BE, r14
    2452:	f0 92 bf 02 	sts	0x02BF, r15
    2456:	00 93 c0 02 	sts	0x02C0, r16
    245a:	10 93 c1 02 	sts	0x02C1, r17
    245e:	00 e0       	ldi	r16, 0x00	; 0
    2460:	60 e0       	ldi	r22, 0x00	; 0
    2462:	70 e0       	ldi	r23, 0x00	; 0
    2464:	ea 84       	ldd	r14, Y+10	; 0x0a
    2466:	fb 84       	ldd	r15, Y+11	; 0x0b
    2468:	ea 0c       	add	r14, r10
    246a:	fb 1c       	adc	r15, r11
//  transmitString_F(PSTR(" Enter text (end with ~):"));

   
    do //----
    {
      if(sectorEndFlag == 1) //special case when the last character in previous sector was '\r'
    246c:	9e 81       	ldd	r25, Y+6	; 0x06
    246e:	91 30       	cpi	r25, 0x01	; 1
    2470:	d1 f4       	brne	.+52     	; 0x24a6 <writeFile+0x2a0>
	    {
//	 	  transmitByte ('\n');
          buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    2472:	fb 01       	movw	r30, r22
    2474:	e9 53       	subi	r30, 0x39	; 57
    2476:	fd 4f       	sbci	r31, 0xFD	; 253
    2478:	aa e0       	ldi	r26, 0x0A	; 10
    247a:	a0 83       	st	Z, r26
    247c:	6f 5f       	subi	r22, 0xFF	; 255
    247e:	7f 4f       	sbci	r23, 0xFF	; 255
		  fileSize++;
    2480:	80 91 ad 02 	lds	r24, 0x02AD
    2484:	90 91 ae 02 	lds	r25, 0x02AE
    2488:	a0 91 af 02 	lds	r26, 0x02AF
    248c:	b0 91 b0 02 	lds	r27, 0x02B0
    2490:	01 96       	adiw	r24, 0x01	; 1
    2492:	a1 1d       	adc	r26, r1
    2494:	b1 1d       	adc	r27, r1
    2496:	80 93 ad 02 	sts	0x02AD, r24
    249a:	90 93 ae 02 	sts	0x02AE, r25
    249e:	a0 93 af 02 	sts	0x02AF, r26
    24a2:	b0 93 b0 02 	sts	0x02B0, r27




      //&&&&&&&&&&&&&&&&&& dopisywanie
      data=rek[nr_bajtu]; 
    24a6:	f7 01       	movw	r30, r14
    24a8:	10 81       	ld	r17, Z
	  nr_bajtu++;
    24aa:	08 94       	sec
    24ac:	a1 1c       	adc	r10, r1
    24ae:	b1 1c       	adc	r11, r1
	  if (nr_bajtu==23)  //****tu jest d³ugoœæ rekordu
    24b0:	f7 e1       	ldi	r31, 0x17	; 23
    24b2:	af 16       	cp	r10, r31
    24b4:	b1 04       	cpc	r11, r1
    24b6:	11 f4       	brne	.+4      	; 0x24bc <writeFile+0x2b6>
    24b8:	1d e0       	ldi	r17, 0x0D	; 13
    24ba:	05 c0       	rjmp	.+10     	; 0x24c6 <writeFile+0x2c0>
	   {
         data='\r';  //powrót karetki czyli nowa linia
	   };
	  if (nr_bajtu>23)   //****tu jest d³ugoœæ rekordu
    24bc:	28 e1       	ldi	r18, 0x18	; 24
    24be:	a2 16       	cp	r10, r18
    24c0:	b1 04       	cpc	r11, r1
    24c2:	08 f0       	brcs	.+2      	; 0x24c6 <writeFile+0x2c0>
    24c4:	1e e7       	ldi	r17, 0x7E	; 126
//		   fileSize--;
//	     } 
//	    continue;     
//	   }
//	  transmitByte(data);
      buffer[i++] = data;
    24c6:	fb 01       	movw	r30, r22
    24c8:	e9 53       	subi	r30, 0x39	; 57
    24ca:	fd 4f       	sbci	r31, 0xFD	; 253
    24cc:	10 83       	st	Z, r17
    24ce:	6f 5f       	subi	r22, 0xFF	; 255
    24d0:	7f 4f       	sbci	r23, 0xFF	; 255
	  fileSize++;
    24d2:	80 91 ad 02 	lds	r24, 0x02AD
    24d6:	90 91 ae 02 	lds	r25, 0x02AE
    24da:	a0 91 af 02 	lds	r26, 0x02AF
    24de:	b0 91 b0 02 	lds	r27, 0x02B0
    24e2:	01 96       	adiw	r24, 0x01	; 1
    24e4:	a1 1d       	adc	r26, r1
    24e6:	b1 1d       	adc	r27, r1
    24e8:	80 93 ad 02 	sts	0x02AD, r24
    24ec:	90 93 ae 02 	sts	0x02AE, r25
    24f0:	a0 93 af 02 	sts	0x02AF, r26
    24f4:	b0 93 b0 02 	sts	0x02B0, r27
      if(data == '\r')  //'Carriege Return (CR)' character
    24f8:	1d 30       	cpi	r17, 0x0D	; 13
    24fa:	c9 f4       	brne	.+50     	; 0x252e <writeFile+0x328>
       {
         if(i == 512)
    24fc:	e2 e0       	ldi	r30, 0x02	; 2
    24fe:	60 30       	cpi	r22, 0x00	; 0
    2500:	7e 07       	cpc	r23, r30
    2502:	19 f4       	brne	.+6      	; 0x250a <writeFile+0x304>
    2504:	f1 e0       	ldi	r31, 0x01	; 1
    2506:	fe 83       	std	Y+6, r31	; 0x06
    2508:	19 c0       	rjmp	.+50     	; 0x253c <writeFile+0x336>
		    sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
	      else
		  { 
//		    transmitByte ('\n');
            buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    250a:	fb 01       	movw	r30, r22
    250c:	e9 53       	subi	r30, 0x39	; 57
    250e:	fd 4f       	sbci	r31, 0xFD	; 253
    2510:	2a e0       	ldi	r18, 0x0A	; 10
    2512:	20 83       	st	Z, r18
    2514:	6f 5f       	subi	r22, 0xFF	; 255
    2516:	7f 4f       	sbci	r23, 0xFF	; 255
		    fileSize++;
    2518:	01 96       	adiw	r24, 0x01	; 1
    251a:	a1 1d       	adc	r26, r1
    251c:	b1 1d       	adc	r27, r1
    251e:	80 93 ad 02 	sts	0x02AD, r24
    2522:	90 93 ae 02 	sts	0x02AE, r25
    2526:	a0 93 af 02 	sts	0x02AF, r26
    252a:	b0 93 b0 02 	sts	0x02B0, r27
	      }
       }
	 
      if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    252e:	82 e0       	ldi	r24, 0x02	; 2
    2530:	60 30       	cpi	r22, 0x00	; 0
    2532:	78 07       	cpc	r23, r24
    2534:	10 f4       	brcc	.+4      	; 0x253a <writeFile+0x334>
    2536:	1e 82       	std	Y+6, r1	; 0x06
    2538:	2a c0       	rjmp	.+84     	; 0x258e <writeFile+0x388>
    253a:	1e 82       	std	Y+6, r1	; 0x06
	   {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	    i=0;
	    error = SD_writeSingleBlock (startBlock);
    253c:	60 91 be 02 	lds	r22, 0x02BE
    2540:	70 91 bf 02 	lds	r23, 0x02BF
    2544:	80 91 c0 02 	lds	r24, 0x02C0
    2548:	90 91 c1 02 	lds	r25, 0x02C1
    254c:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <SD_writeSingleBlock>
        j++;
    2550:	0f 5f       	subi	r16, 0xFF	; 255
	    if(j == sectorPerCluster) {j = 0; break;}
    2552:	20 91 c7 04 	lds	r18, 0x04C7
    2556:	30 91 c8 04 	lds	r19, 0x04C8
    255a:	80 2f       	mov	r24, r16
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	82 17       	cp	r24, r18
    2560:	93 07       	cpc	r25, r19
    2562:	e1 f0       	breq	.+56     	; 0x259c <writeFile+0x396>
	    startBlock++; 
    2564:	80 91 be 02 	lds	r24, 0x02BE
    2568:	90 91 bf 02 	lds	r25, 0x02BF
    256c:	a0 91 c0 02 	lds	r26, 0x02C0
    2570:	b0 91 c1 02 	lds	r27, 0x02C1
    2574:	01 96       	adiw	r24, 0x01	; 1
    2576:	a1 1d       	adc	r26, r1
    2578:	b1 1d       	adc	r27, r1
    257a:	80 93 be 02 	sts	0x02BE, r24
    257e:	90 93 bf 02 	sts	0x02BF, r25
    2582:	a0 93 c0 02 	sts	0x02C0, r26
    2586:	b0 93 c1 02 	sts	0x02C1, r27
    258a:	60 e0       	ldi	r22, 0x00	; 0
    258c:	70 e0       	ldi	r23, 0x00	; 0
    258e:	08 94       	sec
    2590:	e1 1c       	adc	r14, r1
    2592:	f1 1c       	adc	r15, r1
       }
    }while (data != '~'); //----
    2594:	1e 37       	cpi	r17, 0x7E	; 126
    2596:	09 f0       	breq	.+2      	; 0x259a <writeFile+0x394>
    2598:	69 cf       	rjmp	.-302    	; 0x246c <writeFile+0x266>
    259a:	05 c0       	rjmp	.+10     	; 0x25a6 <writeFile+0x3a0>


    if(data == '~') 
    259c:	1e 37       	cpi	r17, 0x7E	; 126
    259e:	09 f0       	breq	.+2      	; 0x25a2 <writeFile+0x39c>
    25a0:	3f c0       	rjmp	.+126    	; 0x2620 <writeFile+0x41a>
    25a2:	60 e0       	ldi	r22, 0x00	; 0
    25a4:	70 e0       	ldi	r23, 0x00	; 0
     {
       fileSize--;	//to remove the last entered '~' character
    25a6:	80 91 ad 02 	lds	r24, 0x02AD
    25aa:	90 91 ae 02 	lds	r25, 0x02AE
    25ae:	a0 91 af 02 	lds	r26, 0x02AF
    25b2:	b0 91 b0 02 	lds	r27, 0x02B0
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	a1 09       	sbc	r26, r1
    25ba:	b1 09       	sbc	r27, r1
    25bc:	80 93 ad 02 	sts	0x02AD, r24
    25c0:	90 93 ae 02 	sts	0x02AE, r25
    25c4:	a0 93 af 02 	sts	0x02AF, r26
    25c8:	b0 93 b0 02 	sts	0x02B0, r27
	   i--;
    25cc:	61 50       	subi	r22, 0x01	; 1
    25ce:	70 40       	sbci	r23, 0x00	; 0
    25d0:	06 c0       	rjmp	.+12     	; 0x25de <writeFile+0x3d8>
	   for(;i<512;i++)  //fill the rest of the buffer with 0x00
          buffer[i]= 0x00;
    25d2:	fb 01       	movw	r30, r22
    25d4:	e9 53       	subi	r30, 0x39	; 57
    25d6:	fd 4f       	sbci	r31, 0xFD	; 253
    25d8:	10 82       	st	Z, r1

    if(data == '~') 
     {
       fileSize--;	//to remove the last entered '~' character
	   i--;
	   for(;i<512;i++)  //fill the rest of the buffer with 0x00
    25da:	6f 5f       	subi	r22, 0xFF	; 255
    25dc:	7f 4f       	sbci	r23, 0xFF	; 255
    25de:	92 e0       	ldi	r25, 0x02	; 2
    25e0:	60 30       	cpi	r22, 0x00	; 0
    25e2:	79 07       	cpc	r23, r25
    25e4:	b0 f3       	brcs	.-20     	; 0x25d2 <writeFile+0x3cc>
          buffer[i]= 0x00;
   	   error = SD_writeSingleBlock (startBlock);
    25e6:	60 91 be 02 	lds	r22, 0x02BE
    25ea:	70 91 bf 02 	lds	r23, 0x02BF
    25ee:	80 91 c0 02 	lds	r24, 0x02C0
    25f2:	90 91 c1 02 	lds	r25, 0x02C1
    25f6:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <SD_writeSingleBlock>
    getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
  } //====



  getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    25fa:	82 e0       	ldi	r24, 0x02	; 2
    25fc:	61 e0       	ldi	r22, 0x01	; 1
    25fe:	a4 01       	movw	r20, r8
    2600:	93 01       	movw	r18, r6
    2602:	0e 94 56 0b 	call	0x16ac	; 0x16ac <getSetFreeCluster>

//  error = getDateTime_FAT();    //get current date & time from the RTC
//  if(error) 
//   { 
     dateFAT = 0; 
    2606:	10 92 00 05 	sts	0x0500, r1
    260a:	10 92 ff 04 	sts	0x04FF, r1
     timeFAT = 0;
    260e:	10 92 02 05 	sts	0x0502, r1
    2612:	10 92 01 05 	sts	0x0501, r1
//   }

  if(appendFile)  //executes this loop if file is to be appended
    2616:	af 81       	ldd	r26, Y+7	; 0x07
    2618:	aa 23       	and	r26, r26
    261a:	09 f4       	brne	.+2      	; 0x261e <writeFile+0x418>
    261c:	65 c0       	rjmp	.+202    	; 0x26e8 <writeFile+0x4e2>
    261e:	20 c0       	rjmp	.+64     	; 0x2660 <writeFile+0x45a>
       break;
     } 
	  
    prevCluster = cluster;

    cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    2620:	c4 01       	movw	r24, r8
    2622:	b3 01       	movw	r22, r6
    2624:	0e 94 cc 0a 	call	0x1598	; 0x1598 <searchNextFreeCluster>
    2628:	6b 01       	movw	r12, r22
    262a:	7c 01       	movw	r14, r24

    if(cluster == 0)
    262c:	61 15       	cp	r22, r1
    262e:	71 05       	cpc	r23, r1
    2630:	81 05       	cpc	r24, r1
    2632:	91 05       	cpc	r25, r1
    2634:	09 f4       	brne	.+2      	; 0x2638 <writeFile+0x432>
    2636:	43 c1       	rjmp	.+646    	; 0x28be <writeFile+0x6b8>
//     TX_NEWLINE;
//     transmitString_F(PSTR(" No free cluster!"));
	   return 2;
     }
//!!!!!!!
    getSetNextCluster(prevCluster, SET, cluster);
    2638:	c4 01       	movw	r24, r8
    263a:	b3 01       	movw	r22, r6
    263c:	41 e0       	ldi	r20, 0x01	; 1
    263e:	97 01       	movw	r18, r14
    2640:	86 01       	movw	r16, r12
    2642:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <getSetNextCluster>
    getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    2646:	c7 01       	movw	r24, r14
    2648:	b6 01       	movw	r22, r12
    264a:	41 e0       	ldi	r20, 0x01	; 1
    264c:	0f ef       	ldi	r16, 0xFF	; 255
    264e:	1f ef       	ldi	r17, 0xFF	; 255
    2650:	2f ef       	ldi	r18, 0xFF	; 255
    2652:	3f e0       	ldi	r19, 0x0F	; 15
    2654:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <getSetNextCluster>
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	36 01       	movw	r6, r12
    265c:	47 01       	movw	r8, r14
    265e:	9f ce       	rjmp	.-706    	; 0x239e <writeFile+0x198>
     timeFAT = 0;
//   }

  if(appendFile)  //executes this loop if file is to be appended
   {
     SD_readSingleBlock (appendFileSector);    
    2660:	60 91 fa 04 	lds	r22, 0x04FA
    2664:	70 91 fb 04 	lds	r23, 0x04FB
    2668:	80 91 fc 04 	lds	r24, 0x04FC
    266c:	90 91 fd 04 	lds	r25, 0x04FD
    2670:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <SD_readSingleBlock>
     dir = (struct dir_Structure *) &buffer[appendFileLocation]; 
    2674:	e0 91 97 02 	lds	r30, 0x0297
    2678:	f0 91 98 02 	lds	r31, 0x0298
    267c:	e9 53       	subi	r30, 0x39	; 57
    267e:	fd 4f       	sbci	r31, 0xFD	; 253

     dir->lastAccessDate = 0;   //date of last access ignored
    2680:	13 8a       	std	Z+19, r1	; 0x13
    2682:	12 8a       	std	Z+18, r1	; 0x12
     dir->writeTime = timeFAT;  //setting new time of last write, obtained from RTC
    2684:	80 91 01 05 	lds	r24, 0x0501
    2688:	90 91 02 05 	lds	r25, 0x0502
    268c:	97 8b       	std	Z+23, r25	; 0x17
    268e:	86 8b       	std	Z+22, r24	; 0x16
     dir->writeDate = dateFAT;  //setting new date of last write, obtained from RTC
    2690:	80 91 ff 04 	lds	r24, 0x04FF
    2694:	90 91 00 05 	lds	r25, 0x0500
    2698:	91 8f       	std	Z+25, r25	; 0x19
    269a:	80 8f       	std	Z+24, r24	; 0x18
     extraMemory = fileSize - dir->fileSize;
    269c:	20 91 ad 02 	lds	r18, 0x02AD
    26a0:	30 91 ae 02 	lds	r19, 0x02AE
    26a4:	40 91 af 02 	lds	r20, 0x02AF
    26a8:	50 91 b0 02 	lds	r21, 0x02B0
    26ac:	84 8d       	ldd	r24, Z+28	; 0x1c
    26ae:	95 8d       	ldd	r25, Z+29	; 0x1d
    26b0:	a6 8d       	ldd	r26, Z+30	; 0x1e
    26b2:	b7 8d       	ldd	r27, Z+31	; 0x1f
    26b4:	79 01       	movw	r14, r18
    26b6:	8a 01       	movw	r16, r20
    26b8:	e8 1a       	sub	r14, r24
    26ba:	f9 0a       	sbc	r15, r25
    26bc:	0a 0b       	sbc	r16, r26
    26be:	1b 0b       	sbc	r17, r27
     dir->fileSize = fileSize;
    26c0:	24 8f       	std	Z+28, r18	; 0x1c
    26c2:	35 8f       	std	Z+29, r19	; 0x1d
    26c4:	46 8f       	std	Z+30, r20	; 0x1e
    26c6:	57 8f       	std	Z+31, r21	; 0x1f
     SD_writeSingleBlock (appendFileSector);
    26c8:	60 91 fa 04 	lds	r22, 0x04FA
    26cc:	70 91 fb 04 	lds	r23, 0x04FB
    26d0:	80 91 fc 04 	lds	r24, 0x04FC
    26d4:	90 91 fd 04 	lds	r25, 0x04FD
    26d8:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <SD_writeSingleBlock>
     freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	b8 01       	movw	r22, r16
    26e0:	a7 01       	movw	r20, r14
    26e2:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <freeMemoryUpdate>
    26e6:	c9 c0       	rjmp	.+402    	; 0x287a <writeFile+0x674>
     return 0;
   }

//executes following portion when new file is created

  prevCluster = rootCluster; //root cluster
    26e8:	80 90 b8 02 	lds	r8, 0x02B8
    26ec:	90 90 b9 02 	lds	r9, 0x02B9
    26f0:	a0 90 ba 02 	lds	r10, 0x02BA
    26f4:	b0 90 bb 02 	lds	r11, 0x02BB
    26f8:	22 24       	eor	r2, r2
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    26fa:	20 91 c7 04 	lds	r18, 0x04C7
    26fe:	30 91 c8 04 	lds	r19, 0x04C8
    2702:	e0 90 a9 02 	lds	r14, 0x02A9
    2706:	f0 90 aa 02 	lds	r15, 0x02AA
    270a:	00 91 ab 02 	lds	r16, 0x02AB
    270e:	10 91 ac 02 	lds	r17, 0x02AC
    2712:	c5 01       	movw	r24, r10
    2714:	b4 01       	movw	r22, r8
    2716:	62 50       	subi	r22, 0x02	; 2
    2718:	70 40       	sbci	r23, 0x00	; 0
    271a:	80 40       	sbci	r24, 0x00	; 0
    271c:	90 40       	sbci	r25, 0x00	; 0
    271e:	40 e0       	ldi	r20, 0x00	; 0
    2720:	50 e0       	ldi	r21, 0x00	; 0
    2722:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <__mulsi3>
    2726:	2b 01       	movw	r4, r22
    2728:	3c 01       	movw	r6, r24
    272a:	4e 0c       	add	r4, r14
    272c:	5f 1c       	adc	r5, r15
    272e:	60 1e       	adc	r6, r16
    2730:	71 1e       	adc	r7, r17
    2732:	33 24       	eor	r3, r3
    2734:	7d c0       	rjmp	.+250    	; 0x2830 <writeFile+0x62a>
  {
    firstSector = getFirstSector (prevCluster);

    for(sector = 0; sector < sectorPerCluster; sector++)
     {  //aaa
       SD_readSingleBlock (firstSector + sector);
    2736:	73 01       	movw	r14, r6
    2738:	62 01       	movw	r12, r4
    273a:	c3 0c       	add	r12, r3
    273c:	d1 1c       	adc	r13, r1
    273e:	e1 1c       	adc	r14, r1
    2740:	f1 1c       	adc	r15, r1
    2742:	c7 01       	movw	r24, r14
    2744:	b6 01       	movw	r22, r12
    2746:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <SD_readSingleBlock>
    274a:	00 e2       	ldi	r16, 0x20	; 32
    274c:	10 e0       	ldi	r17, 0x00	; 0
    274e:	65 c0       	rjmp	.+202    	; 0x281a <writeFile+0x614>
	
       for(i=0; i<bytesPerSector; i+=32)
        { //bbb
	      dir = (struct dir_Structure *) &buffer[i];

		  if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    2750:	22 20       	and	r2, r2
    2752:	11 f0       	breq	.+4      	; 0x2758 <writeFile+0x552>
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	b4 c0       	rjmp	.+360    	; 0x28c0 <writeFile+0x6ba>
    2758:	af 01       	movw	r20, r30
    275a:	49 53       	subi	r20, 0x39	; 57
    275c:	5d 4f       	sbci	r21, 0xFD	; 253
		     //dir->name[0] = EMPTY;
		     //SD_writeSingleBlock (firstSector + sector);
             return 1;
           }

          if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    275e:	f8 01       	movw	r30, r16
    2760:	e9 55       	subi	r30, 0x59	; 89
    2762:	fd 4f       	sbci	r31, 0xFD	; 253
    2764:	e0 81       	ld	r30, Z
    2766:	ee 23       	and	r30, r30
    2768:	19 f0       	breq	.+6      	; 0x2770 <writeFile+0x56a>
    276a:	e5 3e       	cpi	r30, 0xE5	; 229
    276c:	09 f0       	breq	.+2      	; 0x2770 <writeFile+0x56a>
    276e:	53 c0       	rjmp	.+166    	; 0x2816 <writeFile+0x610>
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
		   {
		     for(j=0; j<11; j++)
  			   dir->name[j] = fileName[j];
    2774:	ba 01       	movw	r22, r20
    2776:	62 0f       	add	r22, r18
    2778:	73 1f       	adc	r23, r19
    277a:	a8 85       	ldd	r26, Y+8	; 0x08
    277c:	b9 85       	ldd	r27, Y+9	; 0x09
    277e:	a2 0f       	add	r26, r18
    2780:	b3 1f       	adc	r27, r19
    2782:	8c 91       	ld	r24, X
    2784:	fb 01       	movw	r30, r22
    2786:	80 83       	st	Z, r24
    2788:	2f 5f       	subi	r18, 0xFF	; 255
    278a:	3f 4f       	sbci	r19, 0xFF	; 255
             return 1;
           }

          if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		   {
		     for(j=0; j<11; j++)
    278c:	2b 30       	cpi	r18, 0x0B	; 11
    278e:	31 05       	cpc	r19, r1
    2790:	89 f7       	brne	.-30     	; 0x2774 <writeFile+0x56e>
  			   dir->name[j] = fileName[j];
		       dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    2792:	f8 01       	movw	r30, r16
    2794:	e9 53       	subi	r30, 0x39	; 57
    2796:	fd 4f       	sbci	r31, 0xFD	; 253
    2798:	75 97       	sbiw	r30, 0x15	; 21
    279a:	20 e2       	ldi	r18, 0x20	; 32
    279c:	21 93       	st	Z+, r18
		       dir->NTreserved = 0;			//always set to 0
    279e:	11 92       	st	Z+, r1
		       dir->timeTenth = 0;			//always set to 0
    27a0:	11 92       	st	Z+, r1
		       dir->createTime = timeFAT; 	//setting time of file creation, obtained from RTC
    27a2:	20 91 01 05 	lds	r18, 0x0501
    27a6:	30 91 02 05 	lds	r19, 0x0502
    27aa:	21 93       	st	Z+, r18
    27ac:	31 93       	st	Z+, r19
		       dir->createDate = dateFAT; 	//setting date of file creation, obtained from RTC
    27ae:	80 91 ff 04 	lds	r24, 0x04FF
    27b2:	90 91 00 05 	lds	r25, 0x0500
    27b6:	81 93       	st	Z+, r24
    27b8:	91 93       	st	Z+, r25
		       dir->lastAccessDate = 0;   	//date of last access ignored
    27ba:	11 82       	std	Z+1, r1	; 0x01
    27bc:	10 82       	st	Z, r1
		       dir->writeTime = timeFAT;  	//setting new time of last write, obtained from RTC
    27be:	34 96       	adiw	r30, 0x04	; 4
    27c0:	21 93       	st	Z+, r18
    27c2:	31 93       	st	Z+, r19
		       dir->writeDate = dateFAT;  	//setting new date of last write, obtained from RTC
    27c4:	91 83       	std	Z+1, r25	; 0x01
    27c6:	80 83       	st	Z, r24
		       dir->firstClusterHI = firstClusterHigh;
    27c8:	34 97       	sbiw	r30, 0x04	; 4
    27ca:	8c 81       	ldd	r24, Y+4	; 0x04
    27cc:	9d 81       	ldd	r25, Y+5	; 0x05
    27ce:	91 83       	std	Z+1, r25	; 0x01
    27d0:	80 83       	st	Z, r24
		       dir->firstClusterLO = firstClusterLow;
    27d2:	36 96       	adiw	r30, 0x06	; 6
    27d4:	aa 81       	ldd	r26, Y+2	; 0x02
    27d6:	bb 81       	ldd	r27, Y+3	; 0x03
    27d8:	a1 93       	st	Z+, r26
    27da:	b1 93       	st	Z+, r27
		       dir->fileSize = fileSize;
    27dc:	80 91 ad 02 	lds	r24, 0x02AD
    27e0:	90 91 ae 02 	lds	r25, 0x02AE
    27e4:	a0 91 af 02 	lds	r26, 0x02AF
    27e8:	b0 91 b0 02 	lds	r27, 0x02B0
    27ec:	80 83       	st	Z, r24
    27ee:	91 83       	std	Z+1, r25	; 0x01
    27f0:	a2 83       	std	Z+2, r26	; 0x02
    27f2:	b3 83       	std	Z+3, r27	; 0x03

		       SD_writeSingleBlock (firstSector + sector);
    27f4:	c7 01       	movw	r24, r14
    27f6:	b6 01       	movw	r22, r12
    27f8:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <SD_writeSingleBlock>

//		       TX_NEWLINE;
//		       TX_NEWLINE;
//		       transmitString_F(PSTR(" File Created! "));

		       freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    27fc:	40 91 ad 02 	lds	r20, 0x02AD
    2800:	50 91 ae 02 	lds	r21, 0x02AE
    2804:	60 91 af 02 	lds	r22, 0x02AF
    2808:	70 91 b0 02 	lds	r23, 0x02B0
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <freeMemoryUpdate>
    2812:	22 24       	eor	r2, r2
    2814:	23 94       	inc	r2
    2816:	00 5e       	subi	r16, 0xE0	; 224
    2818:	1f 4f       	sbci	r17, 0xFF	; 255

    for(sector = 0; sector < sectorPerCluster; sector++)
     {  //aaa
       SD_readSingleBlock (firstSector + sector);
	
       for(i=0; i<bytesPerSector; i+=32)
    281a:	80 91 b1 02 	lds	r24, 0x02B1
    281e:	90 91 b2 02 	lds	r25, 0x02B2
    2822:	f8 01       	movw	r30, r16
    2824:	b0 97       	sbiw	r30, 0x20	; 32
    2826:	e8 17       	cp	r30, r24
    2828:	f9 07       	cpc	r31, r25
    282a:	08 f4       	brcc	.+2      	; 0x282e <writeFile+0x628>
    282c:	91 cf       	rjmp	.-222    	; 0x2750 <writeFile+0x54a>

  while(1)
  {
    firstSector = getFirstSector (prevCluster);

    for(sector = 0; sector < sectorPerCluster; sector++)
    282e:	33 94       	inc	r3
    2830:	20 91 c7 04 	lds	r18, 0x04C7
    2834:	30 91 c8 04 	lds	r19, 0x04C8
    2838:	83 2d       	mov	r24, r3
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	82 17       	cp	r24, r18
    283e:	93 07       	cpc	r25, r19
    2840:	08 f4       	brcc	.+2      	; 0x2844 <writeFile+0x63e>
    2842:	79 cf       	rjmp	.-270    	; 0x2736 <writeFile+0x530>
	     
           } 
        } //bbb
     } //aaa

    cluster = getSetNextCluster (prevCluster, GET, 0);
    2844:	c5 01       	movw	r24, r10
    2846:	b4 01       	movw	r22, r8
    2848:	40 e0       	ldi	r20, 0x00	; 0
    284a:	00 e0       	ldi	r16, 0x00	; 0
    284c:	10 e0       	ldi	r17, 0x00	; 0
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <getSetNextCluster>
    2856:	6b 01       	movw	r12, r22
    2858:	7c 01       	movw	r14, r24

    if(cluster > 0x0ffffff6)
    285a:	67 3f       	cpi	r22, 0xF7	; 247
    285c:	bf ef       	ldi	r27, 0xFF	; 255
    285e:	7b 07       	cpc	r23, r27
    2860:	bf ef       	ldi	r27, 0xFF	; 255
    2862:	8b 07       	cpc	r24, r27
    2864:	bf e0       	ldi	r27, 0x0F	; 15
    2866:	9b 07       	cpc	r25, r27
    2868:	00 f1       	brcs	.+64     	; 0x28aa <writeFile+0x6a4>
     {
       if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    286a:	6f 3f       	cpi	r22, 0xFF	; 255
    286c:	ef ef       	ldi	r30, 0xFF	; 255
    286e:	7e 07       	cpc	r23, r30
    2870:	ef ef       	ldi	r30, 0xFF	; 255
    2872:	8e 07       	cpc	r24, r30
    2874:	ef e0       	ldi	r30, 0x0F	; 15
    2876:	9e 07       	cpc	r25, r30
    2878:	11 f0       	breq	.+4      	; 0x287e <writeFile+0x678>
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	21 c0       	rjmp	.+66     	; 0x28c0 <writeFile+0x6ba>
	    {  
		  cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    287e:	c5 01       	movw	r24, r10
    2880:	b4 01       	movw	r22, r8
    2882:	0e 94 cc 0a 	call	0x1598	; 0x1598 <searchNextFreeCluster>
    2886:	6b 01       	movw	r12, r22
    2888:	7c 01       	movw	r14, r24
		  getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    288a:	c5 01       	movw	r24, r10
    288c:	b4 01       	movw	r22, r8
    288e:	41 e0       	ldi	r20, 0x01	; 1
    2890:	97 01       	movw	r18, r14
    2892:	86 01       	movw	r16, r12
    2894:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <getSetNextCluster>
		  getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    2898:	c7 01       	movw	r24, r14
    289a:	b6 01       	movw	r22, r12
    289c:	41 e0       	ldi	r20, 0x01	; 1
    289e:	0f ef       	ldi	r16, 0xFF	; 255
    28a0:	1f ef       	ldi	r17, 0xFF	; 255
    28a2:	2f ef       	ldi	r18, 0xFF	; 255
    28a4:	3f e0       	ldi	r19, 0x0F	; 15
    28a6:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <getSetNextCluster>
    28aa:	46 01       	movw	r8, r12
    28ac:	57 01       	movw	r10, r14
        {	
//	      transmitString_F(PSTR("End of Cluster Chain")); 
	      return 0;
        }
     }
    if(cluster == 0) 
    28ae:	c1 14       	cp	r12, r1
    28b0:	d1 04       	cpc	r13, r1
    28b2:	e1 04       	cpc	r14, r1
    28b4:	f1 04       	cpc	r15, r1
    28b6:	09 f0       	breq	.+2      	; 0x28ba <writeFile+0x6b4>
    28b8:	20 cf       	rjmp	.-448    	; 0x26fa <writeFile+0x4f4>
    28ba:	83 e0       	ldi	r24, 0x03	; 3
    28bc:	01 c0       	rjmp	.+2      	; 0x28c0 <writeFile+0x6ba>
    28be:	82 e0       	ldi	r24, 0x02	; 2
   
    prevCluster = cluster;
  }
 
  return 0;
}
    28c0:	2b 96       	adiw	r28, 0x0b	; 11
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	de bf       	out	0x3e, r29	; 62
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	cd bf       	out	0x3d, r28	; 61
    28cc:	cf 91       	pop	r28
    28ce:	df 91       	pop	r29
    28d0:	1f 91       	pop	r17
    28d2:	0f 91       	pop	r16
    28d4:	ff 90       	pop	r15
    28d6:	ef 90       	pop	r14
    28d8:	df 90       	pop	r13
    28da:	cf 90       	pop	r12
    28dc:	bf 90       	pop	r11
    28de:	af 90       	pop	r10
    28e0:	9f 90       	pop	r9
    28e2:	8f 90       	pop	r8
    28e4:	7f 90       	pop	r7
    28e6:	6f 90       	pop	r6
    28e8:	5f 90       	pop	r5
    28ea:	4f 90       	pop	r4
    28ec:	3f 90       	pop	r3
    28ee:	2f 90       	pop	r2
    28f0:	08 95       	ret

000028f2 <SD_sendCommand>:
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    28f2:	df 92       	push	r13
    28f4:	ef 92       	push	r14
    28f6:	ff 92       	push	r15
    28f8:	0f 93       	push	r16
    28fa:	1f 93       	push	r17
    28fc:	d8 2e       	mov	r13, r24
    28fe:	7a 01       	movw	r14, r20
    2900:	8b 01       	movw	r16, r22
//SD card accepts byte address while SDHC accepts block address in multiples of 512
//so, if it's SD card we need to convert block address into corresponding byte address by 
//multipying it with 512. which is equivalent to shifting it left 9 times
//following 'if' loop does that

  if(SDHC_flag == 0)		
    2902:	80 91 cf 04 	lds	r24, 0x04CF
    2906:	88 23       	and	r24, r24
    2908:	b9 f4       	brne	.+46     	; 0x2938 <SD_sendCommand+0x46>
  if(cmd == READ_SINGLE_BLOCK     ||
    290a:	8d 2d       	mov	r24, r13
    290c:	81 51       	subi	r24, 0x11	; 17
    290e:	82 30       	cpi	r24, 0x02	; 2
    2910:	60 f0       	brcs	.+24     	; 0x292a <SD_sendCommand+0x38>
    2912:	88 e1       	ldi	r24, 0x18	; 24
    2914:	d8 16       	cp	r13, r24
    2916:	49 f0       	breq	.+18     	; 0x292a <SD_sendCommand+0x38>
    2918:	89 e1       	ldi	r24, 0x19	; 25
    291a:	d8 16       	cp	r13, r24
    291c:	31 f0       	breq	.+12     	; 0x292a <SD_sendCommand+0x38>
    291e:	80 e2       	ldi	r24, 0x20	; 32
    2920:	d8 16       	cp	r13, r24
    2922:	19 f0       	breq	.+6      	; 0x292a <SD_sendCommand+0x38>
    2924:	81 e2       	ldi	r24, 0x21	; 33
    2926:	d8 16       	cp	r13, r24
    2928:	39 f4       	brne	.+14     	; 0x2938 <SD_sendCommand+0x46>
     cmd == WRITE_SINGLE_BLOCK    ||
     cmd == WRITE_MULTIPLE_BLOCKS ||
     cmd == ERASE_BLOCK_START_ADDR|| 
     cmd == ERASE_BLOCK_END_ADDR ) 
     {
       arg = arg << 9;
    292a:	39 e0       	ldi	r19, 0x09	; 9
    292c:	ee 0c       	add	r14, r14
    292e:	ff 1c       	adc	r15, r15
    2930:	00 1f       	adc	r16, r16
    2932:	11 1f       	adc	r17, r17
    2934:	3a 95       	dec	r19
    2936:	d1 f7       	brne	.-12     	; 0x292c <SD_sendCommand+0x3a>
     }	   

  SD_CS_ASSERT;
    2938:	c4 98       	cbi	0x18, 4	; 24

  SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
    293a:	8d 2d       	mov	r24, r13
    293c:	80 64       	ori	r24, 0x40	; 64
    293e:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SPI_transmit>
  SPI_transmit(arg>>24);
    2942:	81 2f       	mov	r24, r17
    2944:	99 27       	eor	r25, r25
    2946:	aa 27       	eor	r26, r26
    2948:	bb 27       	eor	r27, r27
    294a:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SPI_transmit>
  SPI_transmit(arg>>16);
    294e:	c8 01       	movw	r24, r16
    2950:	aa 27       	eor	r26, r26
    2952:	bb 27       	eor	r27, r27
    2954:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SPI_transmit>
  SPI_transmit(arg>>8);
    2958:	bb 27       	eor	r27, r27
    295a:	a1 2f       	mov	r26, r17
    295c:	90 2f       	mov	r25, r16
    295e:	8f 2d       	mov	r24, r15
    2960:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SPI_transmit>
  SPI_transmit(arg);
    2964:	8e 2d       	mov	r24, r14
    2966:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SPI_transmit>

  if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
    296a:	88 e0       	ldi	r24, 0x08	; 8
    296c:	d8 16       	cp	r13, r24
    296e:	11 f4       	brne	.+4      	; 0x2974 <SD_sendCommand+0x82>
    SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
    2970:	87 e8       	ldi	r24, 0x87	; 135
    2972:	01 c0       	rjmp	.+2      	; 0x2976 <SD_sendCommand+0x84>
  else 
    SPI_transmit(0x95); 
    2974:	85 e9       	ldi	r24, 0x95	; 149
    2976:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SPI_transmit>

  while((response = SPI_receive()) == 0xff) //wait response
    if(retry++ > 0xfe) break; //time out error
    297a:	10 e0       	ldi	r17, 0x00	; 0
    297c:	02 c0       	rjmp	.+4      	; 0x2982 <SD_sendCommand+0x90>
  SPI_transmit(arg);

  if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
    SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
  else 
    SPI_transmit(0x95); 
    297e:	11 50       	subi	r17, 0x01	; 1

  while((response = SPI_receive()) == 0xff) //wait response
    if(retry++ > 0xfe) break; //time out error
    2980:	d1 f0       	breq	.+52     	; 0x29b6 <SD_sendCommand+0xc4>
  if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
    SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
  else 
    SPI_transmit(0x95); 

  while((response = SPI_receive()) == 0xff) //wait response
    2982:	0e 94 14 16 	call	0x2c28	; 0x2c28 <SPI_receive>
    2986:	08 2f       	mov	r16, r24
    2988:	8f 3f       	cpi	r24, 0xFF	; 255
    298a:	c9 f3       	breq	.-14     	; 0x297e <SD_sendCommand+0x8c>
    if(retry++ > 0xfe) break; //time out error

  if(response == 0x00 && cmd == 58)  //checking response of CMD58
    298c:	88 23       	and	r24, r24
    298e:	99 f4       	brne	.+38     	; 0x29b6 <SD_sendCommand+0xc4>
    2990:	8a e3       	ldi	r24, 0x3A	; 58
    2992:	d8 16       	cp	r13, r24
    2994:	81 f4       	brne	.+32     	; 0x29b6 <SD_sendCommand+0xc4>
  {
    status = SPI_receive() & 0x40;     //first byte of the OCR register (bit 31:24)
    2996:	0e 94 14 16 	call	0x2c28	; 0x2c28 <SPI_receive>
    if(status == 0x40) SDHC_flag = 1;  //we need it to verify SDHC card
    299a:	86 ff       	sbrs	r24, 6
    299c:	04 c0       	rjmp	.+8      	; 0x29a6 <SD_sendCommand+0xb4>
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	80 93 cf 04 	sts	0x04CF, r24
    29a4:	02 c0       	rjmp	.+4      	; 0x29aa <SD_sendCommand+0xb8>
    else SDHC_flag = 0;
    29a6:	10 92 cf 04 	sts	0x04CF, r1

    SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
    29aa:	0e 94 14 16 	call	0x2c28	; 0x2c28 <SPI_receive>
    SPI_receive(); //one can use these bytes to check power supply limits of SD
    29ae:	0e 94 14 16 	call	0x2c28	; 0x2c28 <SPI_receive>
    SPI_receive(); 
    29b2:	0e 94 14 16 	call	0x2c28	; 0x2c28 <SPI_receive>
  }

  SPI_receive(); //extra 8 CLK
    29b6:	0e 94 14 16 	call	0x2c28	; 0x2c28 <SPI_receive>
  SD_CS_DEASSERT;
    29ba:	c4 9a       	sbi	0x18, 4	; 24

  return response; //return state
}
    29bc:	80 2f       	mov	r24, r16
    29be:	1f 91       	pop	r17
    29c0:	0f 91       	pop	r16
    29c2:	ff 90       	pop	r15
    29c4:	ef 90       	pop	r14
    29c6:	df 90       	pop	r13
    29c8:	08 95       	ret

000029ca <SD_erase>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//*****************************************************************
unsigned char SD_erase (unsigned long startBlock, unsigned long totalBlocks)
{
    29ca:	af 92       	push	r10
    29cc:	bf 92       	push	r11
    29ce:	cf 92       	push	r12
    29d0:	df 92       	push	r13
    29d2:	ef 92       	push	r14
    29d4:	ff 92       	push	r15
    29d6:	0f 93       	push	r16
    29d8:	1f 93       	push	r17
    29da:	7b 01       	movw	r14, r22
    29dc:	8c 01       	movw	r16, r24
    29de:	59 01       	movw	r10, r18
    29e0:	6a 01       	movw	r12, r20
  unsigned char response;

  response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock); //send starting block address
    29e2:	80 e2       	ldi	r24, 0x20	; 32
    29e4:	b8 01       	movw	r22, r16
    29e6:	a7 01       	movw	r20, r14
    29e8:	0e 94 79 14 	call	0x28f2	; 0x28f2 <SD_sendCommand>
  if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
    29ec:	88 23       	and	r24, r24
    29ee:	b9 f4       	brne	.+46     	; 0x2a1e <SD_erase+0x54>
    return response;

  response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)); //send end block address
    29f0:	08 94       	sec
    29f2:	e1 08       	sbc	r14, r1
    29f4:	f1 08       	sbc	r15, r1
    29f6:	01 09       	sbc	r16, r1
    29f8:	11 09       	sbc	r17, r1
    29fa:	ea 0c       	add	r14, r10
    29fc:	fb 1c       	adc	r15, r11
    29fe:	0c 1d       	adc	r16, r12
    2a00:	1d 1d       	adc	r17, r13
    2a02:	81 e2       	ldi	r24, 0x21	; 33
    2a04:	b8 01       	movw	r22, r16
    2a06:	a7 01       	movw	r20, r14
    2a08:	0e 94 79 14 	call	0x28f2	; 0x28f2 <SD_sendCommand>
  if(response != 0x00)
    2a0c:	88 23       	and	r24, r24
    2a0e:	39 f4       	brne	.+14     	; 0x2a1e <SD_erase+0x54>
    return response;

  response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
    2a10:	86 e2       	ldi	r24, 0x26	; 38
    2a12:	40 e0       	ldi	r20, 0x00	; 0
    2a14:	50 e0       	ldi	r21, 0x00	; 0
    2a16:	60 e0       	ldi	r22, 0x00	; 0
    2a18:	70 e0       	ldi	r23, 0x00	; 0
    2a1a:	0e 94 79 14 	call	0x28f2	; 0x28f2 <SD_sendCommand>
  if(response != 0x00)
    return response;

  return 0; //normal return
}
    2a1e:	1f 91       	pop	r17
    2a20:	0f 91       	pop	r16
    2a22:	ff 90       	pop	r15
    2a24:	ef 90       	pop	r14
    2a26:	df 90       	pop	r13
    2a28:	cf 90       	pop	r12
    2a2a:	bf 90       	pop	r11
    2a2c:	af 90       	pop	r10
    2a2e:	08 95       	ret

00002a30 <SD_init>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_init(void)
{
    2a30:	1f 93       	push	r17
    2a32:	cf 93       	push	r28
    2a34:	df 93       	push	r29
    2a36:	10 e0       	ldi	r17, 0x00	; 0
  unsigned char i, response, SD_version;
  unsigned int retry=0 ;

  for(i=0;i<10;i++)
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command
    2a38:	8f ef       	ldi	r24, 0xFF	; 255
    2a3a:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SPI_transmit>
unsigned char SD_init(void)
{
  unsigned char i, response, SD_version;
  unsigned int retry=0 ;

  for(i=0;i<10;i++)
    2a3e:	1f 5f       	subi	r17, 0xFF	; 255
    2a40:	1a 30       	cpi	r17, 0x0A	; 10
    2a42:	d1 f7       	brne	.-12     	; 0x2a38 <SD_init+0x8>
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command

  SD_CS_ASSERT;
    2a44:	c4 98       	cbi	0x18, 4	; 24
    2a46:	c0 e0       	ldi	r28, 0x00	; 0
    2a48:	d0 e0       	ldi	r29, 0x00	; 0
  do
  {
    response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	40 e0       	ldi	r20, 0x00	; 0
    2a4e:	50 e0       	ldi	r21, 0x00	; 0
    2a50:	60 e0       	ldi	r22, 0x00	; 0
    2a52:	70 e0       	ldi	r23, 0x00	; 0
    2a54:	0e 94 79 14 	call	0x28f2	; 0x28f2 <SD_sendCommand>
    retry++;
    2a58:	21 96       	adiw	r28, 0x01	; 1
    if(retry>0x20) 
    2a5a:	c1 32       	cpi	r28, 0x21	; 33
    2a5c:	d1 05       	cpc	r29, r1
    2a5e:	11 f4       	brne	.+4      	; 0x2a64 <SD_init+0x34>
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	56 c0       	rjmp	.+172    	; 0x2b10 <SD_init+0xe0>
   	  return 1;   //time out, card not detected
   
  } while(response != 0x01);
    2a64:	81 30       	cpi	r24, 0x01	; 1
    2a66:	89 f7       	brne	.-30     	; 0x2a4a <SD_init+0x1a>

  SD_CS_DEASSERT;
    2a68:	c4 9a       	sbi	0x18, 4	; 24
  SPI_transmit (0xff);
    2a6a:	8f ef       	ldi	r24, 0xFF	; 255
    2a6c:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SPI_transmit>
  SPI_transmit (0xff);
    2a70:	8f ef       	ldi	r24, 0xFF	; 255
    2a72:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SPI_transmit>
    2a76:	c0 e0       	ldi	r28, 0x00	; 0
    2a78:	d0 e0       	ldi	r29, 0x00	; 0

  SD_version = 2; //default set to SD compliance with ver2.x; 
				//this may change after checking the next command
  do
  {
    response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
    2a7a:	88 e0       	ldi	r24, 0x08	; 8
    2a7c:	4a ea       	ldi	r20, 0xAA	; 170
    2a7e:	51 e0       	ldi	r21, 0x01	; 1
    2a80:	60 e0       	ldi	r22, 0x00	; 0
    2a82:	70 e0       	ldi	r23, 0x00	; 0
    2a84:	0e 94 79 14 	call	0x28f2	; 0x28f2 <SD_sendCommand>
    retry++;
    2a88:	21 96       	adiw	r28, 0x01	; 1
    if(retry>0xfe) 
    2a8a:	cf 3f       	cpi	r28, 0xFF	; 255
    2a8c:	d1 05       	cpc	r29, r1
    2a8e:	29 f4       	brne	.+10     	; 0x2a9a <SD_init+0x6a>
    {
//	  TX_NEWLINE;
	  SD_version = 1;
	  cardType = 1;
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	80 93 df 04 	sts	0x04DF, r24
    2a96:	11 e0       	ldi	r17, 0x01	; 1
    2a98:	03 c0       	rjmp	.+6      	; 0x2aa0 <SD_init+0x70>
	  break;
    } //time out

  }while(response != 0x01);
    2a9a:	81 30       	cpi	r24, 0x01	; 1
    2a9c:	71 f7       	brne	.-36     	; 0x2a7a <SD_init+0x4a>
    2a9e:	12 e0       	ldi	r17, 0x02	; 2
    2aa0:	c0 e0       	ldi	r28, 0x00	; 0
    2aa2:	d0 e0       	ldi	r29, 0x00	; 0

  retry = 0;

  do
  {
    response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
    2aa4:	87 e3       	ldi	r24, 0x37	; 55
    2aa6:	40 e0       	ldi	r20, 0x00	; 0
    2aa8:	50 e0       	ldi	r21, 0x00	; 0
    2aaa:	60 e0       	ldi	r22, 0x00	; 0
    2aac:	70 e0       	ldi	r23, 0x00	; 0
    2aae:	0e 94 79 14 	call	0x28f2	; 0x28f2 <SD_sendCommand>
    response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
    2ab2:	89 e2       	ldi	r24, 0x29	; 41
    2ab4:	40 e0       	ldi	r20, 0x00	; 0
    2ab6:	50 e0       	ldi	r21, 0x00	; 0
    2ab8:	60 e0       	ldi	r22, 0x00	; 0
    2aba:	70 e4       	ldi	r23, 0x40	; 64
    2abc:	0e 94 79 14 	call	0x28f2	; 0x28f2 <SD_sendCommand>

    retry++;
    2ac0:	21 96       	adiw	r28, 0x01	; 1
    if(retry>0xfe) 
    2ac2:	cf 3f       	cpi	r28, 0xFF	; 255
    2ac4:	d1 05       	cpc	r29, r1
    2ac6:	11 f4       	brne	.+4      	; 0x2acc <SD_init+0x9c>
    2ac8:	82 e0       	ldi	r24, 0x02	; 2
    2aca:	22 c0       	rjmp	.+68     	; 0x2b10 <SD_init+0xe0>
    {
//    TX_NEWLINE;
	  return 2;  //time out, card initialization failed
    } 

  }while(response != 0x00);
    2acc:	88 23       	and	r24, r24
    2ace:	51 f7       	brne	.-44     	; 0x2aa4 <SD_init+0x74>


  retry = 0;
  SDHC_flag = 0;
    2ad0:	10 92 cf 04 	sts	0x04CF, r1

  if (SD_version == 2)
    2ad4:	12 30       	cpi	r17, 0x02	; 2
    2ad6:	e1 f4       	brne	.+56     	; 0x2b10 <SD_init+0xe0>
    2ad8:	c0 e0       	ldi	r28, 0x00	; 0
    2ada:	d0 e0       	ldi	r29, 0x00	; 0
  { 
    do
    {
	  response = SD_sendCommand(READ_OCR,0);
    2adc:	8a e3       	ldi	r24, 0x3A	; 58
    2ade:	40 e0       	ldi	r20, 0x00	; 0
    2ae0:	50 e0       	ldi	r21, 0x00	; 0
    2ae2:	60 e0       	ldi	r22, 0x00	; 0
    2ae4:	70 e0       	ldi	r23, 0x00	; 0
    2ae6:	0e 94 79 14 	call	0x28f2	; 0x28f2 <SD_sendCommand>
	  retry++;
    2aea:	21 96       	adiw	r28, 0x01	; 1
	  if(retry>0xfe) 
    2aec:	cf 3f       	cpi	r28, 0xFF	; 255
    2aee:	d1 05       	cpc	r29, r1
    2af0:	19 f4       	brne	.+6      	; 0x2af8 <SD_init+0xc8>
      {
//      TX_NEWLINE;
	    cardType = 0;
    2af2:	10 92 df 04 	sts	0x04DF, r1
    2af6:	02 c0       	rjmp	.+4      	; 0x2afc <SD_init+0xcc>
	    break;
      } //time out

    }while(response != 0x00);
    2af8:	88 23       	and	r24, r24
    2afa:	81 f7       	brne	.-32     	; 0x2adc <SD_init+0xac>

    if(SDHC_flag == 1) cardType = 2;
    2afc:	80 91 cf 04 	lds	r24, 0x04CF
    2b00:	81 30       	cpi	r24, 0x01	; 1
    2b02:	11 f4       	brne	.+4      	; 0x2b08 <SD_init+0xd8>
    2b04:	82 e0       	ldi	r24, 0x02	; 2
    2b06:	01 c0       	rjmp	.+2      	; 0x2b0a <SD_init+0xda>
    else cardType = 3;
    2b08:	83 e0       	ldi	r24, 0x03	; 3
    2b0a:	80 93 df 04 	sts	0x04DF, r24
    2b0e:	80 e0       	ldi	r24, 0x00	; 0

//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512

  return 0; //successful return
}
    2b10:	df 91       	pop	r29
    2b12:	cf 91       	pop	r28
    2b14:	1f 91       	pop	r17
    2b16:	08 95       	ret

00002b18 <SD_writeSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
    2b18:	cf 93       	push	r28
    2b1a:	df 93       	push	r29
    2b1c:	ab 01       	movw	r20, r22
    2b1e:	bc 01       	movw	r22, r24
  unsigned char response;
  unsigned int i, retry=0;

  response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
    2b20:	88 e1       	ldi	r24, 0x18	; 24
    2b22:	0e 94 79 14 	call	0x28f2	; 0x28f2 <SD_sendCommand>
  
  if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    2b26:	88 23       	and	r24, r24
    2b28:	11 f0       	breq	.+4      	; 0x2b2e <SD_writeSingleBlock+0x16>
    2b2a:	98 2f       	mov	r25, r24
    2b2c:	3f c0       	rjmp	.+126    	; 0x2bac <SD_writeSingleBlock+0x94>

  SD_CS_ASSERT;
    2b2e:	c4 98       	cbi	0x18, 4	; 24

  SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
    2b30:	8e ef       	ldi	r24, 0xFE	; 254
    2b32:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SPI_transmit>
    2b36:	c0 e0       	ldi	r28, 0x00	; 0
    2b38:	d0 e0       	ldi	r29, 0x00	; 0

  for(i=0; i<512; i++)    //send 512 bytes data
    SPI_transmit(buffer[i]);
    2b3a:	fe 01       	movw	r30, r28
    2b3c:	e9 53       	subi	r30, 0x39	; 57
    2b3e:	fd 4f       	sbci	r31, 0xFD	; 253
    2b40:	80 81       	ld	r24, Z
    2b42:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SPI_transmit>

  SD_CS_ASSERT;

  SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

  for(i=0; i<512; i++)    //send 512 bytes data
    2b46:	21 96       	adiw	r28, 0x01	; 1
    2b48:	82 e0       	ldi	r24, 0x02	; 2
    2b4a:	c0 30       	cpi	r28, 0x00	; 0
    2b4c:	d8 07       	cpc	r29, r24
    2b4e:	a9 f7       	brne	.-22     	; 0x2b3a <SD_writeSingleBlock+0x22>
    SPI_transmit(buffer[i]);

  SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
    2b50:	8f ef       	ldi	r24, 0xFF	; 255
    2b52:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SPI_transmit>
  SPI_transmit(0xff);
    2b56:	8f ef       	ldi	r24, 0xFF	; 255
    2b58:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SPI_transmit>

  response = SPI_receive();
    2b5c:	0e 94 14 16 	call	0x2c28	; 0x2c28 <SPI_receive>
    2b60:	98 2f       	mov	r25, r24

  if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    2b62:	8f 71       	andi	r24, 0x1F	; 31
    2b64:	85 30       	cpi	r24, 0x05	; 5
    2b66:	41 f0       	breq	.+16     	; 0x2b78 <SD_writeSingleBlock+0x60>
  {                              //AAA='101'-data rejected due to CRC error
    SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
    2b68:	c4 9a       	sbi	0x18, 4	; 24
    2b6a:	20 c0       	rjmp	.+64     	; 0x2bac <SD_writeSingleBlock+0x94>
    return response;
  }

  while(!SPI_receive()) //wait for SD card to complete writing and get idle
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    2b6c:	8f ef       	ldi	r24, 0xFF	; 255
    2b6e:	cf 3f       	cpi	r28, 0xFF	; 255
    2b70:	d8 07       	cpc	r29, r24
    2b72:	91 f0       	breq	.+36     	; 0x2b98 <SD_writeSingleBlock+0x80>
    2b74:	21 96       	adiw	r28, 0x01	; 1
    2b76:	02 c0       	rjmp	.+4      	; 0x2b7c <SD_writeSingleBlock+0x64>
    2b78:	c0 e0       	ldi	r28, 0x00	; 0
    2b7a:	d0 e0       	ldi	r29, 0x00	; 0
  {                              //AAA='101'-data rejected due to CRC error
    SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
    return response;
  }

  while(!SPI_receive()) //wait for SD card to complete writing and get idle
    2b7c:	0e 94 14 16 	call	0x2c28	; 0x2c28 <SPI_receive>
    2b80:	88 23       	and	r24, r24
    2b82:	a1 f3       	breq	.-24     	; 0x2b6c <SD_writeSingleBlock+0x54>
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}

  SD_CS_DEASSERT;
    2b84:	c4 9a       	sbi	0x18, 4	; 24
  SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
    2b86:	8f ef       	ldi	r24, 0xFF	; 255
    2b88:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SPI_transmit>
  SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
    2b8c:	c4 98       	cbi	0x18, 4	; 24
    2b8e:	08 c0       	rjmp	.+16     	; 0x2ba0 <SD_writeSingleBlock+0x88>

  while(!SPI_receive()) //wait for SD card to complete writing and get idle
    if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    2b90:	8f ef       	ldi	r24, 0xFF	; 255
    2b92:	cf 3f       	cpi	r28, 0xFF	; 255
    2b94:	d8 07       	cpc	r29, r24
    2b96:	19 f4       	brne	.+6      	; 0x2b9e <SD_writeSingleBlock+0x86>
    2b98:	c4 9a       	sbi	0x18, 4	; 24
    2b9a:	91 e0       	ldi	r25, 0x01	; 1
    2b9c:	07 c0       	rjmp	.+14     	; 0x2bac <SD_writeSingleBlock+0x94>
    2b9e:	21 96       	adiw	r28, 0x01	; 1

  SD_CS_DEASSERT;
  SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
  SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

  while(!SPI_receive()) //wait for SD card to complete writing and get idle
    2ba0:	0e 94 14 16 	call	0x2c28	; 0x2c28 <SPI_receive>
    2ba4:	88 23       	and	r24, r24
    2ba6:	a1 f3       	breq	.-24     	; 0x2b90 <SD_writeSingleBlock+0x78>
    if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
  SD_CS_DEASSERT;
    2ba8:	c4 9a       	sbi	0x18, 4	; 24
    2baa:	90 e0       	ldi	r25, 0x00	; 0

  return 0;
}
    2bac:	89 2f       	mov	r24, r25
    2bae:	df 91       	pop	r29
    2bb0:	cf 91       	pop	r28
    2bb2:	08 95       	ret

00002bb4 <SD_readSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
    2bb4:	1f 93       	push	r17
    2bb6:	cf 93       	push	r28
    2bb8:	df 93       	push	r29
    2bba:	ab 01       	movw	r20, r22
    2bbc:	bc 01       	movw	r22, r24
  unsigned char response;
  unsigned int i, retry=0;

  response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock); //read a Block command
    2bbe:	81 e1       	ldi	r24, 0x11	; 17
    2bc0:	0e 94 79 14 	call	0x28f2	; 0x28f2 <SD_sendCommand>
    2bc4:	18 2f       	mov	r17, r24
 
  if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    2bc6:	88 23       	and	r24, r24
    2bc8:	09 f5       	brne	.+66     	; 0x2c0c <SD_readSingleBlock+0x58>

  SD_CS_ASSERT;
    2bca:	c4 98       	cbi	0x18, 4	; 24
    2bcc:	c0 e0       	ldi	r28, 0x00	; 0
    2bce:	d0 e0       	ldi	r29, 0x00	; 0
    2bd0:	05 c0       	rjmp	.+10     	; 0x2bdc <SD_readSingleBlock+0x28>

  retry = 0;
  while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    2bd2:	21 97       	sbiw	r28, 0x01	; 1
    if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
    2bd4:	19 f4       	brne	.+6      	; 0x2bdc <SD_readSingleBlock+0x28>
    2bd6:	c4 9a       	sbi	0x18, 4	; 24
    2bd8:	11 e0       	ldi	r17, 0x01	; 1
    2bda:	18 c0       	rjmp	.+48     	; 0x2c0c <SD_readSingleBlock+0x58>
  if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

  SD_CS_ASSERT;

  retry = 0;
  while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    2bdc:	0e 94 14 16 	call	0x2c28	; 0x2c28 <SPI_receive>
    2be0:	8e 3f       	cpi	r24, 0xFE	; 254
    2be2:	b9 f7       	brne	.-18     	; 0x2bd2 <SD_readSingleBlock+0x1e>
    2be4:	c0 e0       	ldi	r28, 0x00	; 0
    2be6:	d0 e0       	ldi	r29, 0x00	; 0
    if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

  for(i=0; i<512; i++) //read 512 bytes
    buffer[i] = SPI_receive();
    2be8:	0e 94 14 16 	call	0x2c28	; 0x2c28 <SPI_receive>
    2bec:	fe 01       	movw	r30, r28
    2bee:	e9 53       	subi	r30, 0x39	; 57
    2bf0:	fd 4f       	sbci	r31, 0xFD	; 253
    2bf2:	80 83       	st	Z, r24

  retry = 0;
  while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

  for(i=0; i<512; i++) //read 512 bytes
    2bf4:	21 96       	adiw	r28, 0x01	; 1
    2bf6:	82 e0       	ldi	r24, 0x02	; 2
    2bf8:	c0 30       	cpi	r28, 0x00	; 0
    2bfa:	d8 07       	cpc	r29, r24
    2bfc:	a9 f7       	brne	.-22     	; 0x2be8 <SD_readSingleBlock+0x34>
    buffer[i] = SPI_receive();

  SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
    2bfe:	0e 94 14 16 	call	0x2c28	; 0x2c28 <SPI_receive>
  SPI_receive();
    2c02:	0e 94 14 16 	call	0x2c28	; 0x2c28 <SPI_receive>

  SPI_receive(); //extra 8 clock pulses
    2c06:	0e 94 14 16 	call	0x2c28	; 0x2c28 <SPI_receive>
  SD_CS_DEASSERT;
    2c0a:	c4 9a       	sbi	0x18, 4	; 24

  return 0;
}
    2c0c:	81 2f       	mov	r24, r17
    2c0e:	df 91       	pop	r29
    2c10:	cf 91       	pop	r28
    2c12:	1f 91       	pop	r17
    2c14:	08 95       	ret

00002c16 <spi_init>:

//SPI initialize for SD card
//clock rate: 125Khz
void spi_init(void)
{
  SPCR = 0x52; //setup SPI: Master mode, MSB first, SCK phase low, SCK idle low
    2c16:	82 e5       	ldi	r24, 0x52	; 82
    2c18:	8d b9       	out	0x0d, r24	; 13
  SPSR = 0x00;
    2c1a:	1e b8       	out	0x0e, r1	; 14
}
    2c1c:	08 95       	ret

00002c1e <SPI_transmit>:

unsigned char SPI_transmit(unsigned char data)
{
// Start transmission
  SPDR = data;
    2c1e:	8f b9       	out	0x0f, r24	; 15

// Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));
    2c20:	77 9b       	sbis	0x0e, 7	; 14
    2c22:	fe cf       	rjmp	.-4      	; 0x2c20 <SPI_transmit+0x2>
  data = SPDR;
    2c24:	8f b1       	in	r24, 0x0f	; 15

  return(data);
}
    2c26:	08 95       	ret

00002c28 <SPI_receive>:
unsigned char SPI_receive(void)
{
  unsigned char data;
//  Wait for reception complete

    SPDR = 0xff;
    2c28:	8f ef       	ldi	r24, 0xFF	; 255
    2c2a:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR & (1<<SPIF)));
    2c2c:	77 9b       	sbis	0x0e, 7	; 14
    2c2e:	fe cf       	rjmp	.-4      	; 0x2c2c <SPI_receive+0x4>
    data = SPDR;
    2c30:	8f b1       	in	r24, 0x0f	; 15

//  Return data register
    return data;
}
    2c32:	08 95       	ret

00002c34 <__mulsi3>:
    2c34:	62 9f       	mul	r22, r18
    2c36:	d0 01       	movw	r26, r0
    2c38:	73 9f       	mul	r23, r19
    2c3a:	f0 01       	movw	r30, r0
    2c3c:	82 9f       	mul	r24, r18
    2c3e:	e0 0d       	add	r30, r0
    2c40:	f1 1d       	adc	r31, r1
    2c42:	64 9f       	mul	r22, r20
    2c44:	e0 0d       	add	r30, r0
    2c46:	f1 1d       	adc	r31, r1
    2c48:	92 9f       	mul	r25, r18
    2c4a:	f0 0d       	add	r31, r0
    2c4c:	83 9f       	mul	r24, r19
    2c4e:	f0 0d       	add	r31, r0
    2c50:	74 9f       	mul	r23, r20
    2c52:	f0 0d       	add	r31, r0
    2c54:	65 9f       	mul	r22, r21
    2c56:	f0 0d       	add	r31, r0
    2c58:	99 27       	eor	r25, r25
    2c5a:	72 9f       	mul	r23, r18
    2c5c:	b0 0d       	add	r27, r0
    2c5e:	e1 1d       	adc	r30, r1
    2c60:	f9 1f       	adc	r31, r25
    2c62:	63 9f       	mul	r22, r19
    2c64:	b0 0d       	add	r27, r0
    2c66:	e1 1d       	adc	r30, r1
    2c68:	f9 1f       	adc	r31, r25
    2c6a:	bd 01       	movw	r22, r26
    2c6c:	cf 01       	movw	r24, r30
    2c6e:	11 24       	eor	r1, r1
    2c70:	08 95       	ret

00002c72 <__udivmodqi4>:
    2c72:	99 1b       	sub	r25, r25
    2c74:	79 e0       	ldi	r23, 0x09	; 9
    2c76:	04 c0       	rjmp	.+8      	; 0x2c80 <__udivmodqi4_ep>

00002c78 <__udivmodqi4_loop>:
    2c78:	99 1f       	adc	r25, r25
    2c7a:	96 17       	cp	r25, r22
    2c7c:	08 f0       	brcs	.+2      	; 0x2c80 <__udivmodqi4_ep>
    2c7e:	96 1b       	sub	r25, r22

00002c80 <__udivmodqi4_ep>:
    2c80:	88 1f       	adc	r24, r24
    2c82:	7a 95       	dec	r23
    2c84:	c9 f7       	brne	.-14     	; 0x2c78 <__udivmodqi4_loop>
    2c86:	80 95       	com	r24
    2c88:	08 95       	ret

00002c8a <__udivmodsi4>:
    2c8a:	a1 e2       	ldi	r26, 0x21	; 33
    2c8c:	1a 2e       	mov	r1, r26
    2c8e:	aa 1b       	sub	r26, r26
    2c90:	bb 1b       	sub	r27, r27
    2c92:	fd 01       	movw	r30, r26
    2c94:	0d c0       	rjmp	.+26     	; 0x2cb0 <__udivmodsi4_ep>

00002c96 <__udivmodsi4_loop>:
    2c96:	aa 1f       	adc	r26, r26
    2c98:	bb 1f       	adc	r27, r27
    2c9a:	ee 1f       	adc	r30, r30
    2c9c:	ff 1f       	adc	r31, r31
    2c9e:	a2 17       	cp	r26, r18
    2ca0:	b3 07       	cpc	r27, r19
    2ca2:	e4 07       	cpc	r30, r20
    2ca4:	f5 07       	cpc	r31, r21
    2ca6:	20 f0       	brcs	.+8      	; 0x2cb0 <__udivmodsi4_ep>
    2ca8:	a2 1b       	sub	r26, r18
    2caa:	b3 0b       	sbc	r27, r19
    2cac:	e4 0b       	sbc	r30, r20
    2cae:	f5 0b       	sbc	r31, r21

00002cb0 <__udivmodsi4_ep>:
    2cb0:	66 1f       	adc	r22, r22
    2cb2:	77 1f       	adc	r23, r23
    2cb4:	88 1f       	adc	r24, r24
    2cb6:	99 1f       	adc	r25, r25
    2cb8:	1a 94       	dec	r1
    2cba:	69 f7       	brne	.-38     	; 0x2c96 <__udivmodsi4_loop>
    2cbc:	60 95       	com	r22
    2cbe:	70 95       	com	r23
    2cc0:	80 95       	com	r24
    2cc2:	90 95       	com	r25
    2cc4:	9b 01       	movw	r18, r22
    2cc6:	ac 01       	movw	r20, r24
    2cc8:	bd 01       	movw	r22, r26
    2cca:	cf 01       	movw	r24, r30
    2ccc:	08 95       	ret

00002cce <itoa>:
    2cce:	fb 01       	movw	r30, r22
    2cd0:	9f 01       	movw	r18, r30
    2cd2:	e8 94       	clt
    2cd4:	42 30       	cpi	r20, 0x02	; 2
    2cd6:	c4 f0       	brlt	.+48     	; 0x2d08 <itoa+0x3a>
    2cd8:	45 32       	cpi	r20, 0x25	; 37
    2cda:	b4 f4       	brge	.+44     	; 0x2d08 <itoa+0x3a>
    2cdc:	4a 30       	cpi	r20, 0x0A	; 10
    2cde:	29 f4       	brne	.+10     	; 0x2cea <itoa+0x1c>
    2ce0:	97 fb       	bst	r25, 7
    2ce2:	1e f4       	brtc	.+6      	; 0x2cea <itoa+0x1c>
    2ce4:	90 95       	com	r25
    2ce6:	81 95       	neg	r24
    2ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    2cea:	64 2f       	mov	r22, r20
    2cec:	77 27       	eor	r23, r23
    2cee:	0e 94 98 16 	call	0x2d30	; 0x2d30 <__udivmodhi4>
    2cf2:	80 5d       	subi	r24, 0xD0	; 208
    2cf4:	8a 33       	cpi	r24, 0x3A	; 58
    2cf6:	0c f0       	brlt	.+2      	; 0x2cfa <itoa+0x2c>
    2cf8:	89 5d       	subi	r24, 0xD9	; 217
    2cfa:	81 93       	st	Z+, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	00 97       	sbiw	r24, 0x00	; 0
    2d00:	a1 f7       	brne	.-24     	; 0x2cea <itoa+0x1c>
    2d02:	16 f4       	brtc	.+4      	; 0x2d08 <itoa+0x3a>
    2d04:	5d e2       	ldi	r21, 0x2D	; 45
    2d06:	51 93       	st	Z+, r21
    2d08:	10 82       	st	Z, r1
    2d0a:	c9 01       	movw	r24, r18
    2d0c:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <strrev>

00002d10 <strrev>:
    2d10:	dc 01       	movw	r26, r24
    2d12:	fc 01       	movw	r30, r24
    2d14:	67 2f       	mov	r22, r23
    2d16:	71 91       	ld	r23, Z+
    2d18:	77 23       	and	r23, r23
    2d1a:	e1 f7       	brne	.-8      	; 0x2d14 <strrev+0x4>
    2d1c:	32 97       	sbiw	r30, 0x02	; 2
    2d1e:	04 c0       	rjmp	.+8      	; 0x2d28 <strrev+0x18>
    2d20:	7c 91       	ld	r23, X
    2d22:	6d 93       	st	X+, r22
    2d24:	70 83       	st	Z, r23
    2d26:	62 91       	ld	r22, -Z
    2d28:	ae 17       	cp	r26, r30
    2d2a:	bf 07       	cpc	r27, r31
    2d2c:	c8 f3       	brcs	.-14     	; 0x2d20 <strrev+0x10>
    2d2e:	08 95       	ret

00002d30 <__udivmodhi4>:
    2d30:	aa 1b       	sub	r26, r26
    2d32:	bb 1b       	sub	r27, r27
    2d34:	51 e1       	ldi	r21, 0x11	; 17
    2d36:	07 c0       	rjmp	.+14     	; 0x2d46 <__udivmodhi4_ep>

00002d38 <__udivmodhi4_loop>:
    2d38:	aa 1f       	adc	r26, r26
    2d3a:	bb 1f       	adc	r27, r27
    2d3c:	a6 17       	cp	r26, r22
    2d3e:	b7 07       	cpc	r27, r23
    2d40:	10 f0       	brcs	.+4      	; 0x2d46 <__udivmodhi4_ep>
    2d42:	a6 1b       	sub	r26, r22
    2d44:	b7 0b       	sbc	r27, r23

00002d46 <__udivmodhi4_ep>:
    2d46:	88 1f       	adc	r24, r24
    2d48:	99 1f       	adc	r25, r25
    2d4a:	5a 95       	dec	r21
    2d4c:	a9 f7       	brne	.-22     	; 0x2d38 <__udivmodhi4_loop>
    2d4e:	80 95       	com	r24
    2d50:	90 95       	com	r25
    2d52:	bc 01       	movw	r22, r24
    2d54:	cd 01       	movw	r24, r26
    2d56:	08 95       	ret

00002d58 <_exit>:
    2d58:	f8 94       	cli

00002d5a <__stop_program>:
    2d5a:	ff cf       	rjmp	.-2      	; 0x2d5a <__stop_program>
