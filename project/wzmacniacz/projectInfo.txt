brew install avrdude
xcode-select --install
brew tap osx-cross/avr
brew install avr-gcc

https://github.com/jawher/xavr

MacBookPro-MK:xavr ministerq$ python setup.py 
Found avr-gcc install in "/usr/local/bin/avr-gcc"
Found avr-objcopy install in "/usr/local/bin/avr-objcopy"
Found avr-objdump install in "/usr/local/bin/avr-objdump"
Found avr-size install in "/usr/local/bin/avr-size"
Found avr-nm install in "/usr/local/bin/avr-nm"
Found avrdude install in "/usr/local/bin/avrdude"
The following options are target specific:
  -mabsdata                   Assume that all data in static storage can be
                              accessed by LDS / STS.  This option is only
                              useful for reduced Tiny devices.
  -maccumulate-args           Accumulate outgoing function arguments and
                              acquire/release the needed stack space for
                              outgoing function arguments in function prologue/
                              epilogue.  Without this option, outgoing
                              arguments are pushed before calling a function
                              and popped afterwards.  This option can lead to
                              reduced code size for functions that call many
                              functions that get their arguments on the stack
                              like, for example printf.
  -mbranch-cost=              Set the branch costs for conditional branch
                              instructions.  Reasonable values are small, non-
                              negative integers.  The default branch cost is 0.
  -mcall-prologues            Use subroutines for function prologues and
                              epilogues.
  -mfract-convert-truncate    Allow to use truncation instead of rounding
                              towards zero for fractional fixed-point types.
  -mgas-isr-prologues         Allow usage of __gcc_isr pseudo instructions in
                              ISR prologues and epilogues.
  -mint8                      Use an 8-bit 'int' type.
  -mmain-is-OS_task           Treat main as if it had attribute OS_task.
  -mmcu=MCU                   Select the target MCU.
  -mn-flash=                  Set the number of 64 KiB flash segments.
  -mno-interrupts             Change the stack pointer without disabling
                              interrupts.
  -mpmem-wrap-around          Make the linker relaxation machine assume that a
                              program counter wrap-around occurs.
  -mrelax                     Relax branches.
  -mrmw                       Enable Read-Modify-Write (RMW) instructions
                              support/use.
  -mshort-calls               Use RJMP / RCALL even though CALL / JMP are
                              available.
  -mskip-bug                  Indicate presence of a processor erratum.
  -msp8                       The device has no SPH special function register.
                              This option will be overridden by the compiler
                              driver with the correct setting if presence/
                              absence of SPH can be deduced from -mmcu=MCU.
  -mstrict-X                  When accessing RAM, use X as imposed by the
                              hardware, i.e. just use pre-decrement, post-
                              increment and indirect addressing with the X
                              register.  Without this option, the compiler may
                              assume that there is an addressing mode X+const
                              similar to Y+const and Z+const and emit
                              instructions to emulate such an addressing mode
                              for X.
  -mtiny-stack                Change only the low 8 bits of the stack pointer.
  -nodevicelib                Do not link against the device-specific library
                              lib<MCU>.a.

Assembler options
=================

Use "-Wa,OPTION" to pass "OPTION" to the assembler.

AVR Assembler options:
  -mmcu=[avr-name] select microcontroller variant
                   [avr-name] can be:
                   avr1  - classic AVR core without data RAM
                   avr2  - classic AVR core with up to 8K program memory
                   avr25 - classic AVR core with up to 8K program memory
                           plus the MOVW instruction
                   avr3  - classic AVR core with up to 64K program memory
                   avr31 - classic AVR core with up to 128K program memory
                   avr35 - classic AVR core with up to 64K program memory
                           plus the MOVW instruction
                   avr4  - enhanced AVR core with up to 8K program memory
                   avr5  - enhanced AVR core with up to 64K program memory
                   avr51 - enhanced AVR core with up to 128K program memory
                   avr6  - enhanced AVR core with up to 256K program memory
                   avrxmega2 - XMEGA, > 8K, < 64K FLASH, < 64K RAM
                   avrxmega3 - XMEGA, RAM + FLASH < 64K, Flash visible in RAM
                   avrxmega4 - XMEGA, > 64K, <= 128K FLASH, <= 64K RAM
                   avrxmega5 - XMEGA, > 64K, <= 128K FLASH, > 64K RAM
                   avrxmega6 - XMEGA, > 128K, <= 256K FLASH, <= 64K RAM
                   avrxmega7 - XMEGA, > 128K, <= 256K FLASH, > 64K RAM
                   avrtiny   - AVR Tiny core with 16 gp registers
  -mall-opcodes    accept all AVR opcodes, even if not supported by MCU
  -mno-skip-bug    disable warnings for skipping two-word instructions
                   (default for avr4, avr5)
  -mno-wrap        reject rjmp/rcall instructions with 8K wrap-around
                   (default for avr3, avr5)
  -mrmw            accept Read-Modify-Write instructions
  -mlink-relax     generate relocations for linker relaxation (default)
  -mno-link-relax  don't generate relocations for linker relaxation.
  -mgcc-isr        accept the __gcc_isr pseudo-instruction.
Known MCU names:
  avr1 avr2 avr25 avr3 avr31 avr35 avr4 avr5 avr51 avr6 avrxmega1
  avrxmega2 avrxmega3 avrxmega4 avrxmega5 avrxmega6 avrxmega7 avrtiny
  at90s1200 attiny11 attiny12 attiny15 attiny28 at90s2313 at90s2323
  at90s2333 at90s2343 attiny22 attiny26 at90s4414 at90s4433 at90s4434
  at90s8515 at90c8534 at90s8535 ata5272 attiny13 attiny13a attiny2313
  attiny2313a attiny24 attiny24a attiny4313 attiny44 attiny44a attiny84
  attiny84a attiny25 attiny45 attiny85 attiny261 attiny261a attiny461
  attiny461a attiny861 attiny861a attiny87 attiny43u attiny48 attiny88
  attiny828 at86rf401 at43usb355 at76c711 atmega103 at43usb320 attiny167
  at90usb82 at90usb162 ata5505 atmega8u2 atmega16u2 atmega32u2 attiny1634
  atmega8 ata6289 atmega8a ata6285 ata6286 atmega48 atmega48a atmega48pa
  atmega48p atmega88 atmega88a atmega88p atmega88pa atmega8515 atmega8535
  atmega8hva at90pwm1 at90pwm2 at90pwm2b at90pwm3 at90pwm3b at90pwm81
  at90pwm161 ata5790 ata5795 atmega16 atmega16a atmega161 atmega162
  atmega163 atmega164a atmega164p atmega164pa atmega165 atmega165a
  atmega165p atmega165pa atmega168 atmega168a atmega168p atmega168pa
  atmega169 atmega169a atmega169p atmega169pa atmega32 atmega32a atmega323
  atmega324a atmega324p atmega324pa atmega325 atmega325a atmega325p
  atmega325pa atmega3250 atmega3250a atmega3250p atmega3250pa atmega328
  atmega328p atmega329 atmega329a atmega329p atmega329pa atmega3290
  atmega3290a atmega3290p atmega3290pa atmega406 atmega64rfr2
  atmega644rfr2 atmega64 atmega64a atmega640 atmega644 atmega644a
  atmega644p atmega644pa atmega645 atmega645a atmega645p atmega649
  atmega649a atmega649p atmega6450 atmega6450a atmega6450p atmega6490
  atmega6490a atmega6490p atmega64rfr2 atmega644rfr2 atmega16hva
  atmega16hva2 atmega16hvb atmega16hvbrevb atmega32hvb atmega32hvbrevb
  atmega64hve at90can32 at90can64 at90pwm161 at90pwm216 at90pwm316
  atmega32c1 atmega64c1 atmega16m1 atmega32m1 atmega64m1 atmega16u4
  atmega32u4 atmega32u6 at90usb646 at90usb647 at90scr100 at94k m3000
  atmega128 atmega128a atmega1280 atmega1281 atmega1284 atmega1284p
  atmega128rfa1 atmega128rfr2 atmega1284rfr2 at90can128 at90usb1286
  at90usb1287 atmega2560 atmega2561 atmega256rfr2 atmega2564rfr2
  atxmega16a4 atxmega16a4u atxmega16c4 atxmega16d4 atxmega32a4
  atxmega32a4u atxmega32c4 atxmega32d4 atxmega32e5 atxmega16e5 atxmega8e5
  atxmega32x1 attiny212 attiny214 attiny412 attiny414 attiny416 attiny417
  attiny814 attiny816 attiny817 attiny1614 attiny1616 attiny1617
  attiny3214 attiny3216 attiny3217 atxmega64a3 atxmega64a3u atxmega64a4u
  atxmega64b1 atxmega64b3 atxmega64c3 atxmega64d3 atxmega64d4 atxmega64a1
  atxmega64a1u atxmega128a3 atxmega128a3u atxmega128b1 atxmega128b3
  atxmega128c3 atxmega128d3 atxmega128d4 atxmega192a3 atxmega192a3u
  atxmega192c3 atxmega192d3 atxmega256a3 atxmega256a3u atxmega256a3b
  atxmega256a3bu atxmega256c3 atxmega256d3 atxmega384c3 atxmega384d3
  atxmega128a1 atxmega128a1u atxmega128a4u attiny4 attiny5 attiny9
  attiny10 attiny20 attiny40

Generated template:
	MCUs        : 273
	Programmers : 82
Installing template in: "/Users/ministerq/Library/Developer/Xcode/Templates/Project Template/xavr/xavr.xctemplate/"
Done. Hack away !